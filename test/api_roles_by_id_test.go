/*
Keycloak Admin REST API

Testing RolesByIDAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_RolesByIDAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RolesByIDAPIService DeleteRolesById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleId string

		httpRes, err := apiClient.RolesByIDAPI.DeleteRolesById(context.Background(), realm, roleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesByIDAPIService DeleteRolesByIdComposites", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleId string

		httpRes, err := apiClient.RolesByIDAPI.DeleteRolesByIdComposites(context.Background(), realm, roleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesByIDAPIService GetRolesById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleId string

		resp, httpRes, err := apiClient.RolesByIDAPI.GetRolesById(context.Background(), realm, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesByIDAPIService GetRolesByIdComposites", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleId string

		resp, httpRes, err := apiClient.RolesByIDAPI.GetRolesByIdComposites(context.Background(), realm, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesByIDAPIService GetRolesByIdCompositesClient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleId string
		var clientUuid string

		resp, httpRes, err := apiClient.RolesByIDAPI.GetRolesByIdCompositesClient(context.Background(), realm, roleId, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesByIDAPIService GetRolesByIdCompositesRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleId string

		resp, httpRes, err := apiClient.RolesByIDAPI.GetRolesByIdCompositesRealm(context.Background(), realm, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesByIDAPIService GetRolesByIdManagementPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleId string

		resp, httpRes, err := apiClient.RolesByIDAPI.GetRolesByIdManagementPermissions(context.Background(), realm, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesByIDAPIService PostRolesByIdComposites", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleId string

		httpRes, err := apiClient.RolesByIDAPI.PostRolesByIdComposites(context.Background(), realm, roleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesByIDAPIService PutRolesById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleId string

		httpRes, err := apiClient.RolesByIDAPI.PutRolesById(context.Background(), realm, roleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesByIDAPIService PutRolesByIdManagementPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleId string

		resp, httpRes, err := apiClient.RolesByIDAPI.PutRolesByIdManagementPermissions(context.Background(), realm, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
