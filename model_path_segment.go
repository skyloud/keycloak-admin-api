/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PathSegment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PathSegment{}

// PathSegment struct for PathSegment
type PathSegment struct {
	Path             *string              `json:"path,omitempty"`
	MatrixParameters *map[string][]string `json:"matrixParameters,omitempty"`
}

// NewPathSegment instantiates a new PathSegment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPathSegment() *PathSegment {
	this := PathSegment{}
	return &this
}

// NewPathSegmentWithDefaults instantiates a new PathSegment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPathSegmentWithDefaults() *PathSegment {
	this := PathSegment{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *PathSegment) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathSegment) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *PathSegment) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *PathSegment) SetPath(v string) {
	o.Path = &v
}

// GetMatrixParameters returns the MatrixParameters field value if set, zero value otherwise.
func (o *PathSegment) GetMatrixParameters() map[string][]string {
	if o == nil || IsNil(o.MatrixParameters) {
		var ret map[string][]string
		return ret
	}
	return *o.MatrixParameters
}

// GetMatrixParametersOk returns a tuple with the MatrixParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathSegment) GetMatrixParametersOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.MatrixParameters) {
		return nil, false
	}
	return o.MatrixParameters, true
}

// HasMatrixParameters returns a boolean if a field has been set.
func (o *PathSegment) HasMatrixParameters() bool {
	if o != nil && !IsNil(o.MatrixParameters) {
		return true
	}

	return false
}

// SetMatrixParameters gets a reference to the given map[string][]string and assigns it to the MatrixParameters field.
func (o *PathSegment) SetMatrixParameters(v map[string][]string) {
	o.MatrixParameters = &v
}

func (o PathSegment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PathSegment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.MatrixParameters) {
		toSerialize["matrixParameters"] = o.MatrixParameters
	}
	return toSerialize, nil
}

type NullablePathSegment struct {
	value *PathSegment
	isSet bool
}

func (v NullablePathSegment) Get() *PathSegment {
	return v.value
}

func (v *NullablePathSegment) Set(val *PathSegment) {
	v.value = val
	v.isSet = true
}

func (v NullablePathSegment) IsSet() bool {
	return v.isSet
}

func (v *NullablePathSegment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePathSegment(val *PathSegment) *NullablePathSegment {
	return &NullablePathSegment{value: val, isSet: true}
}

func (v NullablePathSegment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePathSegment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
