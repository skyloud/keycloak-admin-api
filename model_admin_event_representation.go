/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AdminEventRepresentation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminEventRepresentation{}

// AdminEventRepresentation struct for AdminEventRepresentation
type AdminEventRepresentation struct {
	Time           *int64                     `json:"time,omitempty"`
	RealmId        *string                    `json:"realmId,omitempty"`
	AuthDetails    *AuthDetailsRepresentation `json:"authDetails,omitempty"`
	OperationType  *string                    `json:"operationType,omitempty"`
	ResourceType   *string                    `json:"resourceType,omitempty"`
	ResourcePath   *string                    `json:"resourcePath,omitempty"`
	Representation *string                    `json:"representation,omitempty"`
	Error          *string                    `json:"error,omitempty"`
}

// NewAdminEventRepresentation instantiates a new AdminEventRepresentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminEventRepresentation() *AdminEventRepresentation {
	this := AdminEventRepresentation{}
	return &this
}

// NewAdminEventRepresentationWithDefaults instantiates a new AdminEventRepresentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminEventRepresentationWithDefaults() *AdminEventRepresentation {
	this := AdminEventRepresentation{}
	return &this
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *AdminEventRepresentation) GetTime() int64 {
	if o == nil || IsNil(o.Time) {
		var ret int64
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminEventRepresentation) GetTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *AdminEventRepresentation) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given int64 and assigns it to the Time field.
func (o *AdminEventRepresentation) SetTime(v int64) {
	o.Time = &v
}

// GetRealmId returns the RealmId field value if set, zero value otherwise.
func (o *AdminEventRepresentation) GetRealmId() string {
	if o == nil || IsNil(o.RealmId) {
		var ret string
		return ret
	}
	return *o.RealmId
}

// GetRealmIdOk returns a tuple with the RealmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminEventRepresentation) GetRealmIdOk() (*string, bool) {
	if o == nil || IsNil(o.RealmId) {
		return nil, false
	}
	return o.RealmId, true
}

// HasRealmId returns a boolean if a field has been set.
func (o *AdminEventRepresentation) HasRealmId() bool {
	if o != nil && !IsNil(o.RealmId) {
		return true
	}

	return false
}

// SetRealmId gets a reference to the given string and assigns it to the RealmId field.
func (o *AdminEventRepresentation) SetRealmId(v string) {
	o.RealmId = &v
}

// GetAuthDetails returns the AuthDetails field value if set, zero value otherwise.
func (o *AdminEventRepresentation) GetAuthDetails() AuthDetailsRepresentation {
	if o == nil || IsNil(o.AuthDetails) {
		var ret AuthDetailsRepresentation
		return ret
	}
	return *o.AuthDetails
}

// GetAuthDetailsOk returns a tuple with the AuthDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminEventRepresentation) GetAuthDetailsOk() (*AuthDetailsRepresentation, bool) {
	if o == nil || IsNil(o.AuthDetails) {
		return nil, false
	}
	return o.AuthDetails, true
}

// HasAuthDetails returns a boolean if a field has been set.
func (o *AdminEventRepresentation) HasAuthDetails() bool {
	if o != nil && !IsNil(o.AuthDetails) {
		return true
	}

	return false
}

// SetAuthDetails gets a reference to the given AuthDetailsRepresentation and assigns it to the AuthDetails field.
func (o *AdminEventRepresentation) SetAuthDetails(v AuthDetailsRepresentation) {
	o.AuthDetails = &v
}

// GetOperationType returns the OperationType field value if set, zero value otherwise.
func (o *AdminEventRepresentation) GetOperationType() string {
	if o == nil || IsNil(o.OperationType) {
		var ret string
		return ret
	}
	return *o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminEventRepresentation) GetOperationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OperationType) {
		return nil, false
	}
	return o.OperationType, true
}

// HasOperationType returns a boolean if a field has been set.
func (o *AdminEventRepresentation) HasOperationType() bool {
	if o != nil && !IsNil(o.OperationType) {
		return true
	}

	return false
}

// SetOperationType gets a reference to the given string and assigns it to the OperationType field.
func (o *AdminEventRepresentation) SetOperationType(v string) {
	o.OperationType = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *AdminEventRepresentation) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminEventRepresentation) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *AdminEventRepresentation) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *AdminEventRepresentation) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetResourcePath returns the ResourcePath field value if set, zero value otherwise.
func (o *AdminEventRepresentation) GetResourcePath() string {
	if o == nil || IsNil(o.ResourcePath) {
		var ret string
		return ret
	}
	return *o.ResourcePath
}

// GetResourcePathOk returns a tuple with the ResourcePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminEventRepresentation) GetResourcePathOk() (*string, bool) {
	if o == nil || IsNil(o.ResourcePath) {
		return nil, false
	}
	return o.ResourcePath, true
}

// HasResourcePath returns a boolean if a field has been set.
func (o *AdminEventRepresentation) HasResourcePath() bool {
	if o != nil && !IsNil(o.ResourcePath) {
		return true
	}

	return false
}

// SetResourcePath gets a reference to the given string and assigns it to the ResourcePath field.
func (o *AdminEventRepresentation) SetResourcePath(v string) {
	o.ResourcePath = &v
}

// GetRepresentation returns the Representation field value if set, zero value otherwise.
func (o *AdminEventRepresentation) GetRepresentation() string {
	if o == nil || IsNil(o.Representation) {
		var ret string
		return ret
	}
	return *o.Representation
}

// GetRepresentationOk returns a tuple with the Representation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminEventRepresentation) GetRepresentationOk() (*string, bool) {
	if o == nil || IsNil(o.Representation) {
		return nil, false
	}
	return o.Representation, true
}

// HasRepresentation returns a boolean if a field has been set.
func (o *AdminEventRepresentation) HasRepresentation() bool {
	if o != nil && !IsNil(o.Representation) {
		return true
	}

	return false
}

// SetRepresentation gets a reference to the given string and assigns it to the Representation field.
func (o *AdminEventRepresentation) SetRepresentation(v string) {
	o.Representation = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *AdminEventRepresentation) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminEventRepresentation) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *AdminEventRepresentation) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *AdminEventRepresentation) SetError(v string) {
	o.Error = &v
}

func (o AdminEventRepresentation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminEventRepresentation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.RealmId) {
		toSerialize["realmId"] = o.RealmId
	}
	if !IsNil(o.AuthDetails) {
		toSerialize["authDetails"] = o.AuthDetails
	}
	if !IsNil(o.OperationType) {
		toSerialize["operationType"] = o.OperationType
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if !IsNil(o.ResourcePath) {
		toSerialize["resourcePath"] = o.ResourcePath
	}
	if !IsNil(o.Representation) {
		toSerialize["representation"] = o.Representation
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableAdminEventRepresentation struct {
	value *AdminEventRepresentation
	isSet bool
}

func (v NullableAdminEventRepresentation) Get() *AdminEventRepresentation {
	return v.value
}

func (v *NullableAdminEventRepresentation) Set(val *AdminEventRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminEventRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminEventRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminEventRepresentation(val *AdminEventRepresentation) *NullableAdminEventRepresentation {
	return &NullableAdminEventRepresentation{value: val, isSet: true}
}

func (v NullableAdminEventRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminEventRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
