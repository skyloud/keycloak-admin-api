/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PathConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PathConfig{}

// PathConfig struct for PathConfig
type PathConfig struct {
	Name                  *string                            `json:"name,omitempty"`
	Type                  *string                            `json:"type,omitempty"`
	Path                  *string                            `json:"path,omitempty"`
	Methods               []MethodConfig                     `json:"methods,omitempty"`
	Scopes                []string                           `json:"scopes,omitempty"`
	Id                    *string                            `json:"id,omitempty"`
	EnforcementMode       map[string]interface{}             `json:"enforcement-mode,omitempty"`
	ClaimInformationPoint *map[string]map[string]interface{} `json:"claim-information-point,omitempty"`
	Invalidated           *bool                              `json:"invalidated,omitempty"`
	StaticPath            *bool                              `json:"staticPath,omitempty"`
	Static                *bool                              `json:"static,omitempty"`
}

// NewPathConfig instantiates a new PathConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPathConfig() *PathConfig {
	this := PathConfig{}
	return &this
}

// NewPathConfigWithDefaults instantiates a new PathConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPathConfigWithDefaults() *PathConfig {
	this := PathConfig{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PathConfig) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathConfig) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PathConfig) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PathConfig) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PathConfig) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathConfig) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PathConfig) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PathConfig) SetType(v string) {
	o.Type = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *PathConfig) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathConfig) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *PathConfig) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *PathConfig) SetPath(v string) {
	o.Path = &v
}

// GetMethods returns the Methods field value if set, zero value otherwise.
func (o *PathConfig) GetMethods() []MethodConfig {
	if o == nil || IsNil(o.Methods) {
		var ret []MethodConfig
		return ret
	}
	return o.Methods
}

// GetMethodsOk returns a tuple with the Methods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathConfig) GetMethodsOk() ([]MethodConfig, bool) {
	if o == nil || IsNil(o.Methods) {
		return nil, false
	}
	return o.Methods, true
}

// HasMethods returns a boolean if a field has been set.
func (o *PathConfig) HasMethods() bool {
	if o != nil && !IsNil(o.Methods) {
		return true
	}

	return false
}

// SetMethods gets a reference to the given []MethodConfig and assigns it to the Methods field.
func (o *PathConfig) SetMethods(v []MethodConfig) {
	o.Methods = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *PathConfig) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathConfig) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *PathConfig) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *PathConfig) SetScopes(v []string) {
	o.Scopes = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PathConfig) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathConfig) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PathConfig) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PathConfig) SetId(v string) {
	o.Id = &v
}

// GetEnforcementMode returns the EnforcementMode field value if set, zero value otherwise.
func (o *PathConfig) GetEnforcementMode() map[string]interface{} {
	if o == nil || IsNil(o.EnforcementMode) {
		var ret map[string]interface{}
		return ret
	}
	return o.EnforcementMode
}

// GetEnforcementModeOk returns a tuple with the EnforcementMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathConfig) GetEnforcementModeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.EnforcementMode) {
		return map[string]interface{}{}, false
	}
	return o.EnforcementMode, true
}

// HasEnforcementMode returns a boolean if a field has been set.
func (o *PathConfig) HasEnforcementMode() bool {
	if o != nil && !IsNil(o.EnforcementMode) {
		return true
	}

	return false
}

// SetEnforcementMode gets a reference to the given map[string]interface{} and assigns it to the EnforcementMode field.
func (o *PathConfig) SetEnforcementMode(v map[string]interface{}) {
	o.EnforcementMode = v
}

// GetClaimInformationPoint returns the ClaimInformationPoint field value if set, zero value otherwise.
func (o *PathConfig) GetClaimInformationPoint() map[string]map[string]interface{} {
	if o == nil || IsNil(o.ClaimInformationPoint) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.ClaimInformationPoint
}

// GetClaimInformationPointOk returns a tuple with the ClaimInformationPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathConfig) GetClaimInformationPointOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.ClaimInformationPoint) {
		return nil, false
	}
	return o.ClaimInformationPoint, true
}

// HasClaimInformationPoint returns a boolean if a field has been set.
func (o *PathConfig) HasClaimInformationPoint() bool {
	if o != nil && !IsNil(o.ClaimInformationPoint) {
		return true
	}

	return false
}

// SetClaimInformationPoint gets a reference to the given map[string]map[string]interface{} and assigns it to the ClaimInformationPoint field.
func (o *PathConfig) SetClaimInformationPoint(v map[string]map[string]interface{}) {
	o.ClaimInformationPoint = &v
}

// GetInvalidated returns the Invalidated field value if set, zero value otherwise.
func (o *PathConfig) GetInvalidated() bool {
	if o == nil || IsNil(o.Invalidated) {
		var ret bool
		return ret
	}
	return *o.Invalidated
}

// GetInvalidatedOk returns a tuple with the Invalidated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathConfig) GetInvalidatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Invalidated) {
		return nil, false
	}
	return o.Invalidated, true
}

// HasInvalidated returns a boolean if a field has been set.
func (o *PathConfig) HasInvalidated() bool {
	if o != nil && !IsNil(o.Invalidated) {
		return true
	}

	return false
}

// SetInvalidated gets a reference to the given bool and assigns it to the Invalidated field.
func (o *PathConfig) SetInvalidated(v bool) {
	o.Invalidated = &v
}

// GetStaticPath returns the StaticPath field value if set, zero value otherwise.
func (o *PathConfig) GetStaticPath() bool {
	if o == nil || IsNil(o.StaticPath) {
		var ret bool
		return ret
	}
	return *o.StaticPath
}

// GetStaticPathOk returns a tuple with the StaticPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathConfig) GetStaticPathOk() (*bool, bool) {
	if o == nil || IsNil(o.StaticPath) {
		return nil, false
	}
	return o.StaticPath, true
}

// HasStaticPath returns a boolean if a field has been set.
func (o *PathConfig) HasStaticPath() bool {
	if o != nil && !IsNil(o.StaticPath) {
		return true
	}

	return false
}

// SetStaticPath gets a reference to the given bool and assigns it to the StaticPath field.
func (o *PathConfig) SetStaticPath(v bool) {
	o.StaticPath = &v
}

// GetStatic returns the Static field value if set, zero value otherwise.
func (o *PathConfig) GetStatic() bool {
	if o == nil || IsNil(o.Static) {
		var ret bool
		return ret
	}
	return *o.Static
}

// GetStaticOk returns a tuple with the Static field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathConfig) GetStaticOk() (*bool, bool) {
	if o == nil || IsNil(o.Static) {
		return nil, false
	}
	return o.Static, true
}

// HasStatic returns a boolean if a field has been set.
func (o *PathConfig) HasStatic() bool {
	if o != nil && !IsNil(o.Static) {
		return true
	}

	return false
}

// SetStatic gets a reference to the given bool and assigns it to the Static field.
func (o *PathConfig) SetStatic(v bool) {
	o.Static = &v
}

func (o PathConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PathConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Methods) {
		toSerialize["methods"] = o.Methods
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.EnforcementMode) {
		toSerialize["enforcement-mode"] = o.EnforcementMode
	}
	if !IsNil(o.ClaimInformationPoint) {
		toSerialize["claim-information-point"] = o.ClaimInformationPoint
	}
	if !IsNil(o.Invalidated) {
		toSerialize["invalidated"] = o.Invalidated
	}
	if !IsNil(o.StaticPath) {
		toSerialize["staticPath"] = o.StaticPath
	}
	if !IsNil(o.Static) {
		toSerialize["static"] = o.Static
	}
	return toSerialize, nil
}

type NullablePathConfig struct {
	value *PathConfig
	isSet bool
}

func (v NullablePathConfig) Get() *PathConfig {
	return v.value
}

func (v *NullablePathConfig) Set(val *PathConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePathConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePathConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePathConfig(val *PathConfig) *NullablePathConfig {
	return &NullablePathConfig{value: val, isSet: true}
}

func (v NullablePathConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePathConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
