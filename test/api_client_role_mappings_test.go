/*
Keycloak Admin REST API

Testing ClientRoleMappingsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_ClientRoleMappingsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ClientRoleMappingsAPIService DeleteGroupRoleMappingsClient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		httpRes, err := apiClient.ClientRoleMappingsAPI.DeleteGroupRoleMappingsClient(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientRoleMappingsAPIService DeleteUserRoleMappingsClient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		httpRes, err := apiClient.ClientRoleMappingsAPI.DeleteUserRoleMappingsClient(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientRoleMappingsAPIService GetGroupRoleMappingsClient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		resp, httpRes, err := apiClient.ClientRoleMappingsAPI.GetGroupRoleMappingsClient(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientRoleMappingsAPIService GetGroupRoleMappingsClientAvailable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		resp, httpRes, err := apiClient.ClientRoleMappingsAPI.GetGroupRoleMappingsClientAvailable(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientRoleMappingsAPIService GetGroupRoleMappingsClientComposite", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		resp, httpRes, err := apiClient.ClientRoleMappingsAPI.GetGroupRoleMappingsClientComposite(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientRoleMappingsAPIService GetUserRoleMappingsClient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		resp, httpRes, err := apiClient.ClientRoleMappingsAPI.GetUserRoleMappingsClient(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientRoleMappingsAPIService GetUserRoleMappingsClientAvailable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		resp, httpRes, err := apiClient.ClientRoleMappingsAPI.GetUserRoleMappingsClientAvailable(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientRoleMappingsAPIService GetUserRoleMappingsClientComposite", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		resp, httpRes, err := apiClient.ClientRoleMappingsAPI.GetUserRoleMappingsClientComposite(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientRoleMappingsAPIService PostGroupRoleMappingsClient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		httpRes, err := apiClient.ClientRoleMappingsAPI.PostGroupRoleMappingsClient(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientRoleMappingsAPIService PostUserRoleMappingsClient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		httpRes, err := apiClient.ClientRoleMappingsAPI.PostUserRoleMappingsClient(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
