/*
Keycloak Admin REST API

Testing GroupsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_GroupsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GroupsAPIService DeleteGroupByRealmById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.GroupsAPI.DeleteGroupByRealmById(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService GetChildren", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.GroupsAPI.GetChildren(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService GetGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.GroupsAPI.GetGroup(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService GetGroupManagementPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.GroupsAPI.GetGroupManagementPermissions(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService GetGroupsByRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.GroupsAPI.GetGroupsByRealm(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService GetGroupsCountByRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.GroupsAPI.GetGroupsCountByRealm(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService GetMembers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.GroupsAPI.GetMembers(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService PostChildren", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.GroupsAPI.PostChildren(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService PostGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.GroupsAPI.PostGroups(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService PutGroupByRealmById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.GroupsAPI.PutGroupByRealmById(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService PutGroupManagementPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.GroupsAPI.PutGroupManagementPermissions(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
