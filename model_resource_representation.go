/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResourceRepresentation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceRepresentation{}

// ResourceRepresentation struct for ResourceRepresentation
type ResourceRepresentation struct {
	Id                 *string                      `json:"id,omitempty"`
	Name               *string                      `json:"name,omitempty"`
	Uris               []string                     `json:"uris,omitempty"`
	Type               *string                      `json:"type,omitempty"`
	Scopes             []ScopeRepresentation        `json:"scopes,omitempty"`
	IconUri            *string                      `json:"icon_uri,omitempty"`
	Owner              *ResourceRepresentationOwner `json:"owner,omitempty"`
	OwnerManagedAccess *bool                        `json:"ownerManagedAccess,omitempty"`
	DisplayName        *string                      `json:"displayName,omitempty"`
	Attributes         *map[string][]string         `json:"attributes,omitempty"`
	Uri                *string                      `json:"uri,omitempty"`
	ScopesUma          []ScopeRepresentation        `json:"scopesUma,omitempty"`
}

// NewResourceRepresentation instantiates a new ResourceRepresentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceRepresentation() *ResourceRepresentation {
	this := ResourceRepresentation{}
	return &this
}

// NewResourceRepresentationWithDefaults instantiates a new ResourceRepresentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceRepresentationWithDefaults() *ResourceRepresentation {
	this := ResourceRepresentation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResourceRepresentation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRepresentation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResourceRepresentation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResourceRepresentation) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResourceRepresentation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRepresentation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResourceRepresentation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResourceRepresentation) SetName(v string) {
	o.Name = &v
}

// GetUris returns the Uris field value if set, zero value otherwise.
func (o *ResourceRepresentation) GetUris() []string {
	if o == nil || IsNil(o.Uris) {
		var ret []string
		return ret
	}
	return o.Uris
}

// GetUrisOk returns a tuple with the Uris field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRepresentation) GetUrisOk() ([]string, bool) {
	if o == nil || IsNil(o.Uris) {
		return nil, false
	}
	return o.Uris, true
}

// HasUris returns a boolean if a field has been set.
func (o *ResourceRepresentation) HasUris() bool {
	if o != nil && !IsNil(o.Uris) {
		return true
	}

	return false
}

// SetUris gets a reference to the given []string and assigns it to the Uris field.
func (o *ResourceRepresentation) SetUris(v []string) {
	o.Uris = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResourceRepresentation) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRepresentation) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResourceRepresentation) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ResourceRepresentation) SetType(v string) {
	o.Type = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *ResourceRepresentation) GetScopes() []ScopeRepresentation {
	if o == nil || IsNil(o.Scopes) {
		var ret []ScopeRepresentation
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRepresentation) GetScopesOk() ([]ScopeRepresentation, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *ResourceRepresentation) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []ScopeRepresentation and assigns it to the Scopes field.
func (o *ResourceRepresentation) SetScopes(v []ScopeRepresentation) {
	o.Scopes = v
}

// GetIconUri returns the IconUri field value if set, zero value otherwise.
func (o *ResourceRepresentation) GetIconUri() string {
	if o == nil || IsNil(o.IconUri) {
		var ret string
		return ret
	}
	return *o.IconUri
}

// GetIconUriOk returns a tuple with the IconUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRepresentation) GetIconUriOk() (*string, bool) {
	if o == nil || IsNil(o.IconUri) {
		return nil, false
	}
	return o.IconUri, true
}

// HasIconUri returns a boolean if a field has been set.
func (o *ResourceRepresentation) HasIconUri() bool {
	if o != nil && !IsNil(o.IconUri) {
		return true
	}

	return false
}

// SetIconUri gets a reference to the given string and assigns it to the IconUri field.
func (o *ResourceRepresentation) SetIconUri(v string) {
	o.IconUri = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ResourceRepresentation) GetOwner() ResourceRepresentationOwner {
	if o == nil || IsNil(o.Owner) {
		var ret ResourceRepresentationOwner
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRepresentation) GetOwnerOk() (*ResourceRepresentationOwner, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ResourceRepresentation) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given ResourceRepresentationOwner and assigns it to the Owner field.
func (o *ResourceRepresentation) SetOwner(v ResourceRepresentationOwner) {
	o.Owner = &v
}

// GetOwnerManagedAccess returns the OwnerManagedAccess field value if set, zero value otherwise.
func (o *ResourceRepresentation) GetOwnerManagedAccess() bool {
	if o == nil || IsNil(o.OwnerManagedAccess) {
		var ret bool
		return ret
	}
	return *o.OwnerManagedAccess
}

// GetOwnerManagedAccessOk returns a tuple with the OwnerManagedAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRepresentation) GetOwnerManagedAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.OwnerManagedAccess) {
		return nil, false
	}
	return o.OwnerManagedAccess, true
}

// HasOwnerManagedAccess returns a boolean if a field has been set.
func (o *ResourceRepresentation) HasOwnerManagedAccess() bool {
	if o != nil && !IsNil(o.OwnerManagedAccess) {
		return true
	}

	return false
}

// SetOwnerManagedAccess gets a reference to the given bool and assigns it to the OwnerManagedAccess field.
func (o *ResourceRepresentation) SetOwnerManagedAccess(v bool) {
	o.OwnerManagedAccess = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ResourceRepresentation) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRepresentation) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ResourceRepresentation) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ResourceRepresentation) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ResourceRepresentation) GetAttributes() map[string][]string {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string][]string
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRepresentation) GetAttributesOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ResourceRepresentation) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string][]string and assigns it to the Attributes field.
func (o *ResourceRepresentation) SetAttributes(v map[string][]string) {
	o.Attributes = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *ResourceRepresentation) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRepresentation) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *ResourceRepresentation) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *ResourceRepresentation) SetUri(v string) {
	o.Uri = &v
}

// GetScopesUma returns the ScopesUma field value if set, zero value otherwise.
func (o *ResourceRepresentation) GetScopesUma() []ScopeRepresentation {
	if o == nil || IsNil(o.ScopesUma) {
		var ret []ScopeRepresentation
		return ret
	}
	return o.ScopesUma
}

// GetScopesUmaOk returns a tuple with the ScopesUma field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRepresentation) GetScopesUmaOk() ([]ScopeRepresentation, bool) {
	if o == nil || IsNil(o.ScopesUma) {
		return nil, false
	}
	return o.ScopesUma, true
}

// HasScopesUma returns a boolean if a field has been set.
func (o *ResourceRepresentation) HasScopesUma() bool {
	if o != nil && !IsNil(o.ScopesUma) {
		return true
	}

	return false
}

// SetScopesUma gets a reference to the given []ScopeRepresentation and assigns it to the ScopesUma field.
func (o *ResourceRepresentation) SetScopesUma(v []ScopeRepresentation) {
	o.ScopesUma = v
}

func (o ResourceRepresentation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceRepresentation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Uris) {
		toSerialize["uris"] = o.Uris
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.IconUri) {
		toSerialize["icon_uri"] = o.IconUri
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.OwnerManagedAccess) {
		toSerialize["ownerManagedAccess"] = o.OwnerManagedAccess
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.ScopesUma) {
		toSerialize["scopesUma"] = o.ScopesUma
	}
	return toSerialize, nil
}

type NullableResourceRepresentation struct {
	value *ResourceRepresentation
	isSet bool
}

func (v NullableResourceRepresentation) Get() *ResourceRepresentation {
	return v.value
}

func (v *NullableResourceRepresentation) Set(val *ResourceRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceRepresentation(val *ResourceRepresentation) *NullableResourceRepresentation {
	return &NullableResourceRepresentation{value: val, isSet: true}
}

func (v NullableResourceRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
