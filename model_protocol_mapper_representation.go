/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProtocolMapperRepresentation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProtocolMapperRepresentation{}

// ProtocolMapperRepresentation struct for ProtocolMapperRepresentation
type ProtocolMapperRepresentation struct {
	Id              *string            `json:"id,omitempty"`
	Name            *string            `json:"name,omitempty"`
	Protocol        *string            `json:"protocol,omitempty"`
	ProtocolMapper  *string            `json:"protocolMapper,omitempty"`
	ConsentRequired *bool              `json:"consentRequired,omitempty"`
	ConsentText     *string            `json:"consentText,omitempty"`
	Config          *map[string]string `json:"config,omitempty"`
}

// NewProtocolMapperRepresentation instantiates a new ProtocolMapperRepresentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtocolMapperRepresentation() *ProtocolMapperRepresentation {
	this := ProtocolMapperRepresentation{}
	return &this
}

// NewProtocolMapperRepresentationWithDefaults instantiates a new ProtocolMapperRepresentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtocolMapperRepresentationWithDefaults() *ProtocolMapperRepresentation {
	this := ProtocolMapperRepresentation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProtocolMapperRepresentation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolMapperRepresentation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProtocolMapperRepresentation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProtocolMapperRepresentation) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProtocolMapperRepresentation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolMapperRepresentation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProtocolMapperRepresentation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProtocolMapperRepresentation) SetName(v string) {
	o.Name = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *ProtocolMapperRepresentation) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolMapperRepresentation) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *ProtocolMapperRepresentation) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *ProtocolMapperRepresentation) SetProtocol(v string) {
	o.Protocol = &v
}

// GetProtocolMapper returns the ProtocolMapper field value if set, zero value otherwise.
func (o *ProtocolMapperRepresentation) GetProtocolMapper() string {
	if o == nil || IsNil(o.ProtocolMapper) {
		var ret string
		return ret
	}
	return *o.ProtocolMapper
}

// GetProtocolMapperOk returns a tuple with the ProtocolMapper field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolMapperRepresentation) GetProtocolMapperOk() (*string, bool) {
	if o == nil || IsNil(o.ProtocolMapper) {
		return nil, false
	}
	return o.ProtocolMapper, true
}

// HasProtocolMapper returns a boolean if a field has been set.
func (o *ProtocolMapperRepresentation) HasProtocolMapper() bool {
	if o != nil && !IsNil(o.ProtocolMapper) {
		return true
	}

	return false
}

// SetProtocolMapper gets a reference to the given string and assigns it to the ProtocolMapper field.
func (o *ProtocolMapperRepresentation) SetProtocolMapper(v string) {
	o.ProtocolMapper = &v
}

// GetConsentRequired returns the ConsentRequired field value if set, zero value otherwise.
func (o *ProtocolMapperRepresentation) GetConsentRequired() bool {
	if o == nil || IsNil(o.ConsentRequired) {
		var ret bool
		return ret
	}
	return *o.ConsentRequired
}

// GetConsentRequiredOk returns a tuple with the ConsentRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolMapperRepresentation) GetConsentRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.ConsentRequired) {
		return nil, false
	}
	return o.ConsentRequired, true
}

// HasConsentRequired returns a boolean if a field has been set.
func (o *ProtocolMapperRepresentation) HasConsentRequired() bool {
	if o != nil && !IsNil(o.ConsentRequired) {
		return true
	}

	return false
}

// SetConsentRequired gets a reference to the given bool and assigns it to the ConsentRequired field.
func (o *ProtocolMapperRepresentation) SetConsentRequired(v bool) {
	o.ConsentRequired = &v
}

// GetConsentText returns the ConsentText field value if set, zero value otherwise.
func (o *ProtocolMapperRepresentation) GetConsentText() string {
	if o == nil || IsNil(o.ConsentText) {
		var ret string
		return ret
	}
	return *o.ConsentText
}

// GetConsentTextOk returns a tuple with the ConsentText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolMapperRepresentation) GetConsentTextOk() (*string, bool) {
	if o == nil || IsNil(o.ConsentText) {
		return nil, false
	}
	return o.ConsentText, true
}

// HasConsentText returns a boolean if a field has been set.
func (o *ProtocolMapperRepresentation) HasConsentText() bool {
	if o != nil && !IsNil(o.ConsentText) {
		return true
	}

	return false
}

// SetConsentText gets a reference to the given string and assigns it to the ConsentText field.
func (o *ProtocolMapperRepresentation) SetConsentText(v string) {
	o.ConsentText = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ProtocolMapperRepresentation) GetConfig() map[string]string {
	if o == nil || IsNil(o.Config) {
		var ret map[string]string
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolMapperRepresentation) GetConfigOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ProtocolMapperRepresentation) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]string and assigns it to the Config field.
func (o *ProtocolMapperRepresentation) SetConfig(v map[string]string) {
	o.Config = &v
}

func (o ProtocolMapperRepresentation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProtocolMapperRepresentation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.ProtocolMapper) {
		toSerialize["protocolMapper"] = o.ProtocolMapper
	}
	if !IsNil(o.ConsentRequired) {
		toSerialize["consentRequired"] = o.ConsentRequired
	}
	if !IsNil(o.ConsentText) {
		toSerialize["consentText"] = o.ConsentText
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	return toSerialize, nil
}

type NullableProtocolMapperRepresentation struct {
	value *ProtocolMapperRepresentation
	isSet bool
}

func (v NullableProtocolMapperRepresentation) Get() *ProtocolMapperRepresentation {
	return v.value
}

func (v *NullableProtocolMapperRepresentation) Set(val *ProtocolMapperRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocolMapperRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocolMapperRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocolMapperRepresentation(val *ProtocolMapperRepresentation) *NullableProtocolMapperRepresentation {
	return &NullableProtocolMapperRepresentation{value: val, isSet: true}
}

func (v NullableProtocolMapperRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocolMapperRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
