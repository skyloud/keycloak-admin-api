/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UPAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UPAttribute{}

// UPAttribute struct for UPAttribute
type UPAttribute struct {
	Name        *string                            `json:"name,omitempty"`
	DisplayName *string                            `json:"displayName,omitempty"`
	Validations *map[string]map[string]interface{} `json:"validations,omitempty"`
	Annotations map[string]map[string]interface{}  `json:"annotations,omitempty"`
	Required    *UPAttributeRequired               `json:"required,omitempty"`
	Permissions *UPAttributePermissions            `json:"permissions,omitempty"`
	Selector    *UPAttributeSelector               `json:"selector,omitempty"`
	Group       *string                            `json:"group,omitempty"`
}

// NewUPAttribute instantiates a new UPAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUPAttribute() *UPAttribute {
	this := UPAttribute{}
	return &this
}

// NewUPAttributeWithDefaults instantiates a new UPAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUPAttributeWithDefaults() *UPAttribute {
	this := UPAttribute{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UPAttribute) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UPAttribute) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UPAttribute) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UPAttribute) SetName(v string) {
	o.Name = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *UPAttribute) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UPAttribute) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *UPAttribute) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *UPAttribute) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetValidations returns the Validations field value if set, zero value otherwise.
func (o *UPAttribute) GetValidations() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Validations) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Validations
}

// GetValidationsOk returns a tuple with the Validations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UPAttribute) GetValidationsOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Validations) {
		return nil, false
	}
	return o.Validations, true
}

// HasValidations returns a boolean if a field has been set.
func (o *UPAttribute) HasValidations() bool {
	if o != nil && !IsNil(o.Validations) {
		return true
	}

	return false
}

// SetValidations gets a reference to the given map[string]map[string]interface{} and assigns it to the Validations field.
func (o *UPAttribute) SetValidations(v map[string]map[string]interface{}) {
	o.Validations = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *UPAttribute) GetAnnotations() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UPAttribute) GetAnnotationsOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Annotations) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *UPAttribute) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]map[string]interface{} and assigns it to the Annotations field.
func (o *UPAttribute) SetAnnotations(v map[string]map[string]interface{}) {
	o.Annotations = v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *UPAttribute) GetRequired() UPAttributeRequired {
	if o == nil || IsNil(o.Required) {
		var ret UPAttributeRequired
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UPAttribute) GetRequiredOk() (*UPAttributeRequired, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *UPAttribute) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given UPAttributeRequired and assigns it to the Required field.
func (o *UPAttribute) SetRequired(v UPAttributeRequired) {
	o.Required = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *UPAttribute) GetPermissions() UPAttributePermissions {
	if o == nil || IsNil(o.Permissions) {
		var ret UPAttributePermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UPAttribute) GetPermissionsOk() (*UPAttributePermissions, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *UPAttribute) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given UPAttributePermissions and assigns it to the Permissions field.
func (o *UPAttribute) SetPermissions(v UPAttributePermissions) {
	o.Permissions = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *UPAttribute) GetSelector() UPAttributeSelector {
	if o == nil || IsNil(o.Selector) {
		var ret UPAttributeSelector
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UPAttribute) GetSelectorOk() (*UPAttributeSelector, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *UPAttribute) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given UPAttributeSelector and assigns it to the Selector field.
func (o *UPAttribute) SetSelector(v UPAttributeSelector) {
	o.Selector = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *UPAttribute) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UPAttribute) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *UPAttribute) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *UPAttribute) SetGroup(v string) {
	o.Group = &v
}

func (o UPAttribute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UPAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Validations) {
		toSerialize["validations"] = o.Validations
	}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	return toSerialize, nil
}

type NullableUPAttribute struct {
	value *UPAttribute
	isSet bool
}

func (v NullableUPAttribute) Get() *UPAttribute {
	return v.value
}

func (v *NullableUPAttribute) Set(val *UPAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableUPAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableUPAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUPAttribute(val *UPAttribute) *NullableUPAttribute {
	return &NullableUPAttribute{value: val, isSet: true}
}

func (v NullableUPAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUPAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
