/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserConsentRepresentation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserConsentRepresentation{}

// UserConsentRepresentation struct for UserConsentRepresentation
type UserConsentRepresentation struct {
	ClientId            *string  `json:"clientId,omitempty"`
	GrantedClientScopes []string `json:"grantedClientScopes,omitempty"`
	CreatedDate         *int64   `json:"createdDate,omitempty"`
	LastUpdatedDate     *int64   `json:"lastUpdatedDate,omitempty"`
	GrantedRealmRoles   []string `json:"grantedRealmRoles,omitempty"`
}

// NewUserConsentRepresentation instantiates a new UserConsentRepresentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserConsentRepresentation() *UserConsentRepresentation {
	this := UserConsentRepresentation{}
	return &this
}

// NewUserConsentRepresentationWithDefaults instantiates a new UserConsentRepresentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserConsentRepresentationWithDefaults() *UserConsentRepresentation {
	this := UserConsentRepresentation{}
	return &this
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *UserConsentRepresentation) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserConsentRepresentation) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *UserConsentRepresentation) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *UserConsentRepresentation) SetClientId(v string) {
	o.ClientId = &v
}

// GetGrantedClientScopes returns the GrantedClientScopes field value if set, zero value otherwise.
func (o *UserConsentRepresentation) GetGrantedClientScopes() []string {
	if o == nil || IsNil(o.GrantedClientScopes) {
		var ret []string
		return ret
	}
	return o.GrantedClientScopes
}

// GetGrantedClientScopesOk returns a tuple with the GrantedClientScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserConsentRepresentation) GetGrantedClientScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.GrantedClientScopes) {
		return nil, false
	}
	return o.GrantedClientScopes, true
}

// HasGrantedClientScopes returns a boolean if a field has been set.
func (o *UserConsentRepresentation) HasGrantedClientScopes() bool {
	if o != nil && !IsNil(o.GrantedClientScopes) {
		return true
	}

	return false
}

// SetGrantedClientScopes gets a reference to the given []string and assigns it to the GrantedClientScopes field.
func (o *UserConsentRepresentation) SetGrantedClientScopes(v []string) {
	o.GrantedClientScopes = v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *UserConsentRepresentation) GetCreatedDate() int64 {
	if o == nil || IsNil(o.CreatedDate) {
		var ret int64
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserConsentRepresentation) GetCreatedDateOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *UserConsentRepresentation) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given int64 and assigns it to the CreatedDate field.
func (o *UserConsentRepresentation) SetCreatedDate(v int64) {
	o.CreatedDate = &v
}

// GetLastUpdatedDate returns the LastUpdatedDate field value if set, zero value otherwise.
func (o *UserConsentRepresentation) GetLastUpdatedDate() int64 {
	if o == nil || IsNil(o.LastUpdatedDate) {
		var ret int64
		return ret
	}
	return *o.LastUpdatedDate
}

// GetLastUpdatedDateOk returns a tuple with the LastUpdatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserConsentRepresentation) GetLastUpdatedDateOk() (*int64, bool) {
	if o == nil || IsNil(o.LastUpdatedDate) {
		return nil, false
	}
	return o.LastUpdatedDate, true
}

// HasLastUpdatedDate returns a boolean if a field has been set.
func (o *UserConsentRepresentation) HasLastUpdatedDate() bool {
	if o != nil && !IsNil(o.LastUpdatedDate) {
		return true
	}

	return false
}

// SetLastUpdatedDate gets a reference to the given int64 and assigns it to the LastUpdatedDate field.
func (o *UserConsentRepresentation) SetLastUpdatedDate(v int64) {
	o.LastUpdatedDate = &v
}

// GetGrantedRealmRoles returns the GrantedRealmRoles field value if set, zero value otherwise.
func (o *UserConsentRepresentation) GetGrantedRealmRoles() []string {
	if o == nil || IsNil(o.GrantedRealmRoles) {
		var ret []string
		return ret
	}
	return o.GrantedRealmRoles
}

// GetGrantedRealmRolesOk returns a tuple with the GrantedRealmRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserConsentRepresentation) GetGrantedRealmRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.GrantedRealmRoles) {
		return nil, false
	}
	return o.GrantedRealmRoles, true
}

// HasGrantedRealmRoles returns a boolean if a field has been set.
func (o *UserConsentRepresentation) HasGrantedRealmRoles() bool {
	if o != nil && !IsNil(o.GrantedRealmRoles) {
		return true
	}

	return false
}

// SetGrantedRealmRoles gets a reference to the given []string and assigns it to the GrantedRealmRoles field.
func (o *UserConsentRepresentation) SetGrantedRealmRoles(v []string) {
	o.GrantedRealmRoles = v
}

func (o UserConsentRepresentation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserConsentRepresentation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	if !IsNil(o.GrantedClientScopes) {
		toSerialize["grantedClientScopes"] = o.GrantedClientScopes
	}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.LastUpdatedDate) {
		toSerialize["lastUpdatedDate"] = o.LastUpdatedDate
	}
	if !IsNil(o.GrantedRealmRoles) {
		toSerialize["grantedRealmRoles"] = o.GrantedRealmRoles
	}
	return toSerialize, nil
}

type NullableUserConsentRepresentation struct {
	value *UserConsentRepresentation
	isSet bool
}

func (v NullableUserConsentRepresentation) Get() *UserConsentRepresentation {
	return v.value
}

func (v *NullableUserConsentRepresentation) Set(val *UserConsentRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableUserConsentRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableUserConsentRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserConsentRepresentation(val *UserConsentRepresentation) *NullableUserConsentRepresentation {
	return &NullableUserConsentRepresentation{value: val, isSet: true}
}

func (v NullableUserConsentRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserConsentRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
