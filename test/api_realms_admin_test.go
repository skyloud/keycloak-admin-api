/*
Keycloak Admin REST API

Testing RealmsAdminAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_RealmsAdminAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RealmsAdminAPIService DeleteAdminEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.RealmsAdminAPI.DeleteAdminEvents(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService DeleteByRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.RealmsAdminAPI.DeleteByRealm(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService DeleteDefaultDefaultClientScope", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientScopeId string

		httpRes, err := apiClient.RealmsAdminAPI.DeleteDefaultDefaultClientScope(context.Background(), realm, clientScopeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService DeleteDefaultGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var groupId string

		httpRes, err := apiClient.RealmsAdminAPI.DeleteDefaultGroup(context.Background(), realm, groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService DeleteDefaultOptionalClientScope", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientScopeId string

		httpRes, err := apiClient.RealmsAdminAPI.DeleteDefaultOptionalClientScope(context.Background(), realm, clientScopeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService DeleteEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.RealmsAdminAPI.DeleteEvents(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService DeleteLocalizationByRealmByLocale", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var locale string

		httpRes, err := apiClient.RealmsAdminAPI.DeleteLocalizationByRealmByLocale(context.Background(), realm, locale).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService DeleteLocalizationByRealmByLocaleByKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var locale string
		var key string

		httpRes, err := apiClient.RealmsAdminAPI.DeleteLocalizationByRealmByLocaleByKey(context.Background(), realm, locale, key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService DeleteSession", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var session string

		httpRes, err := apiClient.RealmsAdminAPI.DeleteSession(context.Background(), realm, session).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService Get", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RealmsAdminAPI.Get(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService GetAdminEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RealmsAdminAPI.GetAdminEvents(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService GetByRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RealmsAdminAPI.GetByRealm(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService GetClientSessionStats", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RealmsAdminAPI.GetClientSessionStats(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService GetCredentialRegistrators", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RealmsAdminAPI.GetCredentialRegistrators(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService GetDefaultDefaultClientScopes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RealmsAdminAPI.GetDefaultDefaultClientScopes(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService GetDefaultGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RealmsAdminAPI.GetDefaultGroups(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService GetDefaultOptionalClientScopes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RealmsAdminAPI.GetDefaultOptionalClientScopes(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService GetEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RealmsAdminAPI.GetEvents(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService GetEventsConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RealmsAdminAPI.GetEventsConfig(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService GetGroupByPath", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var path string

		resp, httpRes, err := apiClient.RealmsAdminAPI.GetGroupByPath(context.Background(), realm, path).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService GetLocalizationByRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RealmsAdminAPI.GetLocalizationByRealm(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService GetLocalizationByRealmByLocale", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var locale string

		resp, httpRes, err := apiClient.RealmsAdminAPI.GetLocalizationByRealmByLocale(context.Background(), realm, locale).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService GetLocalizationByRealmByLocaleByKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var locale string
		var key string

		resp, httpRes, err := apiClient.RealmsAdminAPI.GetLocalizationByRealmByLocaleByKey(context.Background(), realm, locale, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService GetPolicies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RealmsAdminAPI.GetPolicies(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService GetProfiles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RealmsAdminAPI.GetProfiles(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService GetUsersManagementPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RealmsAdminAPI.GetUsersManagementPermissions(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService Post", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.RealmsAdminAPI.Post(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService PostClientDescriptionConverter", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RealmsAdminAPI.PostClientDescriptionConverter(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService PostLocalization", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var locale string

		httpRes, err := apiClient.RealmsAdminAPI.PostLocalization(context.Background(), realm, locale).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService PostLogoutAll", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RealmsAdminAPI.PostLogoutAll(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService PostPartialExport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.RealmsAdminAPI.PostPartialExport(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService PostPartialImport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.RealmsAdminAPI.PostPartialImport(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService PostPushRevocationByRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RealmsAdminAPI.PostPushRevocationByRealm(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService PostTestSmtpConnection", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.RealmsAdminAPI.PostTestSmtpConnection(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService PutByRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.RealmsAdminAPI.PutByRealm(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService PutDefaultDefaultClientScope", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientScopeId string

		httpRes, err := apiClient.RealmsAdminAPI.PutDefaultDefaultClientScope(context.Background(), realm, clientScopeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService PutDefaultGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var groupId string

		httpRes, err := apiClient.RealmsAdminAPI.PutDefaultGroup(context.Background(), realm, groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService PutDefaultOptionalClientScope", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientScopeId string

		httpRes, err := apiClient.RealmsAdminAPI.PutDefaultOptionalClientScope(context.Background(), realm, clientScopeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService PutEventsConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.RealmsAdminAPI.PutEventsConfig(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService PutLocalization", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var locale string
		var key string

		httpRes, err := apiClient.RealmsAdminAPI.PutLocalization(context.Background(), realm, locale, key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService PutPolicies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.RealmsAdminAPI.PutPolicies(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService PutProfiles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.RealmsAdminAPI.PutProfiles(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmsAdminAPIService PutUsersManagementPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RealmsAdminAPI.PutUsersManagementPermissions(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
