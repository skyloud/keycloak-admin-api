/*
Keycloak Admin REST API

Testing RolesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_RolesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RolesAPIService DeleteClientRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var roleName string

		httpRes, err := apiClient.RolesAPI.DeleteClientRole(context.Background(), realm, id, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService DeleteClientRoleComposites", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var roleName string

		httpRes, err := apiClient.RolesAPI.DeleteClientRoleComposites(context.Background(), realm, id, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService DeleteRoleByRealmByRoleName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleName string

		httpRes, err := apiClient.RolesAPI.DeleteRoleByRealmByRoleName(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService DeleteRoleCompositesByRealmByRoleName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleName string

		httpRes, err := apiClient.RolesAPI.DeleteRoleCompositesByRealmByRoleName(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetClientRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.GetClientRole(context.Background(), realm, id, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetClientRoleComposites", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.GetClientRoleComposites(context.Background(), realm, id, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetClientRoleCompositesClient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var roleName string
		var clientUuid string

		resp, httpRes, err := apiClient.RolesAPI.GetClientRoleCompositesClient(context.Background(), realm, id, roleName, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetClientRoleCompositesRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.GetClientRoleCompositesRealm(context.Background(), realm, id, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetClientRoleGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.GetClientRoleGroups(context.Background(), realm, id, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetClientRoleManagementPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.GetClientRoleManagementPermissions(context.Background(), realm, id, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetClientRoleUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.GetClientRoleUsers(context.Background(), realm, id, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetClientRoles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.RolesAPI.GetClientRoles(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetRoleByRealmByRoleName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.GetRoleByRealmByRoleName(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetRoleCompositesByRealmByRoleName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.GetRoleCompositesByRealmByRoleName(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetRoleCompositesClientByRealmByRoleNameByClientUuid", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleName string
		var clientUuid string

		resp, httpRes, err := apiClient.RolesAPI.GetRoleCompositesClientByRealmByRoleNameByClientUuid(context.Background(), realm, roleName, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetRoleCompositesRealmByRealmByRoleName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.GetRoleCompositesRealmByRealmByRoleName(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetRoleGroupsByRealmByRoleName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.GetRoleGroupsByRealmByRoleName(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetRoleManagementPermissionsByRealmByRoleName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.GetRoleManagementPermissionsByRealmByRoleName(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetRoleUsersByRealmByRoleName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.GetRoleUsersByRealmByRoleName(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetRolesByRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RolesAPI.GetRolesByRealm(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService PostClientRoleComposites", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var roleName string

		httpRes, err := apiClient.RolesAPI.PostClientRoleComposites(context.Background(), realm, id, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService PostClientRoles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.RolesAPI.PostClientRoles(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService PostRoleCompositesByRealmByRoleName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleName string

		httpRes, err := apiClient.RolesAPI.PostRoleCompositesByRealmByRoleName(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService PostRolesByRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.RolesAPI.PostRolesByRealm(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService PutClientRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var roleName string

		httpRes, err := apiClient.RolesAPI.PutClientRole(context.Background(), realm, id, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService PutClientRoleManagementPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.PutClientRoleManagementPermissions(context.Background(), realm, id, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService PutRoleByRealmByRoleName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleName string

		httpRes, err := apiClient.RolesAPI.PutRoleByRealmByRoleName(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService PutRoleManagementPermissionsByRealmByRoleName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.PutRoleManagementPermissionsByRealmByRoleName(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
