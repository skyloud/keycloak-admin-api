/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserSessionRepresentation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSessionRepresentation{}

// UserSessionRepresentation struct for UserSessionRepresentation
type UserSessionRepresentation struct {
	Id         *string            `json:"id,omitempty"`
	Username   *string            `json:"username,omitempty"`
	UserId     *string            `json:"userId,omitempty"`
	IpAddress  *string            `json:"ipAddress,omitempty"`
	Start      *int64             `json:"start,omitempty"`
	LastAccess *int64             `json:"lastAccess,omitempty"`
	RememberMe *bool              `json:"rememberMe,omitempty"`
	Clients    *map[string]string `json:"clients,omitempty"`
}

// NewUserSessionRepresentation instantiates a new UserSessionRepresentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSessionRepresentation() *UserSessionRepresentation {
	this := UserSessionRepresentation{}
	return &this
}

// NewUserSessionRepresentationWithDefaults instantiates a new UserSessionRepresentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSessionRepresentationWithDefaults() *UserSessionRepresentation {
	this := UserSessionRepresentation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserSessionRepresentation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionRepresentation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserSessionRepresentation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserSessionRepresentation) SetId(v string) {
	o.Id = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserSessionRepresentation) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionRepresentation) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserSessionRepresentation) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserSessionRepresentation) SetUsername(v string) {
	o.Username = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UserSessionRepresentation) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionRepresentation) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UserSessionRepresentation) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *UserSessionRepresentation) SetUserId(v string) {
	o.UserId = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *UserSessionRepresentation) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionRepresentation) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *UserSessionRepresentation) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *UserSessionRepresentation) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *UserSessionRepresentation) GetStart() int64 {
	if o == nil || IsNil(o.Start) {
		var ret int64
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionRepresentation) GetStartOk() (*int64, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *UserSessionRepresentation) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given int64 and assigns it to the Start field.
func (o *UserSessionRepresentation) SetStart(v int64) {
	o.Start = &v
}

// GetLastAccess returns the LastAccess field value if set, zero value otherwise.
func (o *UserSessionRepresentation) GetLastAccess() int64 {
	if o == nil || IsNil(o.LastAccess) {
		var ret int64
		return ret
	}
	return *o.LastAccess
}

// GetLastAccessOk returns a tuple with the LastAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionRepresentation) GetLastAccessOk() (*int64, bool) {
	if o == nil || IsNil(o.LastAccess) {
		return nil, false
	}
	return o.LastAccess, true
}

// HasLastAccess returns a boolean if a field has been set.
func (o *UserSessionRepresentation) HasLastAccess() bool {
	if o != nil && !IsNil(o.LastAccess) {
		return true
	}

	return false
}

// SetLastAccess gets a reference to the given int64 and assigns it to the LastAccess field.
func (o *UserSessionRepresentation) SetLastAccess(v int64) {
	o.LastAccess = &v
}

// GetRememberMe returns the RememberMe field value if set, zero value otherwise.
func (o *UserSessionRepresentation) GetRememberMe() bool {
	if o == nil || IsNil(o.RememberMe) {
		var ret bool
		return ret
	}
	return *o.RememberMe
}

// GetRememberMeOk returns a tuple with the RememberMe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionRepresentation) GetRememberMeOk() (*bool, bool) {
	if o == nil || IsNil(o.RememberMe) {
		return nil, false
	}
	return o.RememberMe, true
}

// HasRememberMe returns a boolean if a field has been set.
func (o *UserSessionRepresentation) HasRememberMe() bool {
	if o != nil && !IsNil(o.RememberMe) {
		return true
	}

	return false
}

// SetRememberMe gets a reference to the given bool and assigns it to the RememberMe field.
func (o *UserSessionRepresentation) SetRememberMe(v bool) {
	o.RememberMe = &v
}

// GetClients returns the Clients field value if set, zero value otherwise.
func (o *UserSessionRepresentation) GetClients() map[string]string {
	if o == nil || IsNil(o.Clients) {
		var ret map[string]string
		return ret
	}
	return *o.Clients
}

// GetClientsOk returns a tuple with the Clients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionRepresentation) GetClientsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Clients) {
		return nil, false
	}
	return o.Clients, true
}

// HasClients returns a boolean if a field has been set.
func (o *UserSessionRepresentation) HasClients() bool {
	if o != nil && !IsNil(o.Clients) {
		return true
	}

	return false
}

// SetClients gets a reference to the given map[string]string and assigns it to the Clients field.
func (o *UserSessionRepresentation) SetClients(v map[string]string) {
	o.Clients = &v
}

func (o UserSessionRepresentation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSessionRepresentation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.LastAccess) {
		toSerialize["lastAccess"] = o.LastAccess
	}
	if !IsNil(o.RememberMe) {
		toSerialize["rememberMe"] = o.RememberMe
	}
	if !IsNil(o.Clients) {
		toSerialize["clients"] = o.Clients
	}
	return toSerialize, nil
}

type NullableUserSessionRepresentation struct {
	value *UserSessionRepresentation
	isSet bool
}

func (v NullableUserSessionRepresentation) Get() *UserSessionRepresentation {
	return v.value
}

func (v *NullableUserSessionRepresentation) Set(val *UserSessionRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSessionRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSessionRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSessionRepresentation(val *UserSessionRepresentation) *NullableUserSessionRepresentation {
	return &NullableUserSessionRepresentation{value: val, isSet: true}
}

func (v NullableUserSessionRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSessionRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
