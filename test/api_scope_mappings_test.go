/*
Keycloak Admin REST API

Testing ScopeMappingsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_ScopeMappingsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ScopeMappingsAPIService DeleteClientScopeMappingsClient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		httpRes, err := apiClient.ScopeMappingsAPI.DeleteClientScopeMappingsClient(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService DeleteClientScopeMappingsRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.ScopeMappingsAPI.DeleteClientScopeMappingsRealm(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService DeleteClientScopeScopeMappingsClient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		httpRes, err := apiClient.ScopeMappingsAPI.DeleteClientScopeScopeMappingsClient(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService DeleteClientScopeScopeMappingsRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.ScopeMappingsAPI.DeleteClientScopeScopeMappingsRealm(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService DeleteClientTemplateScopeMappingsClient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		httpRes, err := apiClient.ScopeMappingsAPI.DeleteClientTemplateScopeMappingsClient(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService DeleteClientTemplateScopeMappingsRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.ScopeMappingsAPI.DeleteClientTemplateScopeMappingsRealm(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientScopeMappings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientScopeMappings(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientScopeMappingsClient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientScopeMappingsClient(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientScopeMappingsClientAvailable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientScopeMappingsClientAvailable(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientScopeMappingsClientComposite", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientScopeMappingsClientComposite(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientScopeMappingsRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientScopeMappingsRealm(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientScopeMappingsRealmAvailable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientScopeMappingsRealmAvailable(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientScopeMappingsRealmComposite", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientScopeMappingsRealmComposite(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientScopeScopeMappings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientScopeScopeMappings(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientScopeScopeMappingsClient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientScopeScopeMappingsClient(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientScopeScopeMappingsClientAvailable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientScopeScopeMappingsClientAvailable(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientScopeScopeMappingsClientComposite", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientScopeScopeMappingsClientComposite(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientScopeScopeMappingsRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientScopeScopeMappingsRealm(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientScopeScopeMappingsRealmAvailable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientScopeScopeMappingsRealmAvailable(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientScopeScopeMappingsRealmComposite", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientScopeScopeMappingsRealmComposite(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientTemplateScopeMappings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientTemplateScopeMappings(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientTemplateScopeMappingsClient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientTemplateScopeMappingsClient(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientTemplateScopeMappingsClientAvailable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientTemplateScopeMappingsClientAvailable(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientTemplateScopeMappingsClientComposite", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientTemplateScopeMappingsClientComposite(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientTemplateScopeMappingsRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientTemplateScopeMappingsRealm(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientTemplateScopeMappingsRealmAvailable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientTemplateScopeMappingsRealmAvailable(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService GetClientTemplateScopeMappingsRealmComposite", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.ScopeMappingsAPI.GetClientTemplateScopeMappingsRealmComposite(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService PostClientScopeMappingsClient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		httpRes, err := apiClient.ScopeMappingsAPI.PostClientScopeMappingsClient(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService PostClientScopeMappingsRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.ScopeMappingsAPI.PostClientScopeMappingsRealm(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService PostClientScopeScopeMappingsClient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		httpRes, err := apiClient.ScopeMappingsAPI.PostClientScopeScopeMappingsClient(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService PostClientScopeScopeMappingsRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.ScopeMappingsAPI.PostClientScopeScopeMappingsRealm(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService PostClientTemplateScopeMappingsClient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var client string

		httpRes, err := apiClient.ScopeMappingsAPI.PostClientTemplateScopeMappingsClient(context.Background(), realm, id, client).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScopeMappingsAPIService PostClientTemplateScopeMappingsRealm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.ScopeMappingsAPI.PostClientTemplateScopeMappingsRealm(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
