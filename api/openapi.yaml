openapi: 3.0.2
info:
  contact:
    url: https://www.keycloak.org/documentation
  description: This is a REST API reference for the Keycloak Admin REST API.
  title: Keycloak Admin REST API
  version: "1.0"
servers:
- url: https://keycloak.example.com/admin/realms
security:
- access_token: []
tags:
- name: Attack Detection
- name: Authentication Management
- name: Client Attribute Certificate
- name: Client Initial Access
- name: Client Registration Policy
- name: Client Role Mappings
- name: Client Scopes
- name: Clients
- name: Component
- name: Groups
- name: Identity Providers
- name: Key
- name: Protocol Mappers
- name: Realms Admin
- name: Role Mapper
- name: Roles
- name: Roles (by ID)
- name: Scope Mappings
- name: Users
paths:
  /:
    get:
      description: Get accessible realms Returns a list of accessible realms. The
        list is filtered based on what realms the caller is allowed to view.
      operationId: get
      parameters:
      - explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RealmRepresentation'
                type: array
          description: OK
      tags:
      - Realms Admin
    post:
      description: Import a realm. Imports a realm from a full representation of that
        realm.
      operationId: post
      requestBody:
        content:
          application/json:
            schema:
              format: binary
              type: string
        description: "[file]"
      responses:
        "200":
          description: OK
      tags:
      - Realms Admin
  /{realm}:
    delete:
      description: Delete the realm
      operationId: deleteByRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Realms Admin
    get:
      description: Get the top-level representation of the realm It will not include
        nested information like User and Client representations.
      operationId: getByRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RealmRepresentation'
          description: OK
      tags:
      - Realms Admin
    put:
      description: "Update the top-level information of the realm Any user, roles\
        \ or client information in the representation will be ignored."
      operationId: putByRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RealmRepresentation'
        description: RealmRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Realms Admin
  /{realm}/admin-events:
    delete:
      description: Delete all admin events
      operationId: deleteAdminEvents
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Realms Admin
    get:
      description: "Get admin events Returns all admin events, or filters events based\
        \ on URL query parameters listed here"
      operationId: getAdminEvents
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: authClient
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: authIpAddress
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: authRealm
        required: false
        schema:
          type: string
        style: form
      - description: user id
        explode: true
        in: query
        name: authUser
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: dateFrom
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: dateTo
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: first
        required: false
        schema:
          type: string
        style: form
      - description: Maximum results size (defaults to 100)
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: "[String]"
        explode: true
        in: query
        name: operationTypes
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: resourcePath
        required: false
        schema:
          type: string
        style: form
      - description: "[String]"
        explode: true
        in: query
        name: resourceTypes
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AdminEventRepresentation'
                type: array
          description: OK
      tags:
      - Realms Admin
  /{realm}/attack-detection/brute-force/users:
    delete:
      description: Clear any user login failures for all users This can release temporary
        disabled users
      operationId: deleteUsers
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Attack Detection
  /{realm}/attack-detection/brute-force/users/{userId}:
    delete:
      description: Clear any user login failures for the user This can release temporary
        disabled user
      operationId: deleteBruteForceUser
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Attack Detection
    get:
      description: Get status of a username in brute force detection
      operationId: getBruteForceUser
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: object
                type: object
          description: OK
      tags:
      - Attack Detection
  /{realm}/authentication/authenticator-providers:
    get:
      description: Get authenticator providers Returns a stream of authenticator providers.
      operationId: getAuthenticatorProviders
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: object
                type: array
          description: OK
      tags:
      - Authentication Management
  /{realm}/authentication/client-authenticator-providers:
    get:
      description: Get client authenticator providers Returns a stream of client authenticator
        providers.
      operationId: getClientAuthenticatorProviders
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: object
                type: array
          description: OK
      tags:
      - Authentication Management
  /{realm}/authentication/config:
    post:
      description: Create new authenticator configuration
      operationId: postAuthenticationConfig
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticatorConfigRepresentation'
        description: AuthenticatorConfigRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Authentication Management
  /{realm}/authentication/config-description/{providerId}:
    get:
      description: Get authenticator provider’s configuration description
      operationId: getConfigDescription
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: providerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatorConfigInfoRepresentation'
          description: OK
      tags:
      - Authentication Management
  /{realm}/authentication/config/{id}:
    delete:
      description: Delete authenticator configuration
      operationId: deleteConfig
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: Configuration id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Authentication Management
    get:
      description: Get authenticator configuration
      operationId: getAuthenticationConfig
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: Configuration id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatorConfigRepresentation'
          description: OK
      tags:
      - Authentication Management
    put:
      description: Update authenticator configuration
      operationId: putAuthenticationConfig
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: Configuration id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticatorConfigRepresentation'
        description: AuthenticatorConfigRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Authentication Management
  /{realm}/authentication/executions:
    post:
      description: Add new authentication execution
      operationId: postExecutions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationExecutionRepresentation'
        description: AuthenticationExecutionRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Authentication Management
  /{realm}/authentication/executions/{executionId}:
    delete:
      description: Delete execution
      operationId: deleteExecution
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: executionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Authentication Management
    get:
      description: Get Single Execution
      operationId: getExecution
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: executionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - Authentication Management
  /{realm}/authentication/executions/{executionId}/config:
    post:
      description: Update execution with new configuration
      operationId: postExecutionConfig
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: Execution id
        explode: false
        in: path
        name: executionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticatorConfigRepresentation'
        description: AuthenticatorConfigRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Authentication Management
  /{realm}/authentication/executions/{executionId}/config/{id}:
    get:
      description: Get execution’s configuration
      operationId: getExecutionConfig
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: Execution id
        explode: false
        in: path
        name: executionId
        required: true
        schema:
          type: string
        style: simple
      - description: Configuration id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatorConfigRepresentation'
          description: OK
      tags:
      - Authentication Management
  /{realm}/authentication/executions/{executionId}/lower-priority:
    post:
      description: Lower execution’s priority
      operationId: postExecutionLowerPriority
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: Execution id
        explode: false
        in: path
        name: executionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          description: Created
      tags:
      - Authentication Management
  /{realm}/authentication/executions/{executionId}/raise-priority:
    post:
      description: Raise execution’s priority
      operationId: postExecutionRaisePriority
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: Execution id
        explode: false
        in: path
        name: executionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          description: Created
      tags:
      - Authentication Management
  /{realm}/authentication/flows:
    get:
      description: Get authentication flows Returns a stream of authentication flows.
      operationId: getFlows
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AuthenticationFlowRepresentation'
                type: array
          description: OK
      tags:
      - Authentication Management
    post:
      description: Create a new authentication flow
      operationId: postFlows
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationFlowRepresentation'
        description: AuthenticationFlowRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Authentication Management
  /{realm}/authentication/flows/{flowAlias}/copy:
    post:
      description: Copy existing authentication flow under a new name The new name
        is given as 'newName' attribute of the passed JSON object
      operationId: postCopy
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: name of the existing authentication flow
        explode: false
        in: path
        name: flowAlias
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: "[string]"
      responses:
        "200":
          description: OK
      tags:
      - Authentication Management
  /{realm}/authentication/flows/{flowAlias}/executions:
    get:
      description: Get authentication executions for a flow
      operationId: getExecutions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: Flow alias
        explode: false
        in: path
        name: flowAlias
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - Authentication Management
    put:
      description: Update authentication executions of a Flow
      operationId: putExecutions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: Flow alias
        explode: false
        in: path
        name: flowAlias
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationExecutionInfoRepresentation'
        description: AuthenticationExecutionInfoRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Authentication Management
  /{realm}/authentication/flows/{flowAlias}/executions/execution:
    post:
      description: Add new authentication execution to a flow
      operationId: postExecution
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: Alias of parent flow
        explode: false
        in: path
        name: flowAlias
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: "[string]"
      responses:
        "200":
          description: OK
      tags:
      - Authentication Management
  /{realm}/authentication/flows/{flowAlias}/executions/flow:
    post:
      description: Add new flow with new execution to existing flow
      operationId: postFlow
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: Alias of parent authentication flow
        explode: false
        in: path
        name: flowAlias
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: "[string]"
      responses:
        "200":
          description: OK
      tags:
      - Authentication Management
  /{realm}/authentication/flows/{id}:
    delete:
      description: Delete an authentication flow
      operationId: deleteFlow
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Authentication Management
    get:
      description: Get authentication flow for id
      operationId: getFlow
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationFlowRepresentation'
          description: OK
      tags:
      - Authentication Management
    put:
      description: Update an authentication flow
      operationId: putFlow
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationFlowRepresentation'
        description: AuthenticationFlowRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Authentication Management
  /{realm}/authentication/form-action-providers:
    get:
      description: Get form action providers Returns a stream of form action providers.
      operationId: getFormActionProviders
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: object
                type: array
          description: OK
      tags:
      - Authentication Management
  /{realm}/authentication/form-providers:
    get:
      description: Get form providers Returns a stream of form providers.
      operationId: getFormProviders
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: object
                type: array
          description: OK
      tags:
      - Authentication Management
  /{realm}/authentication/per-client-config-description:
    get:
      description: Get configuration descriptions for all clients
      operationId: getPerClientConfigDescription
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/ConfigPropertyRepresentation'
                type: object
          description: OK
      tags:
      - Authentication Management
  /{realm}/authentication/register-required-action:
    post:
      description: Register a new required actions
      operationId: postRegisterRequiredAction
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: "[string]"
      responses:
        "201":
          description: Created
      tags:
      - Authentication Management
  /{realm}/authentication/required-actions:
    get:
      description: Get required actions Returns a stream of required actions.
      operationId: getRequiredActions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RequiredActionProviderRepresentation'
                type: array
          description: OK
      tags:
      - Authentication Management
  /{realm}/authentication/required-actions/{alias}:
    delete:
      description: Delete required action
      operationId: deleteRequiredAction
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: Alias of required action
        explode: false
        in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Authentication Management
    get:
      description: Get required action for alias
      operationId: getRequiredAction
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: Alias of required action
        explode: false
        in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequiredActionProviderRepresentation'
          description: OK
      tags:
      - Authentication Management
    put:
      description: Update required action
      operationId: putRequiredAction
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: Alias of required action
        explode: false
        in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequiredActionProviderRepresentation'
        description: RequiredActionProviderRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Authentication Management
  /{realm}/authentication/required-actions/{alias}/lower-priority:
    post:
      description: Lower required action’s priority
      operationId: postRequiredActionLowerPriority
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: Alias of required action
        explode: false
        in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          description: Created
      tags:
      - Authentication Management
  /{realm}/authentication/required-actions/{alias}/raise-priority:
    post:
      description: Raise required action’s priority
      operationId: postRequiredActionRaisePriority
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: Alias of required action
        explode: false
        in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          description: Created
      tags:
      - Authentication Management
  /{realm}/authentication/unregistered-required-actions:
    get:
      description: Get unregistered required actions Returns a stream of unregistered
        required actions.
      operationId: getUnregisteredRequiredActions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      tags:
      - Authentication Management
  /{realm}/client-description-converter:
    post:
      description: Base path for importing clients under this realm.
      operationId: postClientDescriptionConverter
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: "[string]"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRepresentation'
          description: OK
      tags:
      - Realms Admin
  /{realm}/client-policies/policies:
    get:
      operationId: getPolicies
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientPoliciesRepresentation'
          description: OK
      tags:
      - Realms Admin
    put:
      operationId: putPolicies
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientPoliciesRepresentation'
        description: ClientPoliciesRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Realms Admin
  /{realm}/client-policies/profiles:
    get:
      operationId: getProfiles
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: include-global-profiles
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientProfilesRepresentation'
          description: OK
      tags:
      - Realms Admin
    put:
      operationId: putProfiles
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientProfilesRepresentation'
        description: ClientProfilesRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Realms Admin
  /{realm}/client-registration-policy/providers:
    get:
      description: Base path for retrieve providers with the configProperties properly
        filled
      operationId: getProviders
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ComponentTypeRepresentation'
                type: array
          description: OK
      tags:
      - Client Registration Policy
  /{realm}/client-scopes:
    get:
      description: Get client scopes belonging to the realm Returns a list of client
        scopes belonging to the realm
      operationId: getClientScopes
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClientScopeRepresentation'
                type: array
          description: OK
      tags:
      - Client Scopes
    post:
      description: Create a new client scope Client Scope’s name must be unique!
      operationId: postClientScopes
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientScopeRepresentation'
        description: ClientScopeRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Client Scopes
  /{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}:
    delete:
      description: Delete the mapper
      operationId: deleteClientScopeProtocolMappersModel
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id1
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id2
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Protocol Mappers
    get:
      description: Get mapper by id
      operationId: getClientScopeProtocolMappersModel
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id1
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id2
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProtocolMapperRepresentation'
          description: OK
      tags:
      - Protocol Mappers
    put:
      description: Update the mapper
      operationId: putClientScopeProtocolMappersModel
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id1
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id2
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
        description: ProtocolMapperRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Protocol Mappers
  /{realm}/client-scopes/{id}:
    delete:
      description: Delete the client scope
      operationId: deleteClientScope
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - Client Scopes
    get:
      description: Get representation of the client scope
      operationId: getClientScope
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientScopeRepresentation'
          description: OK
      tags:
      - Client Scopes
    put:
      description: Update the client scope
      operationId: putClientScope
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientScopeRepresentation'
        description: ClientScopeRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Client Scopes
  /{realm}/client-scopes/{id}/protocol-mappers/add-models:
    post:
      description: Create multiple mappers
      operationId: postClientScopeProtocolMappersAddModels
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
        description: ProtocolMapperRepresentation
      responses:
        "201":
          description: Created
      tags:
      - Protocol Mappers
  /{realm}/client-scopes/{id}/protocol-mappers/models:
    get:
      description: Get mappers
      operationId: getClientScopeProtocolMappersModels
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProtocolMapperRepresentation'
                type: array
          description: OK
      tags:
      - Protocol Mappers
    post:
      description: Create a mapper
      operationId: postClientScopeProtocolMappersModels
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
        description: ProtocolMapperRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Protocol Mappers
  /{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}:
    get:
      description: Get mappers by name for a specific protocol
      operationId: getClientScopeProtocolMappersProtocol
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: protocol
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProtocolMapperRepresentation'
                type: array
          description: OK
      tags:
      - Protocol Mappers
  /{realm}/client-scopes/{id}/scope-mappings:
    get:
      description: Get all scope mappings for the client
      operationId: getClientScopeScopeMappings
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingsRepresentation'
          description: OK
      tags:
      - Scope Mappings
  /{realm}/client-scopes/{id}/scope-mappings/clients/{client}:
    delete:
      description: Remove client-level roles from the client’s scope.
      operationId: deleteClientScopeScopeMappingsClient
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Scope Mappings
    get:
      description: Get the roles associated with a client’s scope Returns roles for
        the client.
      operationId: getClientScopeScopeMappingsClient
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Scope Mappings
    post:
      description: Add client-level roles to the client’s scope
      operationId: postClientScopeScopeMappingsClient
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "201":
          description: Created
      tags:
      - Scope Mappings
  /{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available:
    get:
      description: The available client-level roles Returns the roles for the client
        that can be associated with the client’s scope
      operationId: getClientScopeScopeMappingsClientAvailable
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Scope Mappings
  /{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite:
    get:
      description: Get effective client roles Returns the roles for the client that
        are associated with the client’s scope.
      operationId: getClientScopeScopeMappingsClientComposite
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      - description: "if false, return roles with their attributes"
        explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Scope Mappings
  /{realm}/client-scopes/{id}/scope-mappings/realm:
    delete:
      description: Remove a set of realm-level roles from the client’s scope
      operationId: deleteClientScopeScopeMappingsRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Scope Mappings
    get:
      description: Get realm-level roles associated with the client’s scope
      operationId: getClientScopeScopeMappingsRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Scope Mappings
    post:
      description: Add a set of realm-level roles to the client’s scope
      operationId: postClientScopeScopeMappingsRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "201":
          description: Created
      tags:
      - Scope Mappings
  /{realm}/client-scopes/{id}/scope-mappings/realm/available:
    get:
      description: Get realm-level roles that are available to attach to this client’s
        scope
      operationId: getClientScopeScopeMappingsRealmAvailable
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Scope Mappings
  /{realm}/client-scopes/{id}/scope-mappings/realm/composite:
    get:
      description: Get effective realm-level roles associated with the client’s scope
        What this does is recurse any composite roles associated with the client’s
        scope and adds the roles to this lists.
      operationId: getClientScopeScopeMappingsRealmComposite
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: "if false, return roles with their attributes"
        explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Scope Mappings
  /{realm}/client-session-stats:
    get:
      description: Get client session stats Returns a JSON map.
      operationId: getClientSessionStats
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      tags:
      - Realms Admin
  /{realm}/client-templates:
    get:
      description: Get client scopes belonging to the realm Returns a list of client
        scopes belonging to the realm
      operationId: getClientTemplates
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClientScopeRepresentation'
                type: array
          description: OK
      tags:
      - Client Scopes
    post:
      description: Create a new client scope Client Scope’s name must be unique!
      operationId: postClientTemplates
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientScopeRepresentation'
        description: ClientScopeRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Client Scopes
  /{realm}/client-templates/{id1}/protocol-mappers/models/{id2}:
    delete:
      description: Delete the mapper
      operationId: deleteClientTemplateProtocolMappersModel
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id1
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id2
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Protocol Mappers
    get:
      description: Get mapper by id
      operationId: getClientTemplateProtocolMappersModel
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id1
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id2
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProtocolMapperRepresentation'
          description: OK
      tags:
      - Protocol Mappers
    put:
      description: Update the mapper
      operationId: putClientTemplateProtocolMappersModel
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id1
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id2
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
        description: ProtocolMapperRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Protocol Mappers
  /{realm}/client-templates/{id}:
    delete:
      description: Delete the client scope
      operationId: deleteClientTemplate
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - Client Scopes
    get:
      description: Get representation of the client scope
      operationId: getClientTemplate
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientScopeRepresentation'
          description: OK
      tags:
      - Client Scopes
    put:
      description: Update the client scope
      operationId: putClientTemplate
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientScopeRepresentation'
        description: ClientScopeRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Client Scopes
  /{realm}/client-templates/{id}/protocol-mappers/add-models:
    post:
      description: Create multiple mappers
      operationId: postClientTemplateProtocolMappersAddModels
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
        description: ProtocolMapperRepresentation
      responses:
        "201":
          description: Created
      tags:
      - Protocol Mappers
  /{realm}/client-templates/{id}/protocol-mappers/models:
    get:
      description: Get mappers
      operationId: getClientTemplateProtocolMappersModels
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProtocolMapperRepresentation'
                type: array
          description: OK
      tags:
      - Protocol Mappers
    post:
      description: Create a mapper
      operationId: postClientTemplateProtocolMappersModels
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
        description: ProtocolMapperRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Protocol Mappers
  /{realm}/client-templates/{id}/protocol-mappers/protocol/{protocol}:
    get:
      description: Get mappers by name for a specific protocol
      operationId: getClientTemplateProtocolMappersProtocol
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: protocol
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProtocolMapperRepresentation'
                type: array
          description: OK
      tags:
      - Protocol Mappers
  /{realm}/client-templates/{id}/scope-mappings:
    get:
      description: Get all scope mappings for the client
      operationId: getClientTemplateScopeMappings
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingsRepresentation'
          description: OK
      tags:
      - Scope Mappings
  /{realm}/client-templates/{id}/scope-mappings/clients/{client}:
    delete:
      description: Remove client-level roles from the client’s scope.
      operationId: deleteClientTemplateScopeMappingsClient
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Scope Mappings
    get:
      description: Get the roles associated with a client’s scope Returns roles for
        the client.
      operationId: getClientTemplateScopeMappingsClient
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Scope Mappings
    post:
      description: Add client-level roles to the client’s scope
      operationId: postClientTemplateScopeMappingsClient
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "201":
          description: Created
      tags:
      - Scope Mappings
  /{realm}/client-templates/{id}/scope-mappings/clients/{client}/available:
    get:
      description: The available client-level roles Returns the roles for the client
        that can be associated with the client’s scope
      operationId: getClientTemplateScopeMappingsClientAvailable
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Scope Mappings
  /{realm}/client-templates/{id}/scope-mappings/clients/{client}/composite:
    get:
      description: Get effective client roles Returns the roles for the client that
        are associated with the client’s scope.
      operationId: getClientTemplateScopeMappingsClientComposite
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      - description: "if false, return roles with their attributes"
        explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Scope Mappings
  /{realm}/client-templates/{id}/scope-mappings/realm:
    delete:
      description: Remove a set of realm-level roles from the client’s scope
      operationId: deleteClientTemplateScopeMappingsRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Scope Mappings
    get:
      description: Get realm-level roles associated with the client’s scope
      operationId: getClientTemplateScopeMappingsRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Scope Mappings
    post:
      description: Add a set of realm-level roles to the client’s scope
      operationId: postClientTemplateScopeMappingsRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "201":
          description: Created
      tags:
      - Scope Mappings
  /{realm}/client-templates/{id}/scope-mappings/realm/available:
    get:
      description: Get realm-level roles that are available to attach to this client’s
        scope
      operationId: getClientTemplateScopeMappingsRealmAvailable
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Scope Mappings
  /{realm}/client-templates/{id}/scope-mappings/realm/composite:
    get:
      description: Get effective realm-level roles associated with the client’s scope
        What this does is recurse any composite roles associated with the client’s
        scope and adds the roles to this lists.
      operationId: getClientTemplateScopeMappingsRealmComposite
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: "if false, return roles with their attributes"
        explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Scope Mappings
  /{realm}/clients:
    get:
      description: Get clients belonging to the realm.
      operationId: getClients
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: filter by clientId
        explode: true
        in: query
        name: clientId
        required: false
        schema:
          type: string
        style: form
      - description: the first result
        explode: true
        in: query
        name: first
        required: false
        schema:
          type: string
        style: form
      - description: the max results to return
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: whether this is a search query or a getClientById query
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: filter clients that cannot be viewed in full by admin
        explode: true
        in: query
        name: viewableOnly
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClientRepresentation'
                type: array
          description: OK
      tags:
      - Clients
    post:
      description: Create a new client Client’s client_id must be unique!
      operationId: postClients
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRepresentation'
        description: ClientRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Clients
  /{realm}/clients-initial-access:
    get:
      operationId: getClientsInitialAccess
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClientInitialAccessPresentation'
                type: array
          description: OK
      tags:
      - Client Initial Access
    post:
      description: Create a new initial access token.
      operationId: postClientsInitialAccess
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientInitialAccessCreatePresentation'
        description: ClientInitialAccessCreatePresentation
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientInitialAccessPresentation'
          description: OK
      tags:
      - Client Initial Access
  /{realm}/clients-initial-access/{id}:
    delete:
      operationId: deleteClientsInitialAcces
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Client Initial Access
  /{realm}/clients/{id1}/protocol-mappers/models/{id2}:
    delete:
      description: Delete the mapper
      operationId: deleteClientProtocolMappersModel
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id1
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id2
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Protocol Mappers
    get:
      description: Get mapper by id
      operationId: getClientProtocolMappersModel
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id1
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id2
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProtocolMapperRepresentation'
          description: OK
      tags:
      - Protocol Mappers
    put:
      description: Update the mapper
      operationId: putClientProtocolMappersModel
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id1
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id2
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
        description: ProtocolMapperRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Protocol Mappers
  /{realm}/clients/{id}:
    delete:
      description: Delete the client
      operationId: deleteClientByRealmById
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Clients
    get:
      description: Get representation of the client
      operationId: getClientByRealmById
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRepresentation'
          description: OK
      tags:
      - Clients
    put:
      description: Update the client
      operationId: putClient
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRepresentation'
        description: ClientRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/certificates/{attr}:
    get:
      description: Get key info
      operationId: getCertificate
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: attr
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateRepresentation'
          description: OK
      tags:
      - Client Attribute Certificate
  /{realm}/clients/{id}/certificates/{attr}/download:
    post:
      description: "Get a keystore file for the client, containing private key and\
        \ public certificate"
      operationId: postDownload
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: attr
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyStoreConfig'
        description: KeyStoreConfig
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: OK
      tags:
      - Client Attribute Certificate
  /{realm}/clients/{id}/certificates/{attr}/generate:
    post:
      description: Generate a new certificate with new key pair
      operationId: postGenerate
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: attr
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateRepresentation'
          description: OK
      tags:
      - Client Attribute Certificate
  /{realm}/clients/{id}/certificates/{attr}/generate-and-download:
    post:
      description: "Generate a new keypair and certificate, and get the private key\
        \ file  Generates a keypair and certificate and serves the private key in\
        \ a specified keystore format. Only generated public certificate is saved\
        \ in Keycloak DB - the private key is not."
      operationId: postGenerateAndDownload
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: attr
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyStoreConfig'
        description: KeyStoreConfig
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: OK
      tags:
      - Client Attribute Certificate
  /{realm}/clients/{id}/certificates/{attr}/upload:
    post:
      description: Upload certificate and eventually private key
      operationId: postUpload
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: attr
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateRepresentation'
          description: OK
      tags:
      - Client Attribute Certificate
  /{realm}/clients/{id}/certificates/{attr}/upload-certificate:
    post:
      description: "Upload only certificate, not private key"
      operationId: postUploadCertificate
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: attr
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateRepresentation'
          description: OK
      tags:
      - Client Attribute Certificate
  /{realm}/clients/{id}/client-secret:
    get:
      description: Get the client secret
      operationId: getClientSecret
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialRepresentation'
          description: OK
      tags:
      - Clients
    post:
      description: Generate a new secret for the client
      operationId: postClientSecret
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialRepresentation'
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/client-secret/rotated:
    delete:
      description: Invalidate the rotated secret for the client
      operationId: deleteRotated
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - Clients
    get:
      description: Get the rotated client secret
      operationId: getRotated
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialRepresentation'
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/default-client-scopes:
    get:
      description: Get default client scopes.  Only name and ids are returned.
      operationId: getDefaultClientScopes
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClientScopeRepresentation'
                type: array
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/default-client-scopes/{clientScopeId}:
    delete:
      operationId: deleteDefaultClientScope
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientScopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Clients
    put:
      operationId: putDefaultClientScope
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientScopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Clients
  /{realm}/clients/{id}/evaluate-scopes/generate-example-access-token:
    get:
      description: Create JSON with payload of example access token
      operationId: getGenerateExampleAccessToken
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: scope
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/evaluate-scopes/generate-example-id-token:
    get:
      description: Create JSON with payload of example id token
      operationId: getGenerateExampleIdToken
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: scope
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDToken'
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/evaluate-scopes/generate-example-userinfo:
    get:
      description: Create JSON with payload of example user info
      operationId: getGenerateExampleUserinfo
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: scope
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: object
                type: object
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/evaluate-scopes/protocol-mappers:
    get:
      description: "Return list of all protocol mappers, which will be used when generating\
        \ tokens issued for particular client."
      operationId: getProtocolMappers
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: scope
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProtocolMapperEvaluationRepresentation'
                type: array
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted:
    get:
      description: "Get effective scope mapping of all roles of particular role container,\
        \ which this client is defacto allowed to have in the accessToken issued for\
        \ him."
      operationId: getGranted
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: either realm name OR client UUID
        explode: false
        in: path
        name: roleContainerId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: scope
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted:
    get:
      description: "Get roles, which this client doesn’t have scope for and can’t\
        \ have them in the accessToken issued for him."
      operationId: getNotGranted
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: either realm name OR client UUID
        explode: false
        in: path
        name: roleContainerId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: scope
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/installation/providers/{providerId}:
    get:
      operationId: getInstallationProvider
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: providerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/management/permissions:
    get:
      description: Return object stating whether client Authorization permissions
        have been initialized or not and a reference
      operationId: getClientManagementPermissions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: OK
      tags:
      - Clients
    put:
      description: Return object stating whether client Authorization permissions
        have been initialized or not and a reference
      operationId: putClientManagementPermissions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
        description: ManagementPermissionReference
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/nodes:
    post:
      description: Register a cluster node with the client Manually register cluster
        node to this client - usually it’s not needed to call this directly as adapter
        should handle by sending registration request to Keycloak
      operationId: postNodes
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: "[string]"
      responses:
        "201":
          description: Created
      tags:
      - Clients
  /{realm}/clients/{id}/nodes/{node}:
    delete:
      description: Unregister a cluster node from the client
      operationId: deleteNode
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: node
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Clients
  /{realm}/clients/{id}/offline-session-count:
    get:
      description: "Get application offline session count Returns a number of offline\
        \ user sessions associated with this client { \\\"count\\\": number }"
      operationId: getOfflineSessionCount
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int64
                  type: integer
                type: object
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/offline-sessions:
    get:
      description: Get offline sessions for client Returns a list of offline user
        sessions associated with this client
      operationId: getOfflineSessions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Paging offset
        explode: true
        in: query
        name: first
        required: false
        schema:
          type: string
        style: form
      - description: Maximum results size (defaults to 100)
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserSessionRepresentation'
                type: array
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/optional-client-scopes:
    get:
      description: Get optional client scopes.  Only name and ids are returned.
      operationId: getOptionalClientScopes
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClientScopeRepresentation'
                type: array
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/optional-client-scopes/{clientScopeId}:
    delete:
      operationId: deleteOptionalClientScope
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientScopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Clients
    put:
      operationId: putOptionalClientScope
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientScopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Clients
  /{realm}/clients/{id}/protocol-mappers/add-models:
    post:
      description: Create multiple mappers
      operationId: postClientProtocolMappersAddModels
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
        description: ProtocolMapperRepresentation
      responses:
        "201":
          description: Created
      tags:
      - Protocol Mappers
  /{realm}/clients/{id}/protocol-mappers/models:
    get:
      description: Get mappers
      operationId: getClientProtocolMappersModels
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProtocolMapperRepresentation'
                type: array
          description: OK
      tags:
      - Protocol Mappers
    post:
      description: Create a mapper
      operationId: postClientProtocolMappersModels
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
        description: ProtocolMapperRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Protocol Mappers
  /{realm}/clients/{id}/protocol-mappers/protocol/{protocol}:
    get:
      description: Get mappers by name for a specific protocol
      operationId: getClientProtocolMappersProtocol
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: protocol
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProtocolMapperRepresentation'
                type: array
          description: OK
      tags:
      - Protocol Mappers
  /{realm}/clients/{id}/push-revocation:
    post:
      description: "Push the client’s revocation policy to its admin URL If the client\
        \ has an admin URL, push revocation policy to it."
      operationId: postClientPushRevocation
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalRequestResult'
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/registration-access-token:
    post:
      description: Generate a new registration access token for the client
      operationId: postRegistrationAccessToken
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRepresentation'
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/roles:
    get:
      description: Get all roles for the realm or client
      operationId: getClientRoles
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: first
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Roles
    post:
      description: Create a new role for the realm or client
      operationId: postClientRoles
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Roles
  /{realm}/clients/{id}/roles/{role-name}:
    delete:
      description: Delete a role by name
      operationId: deleteClientRole
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: role's name (not id!)
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Roles
    get:
      description: Get a role by name
      operationId: getClientRole
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: role's name (not id!)
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRepresentation'
          description: OK
      tags:
      - Roles
    put:
      description: Update a role by name
      operationId: putClientRole
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: role's name (not id!)
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Roles
  /{realm}/clients/{id}/roles/{role-name}/composites:
    delete:
      description: Remove roles from the role’s composite
      operationId: deleteClientRoleComposites
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: role's name (not id!)
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Roles
    get:
      description: Get composites of the role
      operationId: getClientRoleComposites
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: role's name (not id!)
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Roles
    post:
      description: Add a composite to the role
      operationId: postClientRoleComposites
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: role's name (not id!)
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "201":
          description: Created
      tags:
      - Roles
  /{realm}/clients/{id}/roles/{role-name}/composites/clients/{clientUuid}:
    get:
      description: Get client-level roles for the client that are in the role’s composite
      operationId: getClientRoleCompositesClient
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: role's name (not id!)
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientUuid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Roles
  /{realm}/clients/{id}/roles/{role-name}/composites/realm:
    get:
      description: Get realm-level roles of the role’s composite
      operationId: getClientRoleCompositesRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: role's name (not id!)
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Roles
  /{realm}/clients/{id}/roles/{role-name}/groups:
    get:
      description: Returns a stream of groups that have the specified role name
      operationId: getClientRoleGroups
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: the role name.
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      - description: "if false, return a full representation of the {@code GroupRepresentation}\
          \ objects."
        explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      - description: "first result to return. Ignored if negative or {@code null}."
        explode: true
        in: query
        name: first
        required: false
        schema:
          type: string
        style: form
      - description: "maximum number of results to return. Ignored if negative or\
          \ {@code null}."
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupRepresentation'
                type: array
          description: OK
      tags:
      - Roles
  /{realm}/clients/{id}/roles/{role-name}/management/permissions:
    get:
      description: Return object stating whether role Authorization permissions have
        been initialized or not and a reference
      operationId: getClientRoleManagementPermissions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: OK
      tags:
      - Roles
    put:
      description: Return object stating whether role Authorization permissions have
        been initialized or not and a reference
      operationId: putClientRoleManagementPermissions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
        description: ManagementPermissionReference
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: OK
      tags:
      - Roles
  /{realm}/clients/{id}/roles/{role-name}/users:
    get:
      description: Returns a stream of users that have the specified role name.
      operationId: getClientRoleUsers
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: the role name.
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      - description: "first result to return. Ignored if negative or {@code null}."
        explode: true
        in: query
        name: first
        required: false
        schema:
          type: string
        style: form
      - description: "maximum number of results to return. Ignored if negative or\
          \ {@code null}."
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserRepresentation'
                type: array
          description: OK
      tags:
      - Roles
  /{realm}/clients/{id}/scope-mappings:
    get:
      description: Get all scope mappings for the client
      operationId: getClientScopeMappings
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingsRepresentation'
          description: OK
      tags:
      - Scope Mappings
  /{realm}/clients/{id}/scope-mappings/clients/{client}:
    delete:
      description: Remove client-level roles from the client’s scope.
      operationId: deleteClientScopeMappingsClient
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Scope Mappings
    get:
      description: Get the roles associated with a client’s scope Returns roles for
        the client.
      operationId: getClientScopeMappingsClient
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Scope Mappings
    post:
      description: Add client-level roles to the client’s scope
      operationId: postClientScopeMappingsClient
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "201":
          description: Created
      tags:
      - Scope Mappings
  /{realm}/clients/{id}/scope-mappings/clients/{client}/available:
    get:
      description: The available client-level roles Returns the roles for the client
        that can be associated with the client’s scope
      operationId: getClientScopeMappingsClientAvailable
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Scope Mappings
  /{realm}/clients/{id}/scope-mappings/clients/{client}/composite:
    get:
      description: Get effective client roles Returns the roles for the client that
        are associated with the client’s scope.
      operationId: getClientScopeMappingsClientComposite
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      - description: "if false, return roles with their attributes"
        explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Scope Mappings
  /{realm}/clients/{id}/scope-mappings/realm:
    delete:
      description: Remove a set of realm-level roles from the client’s scope
      operationId: deleteClientScopeMappingsRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Scope Mappings
    get:
      description: Get realm-level roles associated with the client’s scope
      operationId: getClientScopeMappingsRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Scope Mappings
    post:
      description: Add a set of realm-level roles to the client’s scope
      operationId: postClientScopeMappingsRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "201":
          description: Created
      tags:
      - Scope Mappings
  /{realm}/clients/{id}/scope-mappings/realm/available:
    get:
      description: Get realm-level roles that are available to attach to this client’s
        scope
      operationId: getClientScopeMappingsRealmAvailable
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Scope Mappings
  /{realm}/clients/{id}/scope-mappings/realm/composite:
    get:
      description: Get effective realm-level roles associated with the client’s scope
        What this does is recurse any composite roles associated with the client’s
        scope and adds the roles to this lists.
      operationId: getClientScopeMappingsRealmComposite
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: "if false, return roles with their attributes"
        explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Scope Mappings
  /{realm}/clients/{id}/service-account-user:
    get:
      description: Get a user dedicated to the service account
      operationId: getServiceAccountUser
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRepresentation'
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/session-count:
    get:
      description: "Get application session count Returns a number of user sessions\
        \ associated with this client { \\\"count\\\": number }"
      operationId: getSessionCount
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int64
                  type: integer
                type: object
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/test-nodes-available:
    get:
      description: Test if registered cluster nodes are available Tests availability
        by sending 'ping' request to all cluster nodes.
      operationId: getTestNodesAvailable
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalRequestResult'
          description: OK
      tags:
      - Clients
  /{realm}/clients/{id}/user-sessions:
    get:
      description: Get user sessions for client Returns a list of user sessions associated
        with this client
      operationId: getClientUserSessions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Paging offset
        explode: true
        in: query
        name: first
        required: false
        schema:
          type: string
        style: form
      - description: Maximum results size (defaults to 100)
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserSessionRepresentation'
                type: array
          description: OK
      tags:
      - Clients
  /{realm}/components:
    get:
      operationId: getComponents
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: parent
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ComponentRepresentation'
                type: array
          description: OK
      tags:
      - Component
    post:
      operationId: postComponents
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentRepresentation'
        description: ComponentRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Component
  /{realm}/components/{id}:
    delete:
      operationId: deleteComponent
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Component
    get:
      operationId: getComponent
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentRepresentation'
          description: OK
      tags:
      - Component
    put:
      operationId: putComponent
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentRepresentation'
        description: ComponentRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Component
  /{realm}/components/{id}/sub-component-types:
    get:
      description: List of subcomponent types that are available to configure for
        a particular parent component.
      operationId: getSubComponentTypes
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ComponentTypeRepresentation'
                type: array
          description: OK
      tags:
      - Component
  /{realm}/credential-registrators:
    get:
      operationId: getCredentialRegistrators
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      tags:
      - Realms Admin
  /{realm}/default-default-client-scopes:
    get:
      description: Get realm default client scopes.  Only name and ids are returned.
      operationId: getDefaultDefaultClientScopes
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClientScopeRepresentation'
                type: array
          description: OK
      tags:
      - Realms Admin
  /{realm}/default-default-client-scopes/{clientScopeId}:
    delete:
      operationId: deleteDefaultDefaultClientScope
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientScopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Realms Admin
    put:
      operationId: putDefaultDefaultClientScope
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientScopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Realms Admin
  /{realm}/default-groups:
    get:
      description: Get group hierarchy.  Only name and ids are returned.
      operationId: getDefaultGroups
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupRepresentation'
                type: array
          description: OK
      tags:
      - Realms Admin
  /{realm}/default-groups/{groupId}:
    delete:
      operationId: deleteDefaultGroup
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Realms Admin
    put:
      operationId: putDefaultGroup
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Realms Admin
  /{realm}/default-optional-client-scopes:
    get:
      description: Get realm optional client scopes.  Only name and ids are returned.
      operationId: getDefaultOptionalClientScopes
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClientScopeRepresentation'
                type: array
          description: OK
      tags:
      - Realms Admin
  /{realm}/default-optional-client-scopes/{clientScopeId}:
    delete:
      operationId: deleteDefaultOptionalClientScope
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientScopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Realms Admin
    put:
      operationId: putDefaultOptionalClientScope
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientScopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Realms Admin
  /{realm}/events:
    delete:
      description: Delete all events
      operationId: deleteEvents
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Realms Admin
    get:
      description: "Get events Returns all events, or filters them based on URL query\
        \ parameters listed here"
      operationId: getEvents
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: App or oauth client name
        explode: true
        in: query
        name: client
        required: false
        schema:
          type: string
        style: form
      - description: From date
        explode: true
        in: query
        name: dateFrom
        required: false
        schema:
          type: string
        style: form
      - description: To date
        explode: true
        in: query
        name: dateTo
        required: false
        schema:
          type: string
        style: form
      - description: Paging offset
        explode: true
        in: query
        name: first
        required: false
        schema:
          type: string
        style: form
      - description: IP Address
        explode: true
        in: query
        name: ipAddress
        required: false
        schema:
          type: string
        style: form
      - description: Maximum results size (defaults to 100)
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: "The types of events to return [String]"
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      - description: User id
        explode: true
        in: query
        name: user
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EventRepresentation'
                type: array
          description: OK
      tags:
      - Realms Admin
  /{realm}/events/config:
    get:
      description: Get the events provider configuration Returns JSON object with
        events provider configuration
      operationId: getEventsConfig
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RealmEventsConfigRepresentation'
          description: OK
      tags:
      - Realms Admin
    put:
      operationId: putEventsConfig
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RealmEventsConfigRepresentation'
        description: RealmEventsConfigRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Realms Admin
  /{realm}/group-by-path/{path}:
    get:
      operationId: getGroupByPath
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: PathSegment
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupRepresentation'
          description: OK
      tags:
      - Realms Admin
  /{realm}/groups:
    get:
      description: Get group hierarchy.  Only name and ids are returned.
      operationId: getGroupsByRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: exact
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: first
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: populateHierarchy
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupRepresentation'
                type: array
          description: OK
      tags:
      - Groups
    post:
      description: create or add a top level realm groupSet or create child.
      operationId: postGroups
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRepresentation'
        description: GroupRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Groups
  /{realm}/groups/count:
    get:
      description: Returns the groups counts.
      operationId: getGroupsCountByRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: top
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int64
                  type: integer
                type: object
          description: OK
      tags:
      - Groups
  /{realm}/groups/{id}:
    delete:
      operationId: deleteGroupByRealmById
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Groups
    get:
      operationId: getGroup
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupRepresentation'
          description: OK
      tags:
      - Groups
    put:
      description: "Update group, ignores subgroups."
      operationId: putGroupByRealmById
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRepresentation'
        description: GroupRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Groups
  /{realm}/groups/{id}/children:
    get:
      description: Return a paginated list of subgroups that have a parent group corresponding
        to the group on the URL
      operationId: getChildren
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: first
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupRepresentation'
                type: array
          description: OK
      tags:
      - Groups
    post:
      description: Set or create child.
      operationId: postChildren
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRepresentation'
        description: GroupRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Groups
  /{realm}/groups/{id}/management/permissions:
    get:
      description: Return object stating whether client Authorization permissions
        have been initialized or not and a reference
      operationId: getGroupManagementPermissions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: OK
      tags:
      - Groups
    put:
      description: Return object stating whether client Authorization permissions
        have been initialized or not and a reference
      operationId: putGroupManagementPermissions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
        description: ManagementPermissionReference
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: OK
      tags:
      - Groups
  /{realm}/groups/{id}/members:
    get:
      description: "Get users Returns a stream of users, filtered according to query\
        \ parameters"
      operationId: getMembers
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: "Only return basic information (only guaranteed to return id,\
          \ username, created, first and last name, email, enabled state, email verification\
          \ state, federation link, and access. Note that it means that namely user\
          \ attributes, required actions, and not before are not returned.)"
        explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      - description: Pagination offset
        explode: true
        in: query
        name: first
        required: false
        schema:
          type: string
        style: form
      - description: Maximum results size (defaults to 100)
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserRepresentation'
                type: array
          description: OK
      tags:
      - Groups
  /{realm}/groups/{id}/role-mappings:
    get:
      description: Get role mappings
      operationId: getGroupRoleMappings
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingsRepresentation'
          description: OK
      tags:
      - Role Mapper
  /{realm}/groups/{id}/role-mappings/clients/{client}:
    delete:
      description: Delete client-level roles from user role mapping
      operationId: deleteGroupRoleMappingsClient
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Client Role Mappings
    get:
      description: "Get client-level role mappings for the user, and the app"
      operationId: getGroupRoleMappingsClient
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Client Role Mappings
    post:
      description: Add client-level roles to the user role mapping
      operationId: postGroupRoleMappingsClient
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "201":
          description: Created
      tags:
      - Client Role Mappings
  /{realm}/groups/{id}/role-mappings/clients/{client}/available:
    get:
      description: Get available client-level roles that can be mapped to the user
      operationId: getGroupRoleMappingsClientAvailable
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Client Role Mappings
  /{realm}/groups/{id}/role-mappings/clients/{client}/composite:
    get:
      description: Get effective client-level role mappings This recurses any composite
        roles
      operationId: getGroupRoleMappingsClientComposite
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      - description: "if false, return roles with their attributes"
        explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Client Role Mappings
  /{realm}/groups/{id}/role-mappings/realm:
    delete:
      description: Delete realm-level role mappings
      operationId: deleteGroupRoleMappingsRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Role Mapper
    get:
      description: Get realm-level role mappings
      operationId: getGroupRoleMappingsRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Role Mapper
    post:
      description: Add realm-level role mappings to the user
      operationId: postGroupRoleMappingsRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "201":
          description: Created
      tags:
      - Role Mapper
  /{realm}/groups/{id}/role-mappings/realm/available:
    get:
      description: Get realm-level roles that can be mapped
      operationId: getGroupRoleMappingsRealmAvailable
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Role Mapper
  /{realm}/groups/{id}/role-mappings/realm/composite:
    get:
      description: Get effective realm-level role mappings This will recurse all composite
        roles to get the result.
      operationId: getGroupRoleMappingsRealmComposite
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: "if false, return roles with their attributes"
        explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Role Mapper
  /{realm}/identity-provider/import-config:
    post:
      description: Import identity provider from JSON body
      operationId: postImportConfig
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: "[AnyType]"
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: OK
      tags:
      - Identity Providers
  /{realm}/identity-provider/instances:
    get:
      description: List identity providers
      operationId: getInstances
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: "Boolean which defines whether brief representations are returned\
          \ (default: false)"
        explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      - description: Pagination offset
        explode: true
        in: query
        name: first
        required: false
        schema:
          type: string
        style: form
      - description: Maximum results size (defaults to 100)
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: "Filter specific providers by name. Search can be prefix (name*),\
          \ contains (name) or exact (&quot;name&quot;). Default prefixed."
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/IdentityProviderRepresentation'
                type: array
          description: OK
      tags:
      - Identity Providers
    post:
      description: Create a new identity provider
      operationId: postInstances
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProviderRepresentation'
        description: IdentityProviderRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Identity Providers
  /{realm}/identity-provider/instances/{alias}:
    delete:
      description: Delete the identity provider
      operationId: deleteInstance
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - Identity Providers
    get:
      description: Get the identity provider
      operationId: getInstance
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProviderRepresentation'
          description: OK
      tags:
      - Identity Providers
    put:
      description: Update the identity provider
      operationId: putInstance
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProviderRepresentation'
        description: IdentityProviderRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Identity Providers
  /{realm}/identity-provider/instances/{alias}/export:
    get:
      description: Export public broker configuration for identity provider
      operationId: getExport
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
      - description: Format to use
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - Identity Providers
  /{realm}/identity-provider/instances/{alias}/management/permissions:
    get:
      description: Return object stating whether client Authorization permissions
        have been initialized or not and a reference
      operationId: getInstanceManagementPermissions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: OK
      tags:
      - Identity Providers
    put:
      description: Return object stating whether client Authorization permissions
        have been initialized or not and a reference
      operationId: putInstanceManagementPermissions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
        description: ManagementPermissionReference
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: OK
      tags:
      - Identity Providers
  /{realm}/identity-provider/instances/{alias}/mapper-types:
    get:
      description: Get mapper types for identity provider
      operationId: getMapperTypes
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/IdentityProviderMapperTypeRepresentation'
                type: object
          description: OK
      tags:
      - Identity Providers
  /{realm}/identity-provider/instances/{alias}/mappers:
    get:
      description: Get mappers for identity provider
      operationId: getMappers
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/IdentityProviderMapperRepresentation'
                type: array
          description: OK
      tags:
      - Identity Providers
    post:
      description: Add a mapper to identity provider
      operationId: postMappers
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProviderMapperRepresentation'
        description: IdentityProviderMapperRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Identity Providers
  /{realm}/identity-provider/instances/{alias}/mappers/{id}:
    delete:
      description: Delete a mapper for the identity provider
      operationId: deleteMapper
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
      - description: Mapper id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Identity Providers
    get:
      description: Get mapper by id for the identity provider
      operationId: getMapper
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
      - description: Mapper id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProviderMapperRepresentation'
          description: OK
      tags:
      - Identity Providers
    put:
      description: Update a mapper for the identity provider
      operationId: putMapper
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
      - description: Mapper id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProviderMapperRepresentation'
        description: IdentityProviderMapperRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Identity Providers
  /{realm}/identity-provider/providers/{provider_id}:
    get:
      description: Get the identity provider factory for that provider id
      operationId: getIdentityProviderProvider
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: The provider id to get the factory
        explode: false
        in: path
        name: provider_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
      tags:
      - Identity Providers
  /{realm}/keys:
    get:
      operationId: getKeys
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeysMetadataRepresentation'
          description: OK
      tags:
      - Key
  /{realm}/localization:
    get:
      operationId: getLocalizationByRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      tags:
      - Realms Admin
  /{realm}/localization/{locale}:
    delete:
      operationId: deleteLocalizationByRealmByLocale
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: locale
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Realms Admin
    get:
      operationId: getLocalizationByRealmByLocale
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: locale
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: useRealmDefaultLocaleFallback
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: OK
      tags:
      - Realms Admin
    post:
      description: Import localization from uploaded JSON file
      operationId: postLocalization
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: locale
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: "[string]"
      responses:
        "201":
          description: Created
      tags:
      - Realms Admin
  /{realm}/localization/{locale}/{key}:
    delete:
      operationId: deleteLocalizationByRealmByLocaleByKey
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: locale
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Realms Admin
    get:
      operationId: getLocalizationByRealmByLocaleByKey
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: locale
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      tags:
      - Realms Admin
    put:
      operationId: putLocalization
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: locale
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: "[string]"
      responses:
        "204":
          description: No Content
      tags:
      - Realms Admin
  /{realm}/logout-all:
    post:
      description: Removes all user sessions.
      operationId: postLogoutAll
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalRequestResult'
          description: OK
      tags:
      - Realms Admin
  /{realm}/partial-export:
    post:
      description: Partial export of existing realm into a JSON file.
      operationId: postPartialExport
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: exportClients
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: exportGroupsAndRoles
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - Realms Admin
  /{realm}/partialImport:
    post:
      description: Partial import from a JSON file to an existing realm.
      operationId: postPartialImport
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              format: binary
              type: string
        description: "[file]"
      responses:
        "200":
          description: OK
      tags:
      - Realms Admin
  /{realm}/push-revocation:
    post:
      description: Push the realm’s revocation policy to any client that has an admin
        url associated with it.
      operationId: postPushRevocationByRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalRequestResult'
          description: OK
      tags:
      - Realms Admin
  /{realm}/roles:
    get:
      description: Get all roles for the realm or client
      operationId: getRolesByRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: first
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Roles
    post:
      description: Create a new role for the realm or client
      operationId: postRolesByRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Roles
  /{realm}/roles-by-id/{role-id}:
    delete:
      description: Delete the role
      operationId: deleteRolesById
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: id of role
        explode: false
        in: path
        name: role-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Roles (by ID)
    get:
      description: Get a specific role’s representation
      operationId: getRolesById
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: id of role
        explode: false
        in: path
        name: role-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRepresentation'
          description: OK
      tags:
      - Roles (by ID)
    put:
      description: Update the role
      operationId: putRolesById
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: id of role
        explode: false
        in: path
        name: role-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Roles (by ID)
  /{realm}/roles-by-id/{role-id}/composites:
    delete:
      description: Remove a set of roles from the role’s composite
      operationId: deleteRolesByIdComposites
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: role-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Roles (by ID)
    get:
      description: Get role’s children Returns a set of role’s children provided the
        role is a composite.
      operationId: getRolesByIdComposites
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: role-id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: first
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Roles (by ID)
    post:
      description: Make the role a composite role by associating some child roles
      operationId: postRolesByIdComposites
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: role-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "201":
          description: Created
      tags:
      - Roles (by ID)
  /{realm}/roles-by-id/{role-id}/composites/clients/{clientUuid}:
    get:
      description: Get client-level roles for the client that are in the role’s composite
      operationId: getRolesByIdCompositesClient
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: role-id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientUuid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Roles (by ID)
  /{realm}/roles-by-id/{role-id}/composites/realm:
    get:
      description: Get realm-level roles that are in the role’s composite
      operationId: getRolesByIdCompositesRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: role-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Roles (by ID)
  /{realm}/roles-by-id/{role-id}/management/permissions:
    get:
      description: Return object stating whether role Authorization permissions have
        been initialized or not and a reference
      operationId: getRolesByIdManagementPermissions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: role-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: OK
      tags:
      - Roles (by ID)
    put:
      description: Return object stating whether role Authorization permissions have
        been initialized or not and a reference
      operationId: putRolesByIdManagementPermissions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: role-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
        description: ManagementPermissionReference
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: OK
      tags:
      - Roles (by ID)
  /{realm}/roles/{role-name}:
    delete:
      description: Delete a role by name
      operationId: deleteRoleByRealmByRoleName
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: role's name (not id!)
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Roles
    get:
      description: Get a role by name
      operationId: getRoleByRealmByRoleName
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: role's name (not id!)
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRepresentation'
          description: OK
      tags:
      - Roles
    put:
      description: Update a role by name
      operationId: putRoleByRealmByRoleName
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: role's name (not id!)
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Roles
  /{realm}/roles/{role-name}/composites:
    delete:
      description: Remove roles from the role’s composite
      operationId: deleteRoleCompositesByRealmByRoleName
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: role's name (not id!)
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Roles
    get:
      description: Get composites of the role
      operationId: getRoleCompositesByRealmByRoleName
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: role's name (not id!)
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Roles
    post:
      description: Add a composite to the role
      operationId: postRoleCompositesByRealmByRoleName
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: role's name (not id!)
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "201":
          description: Created
      tags:
      - Roles
  /{realm}/roles/{role-name}/composites/clients/{clientUuid}:
    get:
      description: Get client-level roles for the client that are in the role’s composite
      operationId: getRoleCompositesClientByRealmByRoleNameByClientUuid
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: role's name (not id!)
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientUuid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Roles
  /{realm}/roles/{role-name}/composites/realm:
    get:
      description: Get realm-level roles of the role’s composite
      operationId: getRoleCompositesRealmByRealmByRoleName
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: role's name (not id!)
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Roles
  /{realm}/roles/{role-name}/groups:
    get:
      description: Returns a stream of groups that have the specified role name
      operationId: getRoleGroupsByRealmByRoleName
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: the role name.
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      - description: "if false, return a full representation of the {@code GroupRepresentation}\
          \ objects."
        explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      - description: "first result to return. Ignored if negative or {@code null}."
        explode: true
        in: query
        name: first
        required: false
        schema:
          type: string
        style: form
      - description: "maximum number of results to return. Ignored if negative or\
          \ {@code null}."
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupRepresentation'
                type: array
          description: OK
      tags:
      - Roles
  /{realm}/roles/{role-name}/management/permissions:
    get:
      description: Return object stating whether role Authorization permissions have
        been initialized or not and a reference
      operationId: getRoleManagementPermissionsByRealmByRoleName
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: OK
      tags:
      - Roles
    put:
      description: Return object stating whether role Authorization permissions have
        been initialized or not and a reference
      operationId: putRoleManagementPermissionsByRealmByRoleName
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
        description: ManagementPermissionReference
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: OK
      tags:
      - Roles
  /{realm}/roles/{role-name}/users:
    get:
      description: Returns a stream of users that have the specified role name.
      operationId: getRoleUsersByRealmByRoleName
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: the role name.
        explode: false
        in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
      - description: "first result to return. Ignored if negative or {@code null}."
        explode: true
        in: query
        name: first
        required: false
        schema:
          type: string
        style: form
      - description: "maximum number of results to return. Ignored if negative or\
          \ {@code null}."
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserRepresentation'
                type: array
          description: OK
      tags:
      - Roles
  /{realm}/sessions/{session}:
    delete:
      description: Remove a specific user session.
      operationId: deleteSession
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: session
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Realms Admin
  /{realm}/testSMTPConnection:
    post:
      description: Test SMTP connection with current logged in user
      operationId: postTestSmtpConnection
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: "[string]"
      responses:
        "200":
          description: OK
      tags:
      - Realms Admin
  /{realm}/users:
    get:
      description: "Get users Returns a stream of users, filtered according to query\
        \ parameters."
      operationId: getUsersByRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: "Boolean which defines whether brief representations are returned\
          \ (default: false)"
        explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      - description: "A String contained in email, or the complete email, if param\
          \ &quot;exact&quot; is true"
        explode: true
        in: query
        name: email
        required: false
        schema:
          type: string
        style: form
      - description: whether the email has been verified
        explode: true
        in: query
        name: emailVerified
        required: false
        schema:
          type: string
        style: form
      - description: Boolean representing if user is enabled or not
        explode: true
        in: query
        name: enabled
        required: false
        schema:
          type: string
        style: form
      - description: "Boolean which defines whether the params &quot;last&quot;, &quot;first&quot;,\
          \ &quot;email&quot; and &quot;username&quot; must match exactly"
        explode: true
        in: query
        name: exact
        required: false
        schema:
          type: string
        style: form
      - description: Pagination offset
        explode: true
        in: query
        name: first
        required: false
        schema:
          type: string
        style: form
      - description: "A String contained in firstName, or the complete firstName,\
          \ if param &quot;exact&quot; is true"
        explode: true
        in: query
        name: firstName
        required: false
        schema:
          type: string
        style: form
      - description: The alias of an Identity Provider linked to the user
        explode: true
        in: query
        name: idpAlias
        required: false
        schema:
          type: string
        style: form
      - description: The userId at an Identity Provider linked to the user
        explode: true
        in: query
        name: idpUserId
        required: false
        schema:
          type: string
        style: form
      - description: "A String contained in lastName, or the complete lastName, if\
          \ param &quot;exact&quot; is true"
        explode: true
        in: query
        name: lastName
        required: false
        schema:
          type: string
        style: form
      - description: Maximum results size (defaults to 100)
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: "A query to search for custom attributes, in the format 'key1:value2\
          \ key2:value2'"
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: "A String contained in username, first or last name, or email.\
          \ Default search behavior is prefix-based (e.g., foo or foo*). Use foo for\
          \ infix search and &quot;foo&quot; for exact search."
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: "A String contained in username, or the complete username, if\
          \ param &quot;exact&quot; is true"
        explode: true
        in: query
        name: username
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserRepresentation'
                type: array
          description: OK
      tags:
      - Users
    post:
      description: Create a new user Username must be unique.
      operationId: postUsers
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRepresentation'
        description: UserRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Users
  /{realm}/users-management-permissions:
    get:
      operationId: getUsersManagementPermissions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: OK
      tags:
      - Realms Admin
    put:
      operationId: putUsersManagementPermissions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
        description: ManagementPermissionReference
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: OK
      tags:
      - Realms Admin
  /{realm}/users/count:
    get:
      description: Returns the number of users that match the given criteria.
      operationId: getUsersCount
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - description: email filter
        explode: true
        in: query
        name: email
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: emailVerified
        required: false
        schema:
          type: string
        style: form
      - description: Boolean representing if user is enabled or not
        explode: true
        in: query
        name: enabled
        required: false
        schema:
          type: string
        style: form
      - description: first name filter
        explode: true
        in: query
        name: firstName
        required: false
        schema:
          type: string
        style: form
      - description: last name filter
        explode: true
        in: query
        name: lastName
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: "arbitrary search string for all the fields below. Default search\
          \ behavior is prefix-based (e.g., foo or foo*). Use foo for infix search\
          \ and &quot;foo&quot; for exact search."
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: username filter
        explode: true
        in: query
        name: username
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: OK
      tags:
      - Users
  /{realm}/users/profile:
    get:
      operationId: getProfile
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UPConfig'
          description: OK
      tags:
      - Users
    put:
      operationId: putProfile
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UPConfig'
        description: UPConfig
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UPConfig'
          description: OK
      tags:
      - Users
  /{realm}/users/profile/metadata:
    get:
      operationId: getMetadata
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileMetadata'
          description: OK
      tags:
      - Users
  /{realm}/users/{id}:
    delete:
      description: Delete the user
      operationId: deleteUserByRealmById
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - Users
    get:
      description: Get representation of the user
      operationId: getUserByRealmById
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Indicates if the user profile metadata should be added to the
          response
        explode: true
        in: query
        name: userProfileMetadata
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRepresentation'
          description: OK
      tags:
      - Users
    put:
      description: Update the user
      operationId: putUser
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRepresentation'
        description: UserRepresentation
      responses:
        "200":
          description: OK
      tags:
      - Users
  /{realm}/users/{id}/configured-user-storage-credential-types:
    get:
      description: "Return credential types, which are provided by the user storage\
        \ where user is stored."
      operationId: getConfiguredUserStorageCredentialTypes
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      tags:
      - Users
  /{realm}/users/{id}/consents:
    get:
      description: Get consents granted by the user
      operationId: getConsents
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: object
                type: array
          description: OK
      tags:
      - Users
  /{realm}/users/{id}/consents/{client}:
    delete:
      description: Revoke consent and offline tokens for particular client from user
      operationId: deleteConsent
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Client id
        explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Users
  /{realm}/users/{id}/credentials:
    get:
      operationId: getCredentials
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CredentialRepresentation'
                type: array
          description: OK
      tags:
      - Users
  /{realm}/users/{id}/credentials/{credentialId}:
    delete:
      description: Remove a credential for a user
      operationId: deleteCredential
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: credentialId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Users
  /{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}:
    post:
      description: Move a credential to a position behind another credential
      operationId: postMoveAfter
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The credential to move
        explode: false
        in: path
        name: credentialId
        required: true
        schema:
          type: string
        style: simple
      - description: "The credential that will be the previous element in the list.\
          \ If set to null, the moved credential will be the first element in the\
          \ list."
        explode: false
        in: path
        name: newPreviousCredentialId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          description: Created
      tags:
      - Users
  /{realm}/users/{id}/credentials/{credentialId}/moveToFirst:
    post:
      description: Move a credential to a first position in the credentials list of
        the user
      operationId: postMoveToFirst
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The credential to move
        explode: false
        in: path
        name: credentialId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          description: Created
      tags:
      - Users
  /{realm}/users/{id}/credentials/{credentialId}/userLabel:
    put:
      description: Update a credential label for a user
      operationId: putUserLabel
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: credentialId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: "[string]"
      responses:
        "204":
          description: No Content
      tags:
      - Users
  /{realm}/users/{id}/disable-credential-types:
    put:
      description: Disable all credentials for a user of a specific type
      operationId: putDisableCredentialTypes
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: "[string]"
      responses:
        "204":
          description: No Content
      tags:
      - Users
  /{realm}/users/{id}/execute-actions-email:
    put:
      description: Send an email to the user with a link they can click to execute
        particular actions.
      operationId: putExecuteActionsEmail
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Client id
        explode: true
        in: query
        name: client_id
        required: false
        schema:
          type: string
        style: form
      - description: Number of seconds after which the generated token expires
        explode: true
        in: query
        name: lifespan
        required: false
        schema:
          type: string
        style: form
      - description: Redirect uri
        explode: true
        in: query
        name: redirect_uri
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: "[string]"
      responses:
        "200":
          description: OK
      tags:
      - Users
  /{realm}/users/{id}/federated-identity:
    get:
      description: Get social logins associated with the user
      operationId: getFederatedIdentity
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FederatedIdentityRepresentation'
                type: array
          description: OK
      tags:
      - Users
  /{realm}/users/{id}/federated-identity/{provider}:
    delete:
      description: Remove a social login provider from user
      operationId: deleteFederatedIdentity
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Social login provider id
        explode: false
        in: path
        name: provider
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Users
    post:
      description: Add a social login provider to the user
      operationId: postFederatedIdentity
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Social login provider id
        explode: false
        in: path
        name: provider
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - Users
  /{realm}/users/{id}/groups:
    get:
      operationId: getUserGroups
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: first
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupRepresentation'
                type: array
          description: OK
      tags:
      - Users
  /{realm}/users/{id}/groups/count:
    get:
      operationId: getUserGroupsCount
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int64
                  type: integer
                type: object
          description: OK
      tags:
      - Users
  /{realm}/users/{id}/groups/{groupId}:
    delete:
      operationId: deleteUserGroup
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Users
    put:
      operationId: putUserGroup
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      tags:
      - Users
  /{realm}/users/{id}/impersonation:
    post:
      description: Impersonate the user
      operationId: postImpersonation
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: object
                type: object
          description: OK
      tags:
      - Users
  /{realm}/users/{id}/logout:
    post:
      description: Remove all user sessions associated with the user Also send notification
        to all clients that have an admin URL to invalidate the sessions for the particular
        user.
      operationId: postLogout
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          description: Created
      tags:
      - Users
  /{realm}/users/{id}/offline-sessions/{clientUuid}:
    get:
      description: Get offline sessions associated with the user and client
      operationId: getOfflineSession
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientUuid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserSessionRepresentation'
                type: array
          description: OK
      tags:
      - Users
  /{realm}/users/{id}/reset-password:
    put:
      description: Set up a new password for the user.
      operationId: putResetPassword
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialRepresentation'
        description: CredentialRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Users
  /{realm}/users/{id}/reset-password-email:
    put:
      description: Send an email to the user with a link they can click to reset their
        password.
      operationId: putResetPasswordEmail
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: client id
        explode: true
        in: query
        name: client_id
        required: false
        schema:
          type: string
        style: form
      - description: redirect uri
        explode: true
        in: query
        name: redirect_uri
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - Users
  /{realm}/users/{id}/role-mappings:
    get:
      description: Get role mappings
      operationId: getUserRoleMappings
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingsRepresentation'
          description: OK
      tags:
      - Role Mapper
  /{realm}/users/{id}/role-mappings/clients/{client}:
    delete:
      description: Delete client-level roles from user role mapping
      operationId: deleteUserRoleMappingsClient
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Client Role Mappings
    get:
      description: "Get client-level role mappings for the user, and the app"
      operationId: getUserRoleMappingsClient
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Client Role Mappings
    post:
      description: Add client-level roles to the user role mapping
      operationId: postUserRoleMappingsClient
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "201":
          description: Created
      tags:
      - Client Role Mappings
  /{realm}/users/{id}/role-mappings/clients/{client}/available:
    get:
      description: Get available client-level roles that can be mapped to the user
      operationId: getUserRoleMappingsClientAvailable
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Client Role Mappings
  /{realm}/users/{id}/role-mappings/clients/{client}/composite:
    get:
      description: Get effective client-level role mappings This recurses any composite
        roles
      operationId: getUserRoleMappingsClientComposite
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
      - description: "if false, return roles with their attributes"
        explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Client Role Mappings
  /{realm}/users/{id}/role-mappings/realm:
    delete:
      description: Delete realm-level role mappings
      operationId: deleteUserRoleMappingsRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "204":
          description: No Content
      tags:
      - Role Mapper
    get:
      description: Get realm-level role mappings
      operationId: getUserRoleMappingsRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Role Mapper
    post:
      description: Add realm-level role mappings to the user
      operationId: postUserRoleMappingsRealm
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
        description: RoleRepresentation
      responses:
        "201":
          description: Created
      tags:
      - Role Mapper
  /{realm}/users/{id}/role-mappings/realm/available:
    get:
      description: Get realm-level roles that can be mapped
      operationId: getUserRoleMappingsRealmAvailable
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Role Mapper
  /{realm}/users/{id}/role-mappings/realm/composite:
    get:
      description: Get effective realm-level role mappings This will recurse all composite
        roles to get the result.
      operationId: getUserRoleMappingsRealmComposite
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: "if false, return roles with their attributes"
        explode: true
        in: query
        name: briefRepresentation
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: OK
      tags:
      - Role Mapper
  /{realm}/users/{id}/send-verify-email:
    put:
      description: Send an email-verification email to the user An email contains
        a link the user can click to verify their email address.
      operationId: putSendVerifyEmail
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Client id
        explode: true
        in: query
        name: client_id
        required: false
        schema:
          type: string
        style: form
      - description: Redirect uri
        explode: true
        in: query
        name: redirect_uri
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - Users
  /{realm}/users/{id}/sessions:
    get:
      description: Get sessions associated with the user
      operationId: getSessions
      parameters:
      - description: realm name (not id!)
        explode: false
        in: path
        name: realm
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserSessionRepresentation'
                type: array
          description: OK
      tags:
      - Users
components:
  schemas:
    Access:
      example:
        roles:
        - roles
        - roles
        verify_caller: true
      properties:
        roles:
          items:
            type: string
          type: array
          uniqueItems: true
        verify_caller:
          type: boolean
      type: object
    AccessToken:
      example:
        at_hash: at_hash
        sub: sub
        zoneinfo: zoneinfo
        resource_access:
          key:
            roles:
            - roles
            - roles
            verify_caller: true
        birthdate: birthdate
        gender: gender
        allowed-origins:
        - allowed-origins
        - allowed-origins
        iss: iss
        typ: typ
        trusted-certs:
        - trusted-certs
        - trusted-certs
        preferred_username: preferred_username
        authTime: 2
        locale: locale
        sid: sid
        authorization:
          permissions:
          - claims:
              key:
              - claims
              - claims
            rsid: rsid
            scopes:
            - scopes
            - scopes
            rsname: rsname
          - claims:
              key:
              - claims
              - claims
            rsid: rsid
            scopes:
            - scopes
            - scopes
            rsname: rsname
        acr: acr
        updated_at: 5
        realm_access:
          roles:
          - roles
          - roles
          verify_caller: true
        azp: azp
        auth_time: 5
        scope: scope
        nickname: nickname
        cnf:
          x5t#S256: x5t#S256
          jkt: jkt
        exp: 0
        session_state: session_state
        iat: 1
        jti: jti
        email: email
        website: website
        email_verified: true
        address:
          street_address: street_address
          country: country
          formatted: formatted
          locality: locality
          region: region
          postal_code: postal_code
        profile: profile
        otherClaims:
          key: "{}"
        phone_number_verified: true
        given_name: given_name
        middle_name: middle_name
        nonce: nonce
        picture: picture
        c_hash: c_hash
        s_hash: s_hash
        nbf: 6
        claims_locales: claims_locales
        name: name
        phone_number: phone_number
        family_name: family_name
      properties:
        jti:
          type: string
        exp:
          format: int64
          type: integer
        nbf:
          format: int64
          type: integer
        iat:
          format: int64
          type: integer
        iss:
          type: string
        sub:
          type: string
        typ:
          type: string
        azp:
          type: string
        otherClaims:
          additionalProperties:
            type: object
          type: object
        nonce:
          type: string
        auth_time:
          format: int64
          type: integer
        session_state:
          type: string
        at_hash:
          type: string
        c_hash:
          type: string
        name:
          type: string
        given_name:
          type: string
        family_name:
          type: string
        middle_name:
          type: string
        nickname:
          type: string
        preferred_username:
          type: string
        profile:
          type: string
        picture:
          type: string
        website:
          type: string
        email:
          type: string
        email_verified:
          type: boolean
        gender:
          type: string
        birthdate:
          type: string
        zoneinfo:
          type: string
        locale:
          type: string
        phone_number:
          type: string
        phone_number_verified:
          type: boolean
        address:
          $ref: '#/components/schemas/AddressClaimSet'
        updated_at:
          format: int64
          type: integer
        claims_locales:
          type: string
        acr:
          type: string
        s_hash:
          type: string
        authTime:
          format: int32
          type: integer
        sid:
          type: string
        trusted-certs:
          items:
            type: string
          type: array
          uniqueItems: true
        allowed-origins:
          items:
            type: string
          type: array
          uniqueItems: true
        realm_access:
          $ref: '#/components/schemas/Access'
        resource_access:
          additionalProperties:
            $ref: '#/components/schemas/Access'
          type: object
        authorization:
          $ref: '#/components/schemas/Authorization'
        cnf:
          $ref: '#/components/schemas/Confirmation'
        scope:
          type: string
      type: object
    AddressClaimSet:
      example:
        street_address: street_address
        country: country
        formatted: formatted
        locality: locality
        region: region
        postal_code: postal_code
      properties:
        formatted:
          type: string
        street_address:
          type: string
        locality:
          type: string
        region:
          type: string
        postal_code:
          type: string
        country:
          type: string
      type: object
    AdminEventRepresentation:
      example:
        realmId: realmId
        resourcePath: resourcePath
        operationType: operationType
        time: 0
        authDetails:
          realmId: realmId
          clientId: clientId
          ipAddress: ipAddress
          userId: userId
        error: error
        representation: representation
        resourceType: resourceType
      properties:
        time:
          format: int64
          type: integer
        realmId:
          type: string
        authDetails:
          $ref: '#/components/schemas/AuthDetailsRepresentation'
        operationType:
          type: string
        resourceType:
          type: string
        resourcePath:
          type: string
        representation:
          type: string
        error:
          type: string
      type: object
    ApplicationRepresentation:
      example:
        optionalClientScopes:
        - optionalClientScopes
        - optionalClientScopes
        publicClient: true
        registeredNodes:
          key: 9
        authorizationSettings:
          clientId: clientId
          name: name
          policies:
          - owner: owner
            policies:
            - policies
            - policies
            resourcesData:
            - null
            - null
            description: description
            resources:
            - resources
            - resources
            type: type
            scopesData:
            - null
            - null
            name: name
            id: id
            scopes:
            - scopes
            - scopes
            logic: "{}"
            decisionStrategy: "{}"
            config:
              key: config
          - owner: owner
            policies:
            - policies
            - policies
            resourcesData:
            - null
            - null
            description: description
            resources:
            - resources
            - resources
            type: type
            scopesData:
            - null
            - null
            name: name
            id: id
            scopes:
            - scopes
            - scopes
            logic: "{}"
            decisionStrategy: "{}"
            config:
              key: config
          resources:
          - owner:
              name: name
              id: id
            uris:
            - uris
            - uris
            scopesUma:
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            ownerManagedAccess: true
            displayName: displayName
            name: name
            attributes:
              key:
              - attributes
              - attributes
            id: id
            scopes:
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            type: type
            uri: uri
            icon_uri: icon_uri
          - owner:
              name: name
              id: id
            uris:
            - uris
            - uris
            scopesUma:
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            ownerManagedAccess: true
            displayName: displayName
            name: name
            attributes:
              key:
              - attributes
              - attributes
            id: id
            scopes:
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            type: type
            uri: uri
            icon_uri: icon_uri
          id: id
          scopes:
          - displayName: displayName
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - null
            - null
            id: id
            iconUri: iconUri
          - displayName: displayName
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - null
            - null
            id: id
            iconUri: iconUri
          allowRemoteResourceManagement: true
          policyEnforcementMode: "{}"
          decisionStrategy: "{}"
        access:
          key: true
        authorizationServicesEnabled: true
        origin: origin
        description: description
        alwaysDisplayInConsole: true
        serviceAccountsEnabled: true
        secret: secret
        consentRequired: true
        useTemplateConfig: true
        enabled: true
        clientAuthenticatorType: clientAuthenticatorType
        notBefore: 4
        surrogateAuthRequired: true
        frontchannelLogout: true
        protocol: protocol
        defaultClientScopes:
        - defaultClientScopes
        - defaultClientScopes
        bearerOnly: true
        nodeReRegistrationTimeout: 7
        id: id
        adminUrl: adminUrl
        useTemplateScope: true
        clientId: clientId
        registrationAccessToken: registrationAccessToken
        useTemplateMappers: true
        directGrantsOnly: true
        protocolMappers:
        - protocol: protocol
          protocolMapper: protocolMapper
          name: name
          id: id
          consentText: consentText
          consentRequired: true
          config:
            key: config
        - protocol: protocol
          protocolMapper: protocolMapper
          name: name
          id: id
          consentText: consentText
          consentRequired: true
          config:
            key: config
        clientTemplate: clientTemplate
        redirectUris:
        - redirectUris
        - redirectUris
        oauth2DeviceAuthorizationGrantEnabled: true
        fullScopeAllowed: true
        rootUrl: rootUrl
        implicitFlowEnabled: true
        directAccessGrantsEnabled: true
        baseUrl: baseUrl
        defaultRoles:
        - defaultRoles
        - defaultRoles
        authenticationFlowBindingOverrides:
          key: authenticationFlowBindingOverrides
        name: name
        claims:
          website: true
          address: true
          gender: true
          phone: true
          profile: true
          name: true
          locale: true
          picture: true
          email: true
          username: true
        standardFlowEnabled: true
        webOrigins:
        - webOrigins
        - webOrigins
        attributes:
          key: attributes
      properties:
        id:
          type: string
        clientId:
          type: string
        description:
          type: string
        rootUrl:
          type: string
        adminUrl:
          type: string
        baseUrl:
          type: string
        surrogateAuthRequired:
          type: boolean
        enabled:
          type: boolean
        alwaysDisplayInConsole:
          type: boolean
        clientAuthenticatorType:
          type: string
        secret:
          type: string
        registrationAccessToken:
          type: string
        defaultRoles:
          items:
            type: string
          type: array
        redirectUris:
          items:
            type: string
          type: array
        webOrigins:
          items:
            type: string
          type: array
        notBefore:
          format: int32
          type: integer
        bearerOnly:
          type: boolean
        consentRequired:
          type: boolean
        standardFlowEnabled:
          type: boolean
        implicitFlowEnabled:
          type: boolean
        directAccessGrantsEnabled:
          type: boolean
        serviceAccountsEnabled:
          type: boolean
        oauth2DeviceAuthorizationGrantEnabled:
          type: boolean
        authorizationServicesEnabled:
          type: boolean
        directGrantsOnly:
          type: boolean
        publicClient:
          type: boolean
        frontchannelLogout:
          type: boolean
        protocol:
          type: string
        attributes:
          additionalProperties:
            type: string
          type: object
        authenticationFlowBindingOverrides:
          additionalProperties:
            type: string
          type: object
        fullScopeAllowed:
          type: boolean
        nodeReRegistrationTimeout:
          format: int32
          type: integer
        registeredNodes:
          additionalProperties:
            format: int32
            type: integer
          type: object
        protocolMappers:
          items:
            $ref: '#/components/schemas/ProtocolMapperRepresentation'
          type: array
        clientTemplate:
          type: string
        useTemplateConfig:
          type: boolean
        useTemplateScope:
          type: boolean
        useTemplateMappers:
          type: boolean
        defaultClientScopes:
          items:
            type: string
          type: array
        optionalClientScopes:
          items:
            type: string
          type: array
        authorizationSettings:
          $ref: '#/components/schemas/ResourceServerRepresentation'
        access:
          additionalProperties:
            type: boolean
          type: object
        origin:
          type: string
        name:
          type: string
        claims:
          $ref: '#/components/schemas/ApplicationRepresentationClaims'
      type: object
    ApplicationRepresentationClaims:
      example:
        website: true
        address: true
        gender: true
        phone: true
        profile: true
        name: true
        locale: true
        picture: true
        email: true
        username: true
      properties:
        name:
          type: boolean
        username:
          type: boolean
        profile:
          type: boolean
        picture:
          type: boolean
        website:
          type: boolean
        email:
          type: boolean
        gender:
          type: boolean
        locale:
          type: boolean
        address:
          type: boolean
        phone:
          type: boolean
      type: object
    AuthDetailsRepresentation:
      example:
        realmId: realmId
        clientId: clientId
        ipAddress: ipAddress
        userId: userId
      properties:
        realmId:
          type: string
        clientId:
          type: string
        userId:
          type: string
        ipAddress:
          type: string
      type: object
    AuthenticationExecutionExportRepresentation:
      example:
        authenticatorConfig: authenticatorConfig
        authenticatorFlow: true
        userSetupAllowed: true
        requirement: requirement
        priority: 4
        flowAlias: flowAlias
        authenticator: authenticator
        autheticatorFlow: true
      properties:
        authenticatorConfig:
          type: string
        authenticator:
          type: string
        authenticatorFlow:
          type: boolean
        requirement:
          type: string
        priority:
          format: int32
          type: integer
        autheticatorFlow:
          type: boolean
        flowAlias:
          type: string
        userSetupAllowed:
          type: boolean
      type: object
    AuthenticationExecutionInfoRepresentation:
      example:
        authenticationFlow: true
        level: 0
        displayName: displayName
        description: description
        index: 6
        requirement: requirement
        requirementChoices:
        - requirementChoices
        - requirementChoices
        providerId: providerId
        alias: alias
        id: id
        authenticationConfig: authenticationConfig
        flowId: flowId
        configurable: true
      properties:
        id:
          type: string
        requirement:
          type: string
        displayName:
          type: string
        alias:
          type: string
        description:
          type: string
        requirementChoices:
          items:
            type: string
          type: array
        configurable:
          type: boolean
        authenticationFlow:
          type: boolean
        providerId:
          type: string
        authenticationConfig:
          type: string
        flowId:
          type: string
        level:
          format: int32
          type: integer
        index:
          format: int32
          type: integer
      type: object
    AuthenticationExecutionRepresentation:
      example:
        authenticatorConfig: authenticatorConfig
        authenticatorFlow: true
        requirement: requirement
        id: id
        priority: 0
        parentFlow: parentFlow
        authenticator: authenticator
        flowId: flowId
        autheticatorFlow: true
      properties:
        authenticatorConfig:
          type: string
        authenticator:
          type: string
        authenticatorFlow:
          type: boolean
        requirement:
          type: string
        priority:
          format: int32
          type: integer
        autheticatorFlow:
          type: boolean
        id:
          type: string
        flowId:
          type: string
        parentFlow:
          type: string
      type: object
    AuthenticationFlowRepresentation:
      example:
        authenticationExecutions:
        - authenticatorConfig: authenticatorConfig
          authenticatorFlow: true
          userSetupAllowed: true
          requirement: requirement
          priority: 4
          flowAlias: flowAlias
          authenticator: authenticator
          autheticatorFlow: true
        - authenticatorConfig: authenticatorConfig
          authenticatorFlow: true
          userSetupAllowed: true
          requirement: requirement
          priority: 4
          flowAlias: flowAlias
          authenticator: authenticator
          autheticatorFlow: true
        providerId: providerId
        topLevel: true
        builtIn: true
        alias: alias
        description: description
        id: id
      properties:
        id:
          type: string
        alias:
          type: string
        description:
          type: string
        providerId:
          type: string
        topLevel:
          type: boolean
        builtIn:
          type: boolean
        authenticationExecutions:
          items:
            $ref: '#/components/schemas/AuthenticationExecutionExportRepresentation'
          type: array
      type: object
    AuthenticatorConfigInfoRepresentation:
      example:
        helpText: helpText
        providerId: providerId
        name: name
        properties:
        - helpText: helpText
          defaultValue: "{}"
          name: name
          options:
          - options
          - options
          readOnly: true
          label: label
          secret: true
          type: type
          required: true
        - helpText: helpText
          defaultValue: "{}"
          name: name
          options:
          - options
          - options
          readOnly: true
          label: label
          secret: true
          type: type
          required: true
      properties:
        name:
          type: string
        providerId:
          type: string
        helpText:
          type: string
        properties:
          items:
            $ref: '#/components/schemas/ConfigPropertyRepresentation'
          type: array
      type: object
    AuthenticatorConfigRepresentation:
      example:
        alias: alias
        id: id
        config:
          key: config
      properties:
        id:
          type: string
        alias:
          type: string
        config:
          additionalProperties:
            type: string
          type: object
      type: object
    Authorization:
      example:
        permissions:
        - claims:
            key:
            - claims
            - claims
          rsid: rsid
          scopes:
          - scopes
          - scopes
          rsname: rsname
        - claims:
            key:
            - claims
            - claims
          rsid: rsid
          scopes:
          - scopes
          - scopes
          rsname: rsname
      properties:
        permissions:
          items:
            $ref: '#/components/schemas/Permission'
          type: array
      type: object
    CertificateRepresentation:
      example:
        privateKey: privateKey
        kid: kid
        certificate: certificate
        publicKey: publicKey
      properties:
        privateKey:
          type: string
        publicKey:
          type: string
        certificate:
          type: string
        kid:
          type: string
      type: object
    ClaimRepresentation:
      properties:
        name:
          type: boolean
        username:
          type: boolean
        profile:
          type: boolean
        picture:
          type: boolean
        website:
          type: boolean
        email:
          type: boolean
        gender:
          type: boolean
        locale:
          type: boolean
        address:
          type: boolean
        phone:
          type: boolean
      type: object
    ClientInitialAccessCreatePresentation:
      example:
        count: 6
        expiration: 0
      properties:
        expiration:
          format: int32
          type: integer
        count:
          format: int32
          type: integer
      type: object
    ClientInitialAccessPresentation:
      example:
        count: 1
        expiration: 6
        id: id
        remainingCount: 5
        token: token
        timestamp: 0
      properties:
        id:
          type: string
        token:
          type: string
        timestamp:
          format: int32
          type: integer
        expiration:
          format: int32
          type: integer
        count:
          format: int32
          type: integer
        remainingCount:
          format: int32
          type: integer
      type: object
    ClientMappingsRepresentation:
      example:
        mappings:
        - composites:
            application:
              key:
              - application
              - application
            client:
              key:
              - client
              - client
            realm:
            - realm
            - realm
          clientRole: true
          composite: true
          name: name
          description: description
          attributes:
            key:
            - attributes
            - attributes
          id: id
          scopeParamRequired: true
          containerId: containerId
        - composites:
            application:
              key:
              - application
              - application
            client:
              key:
              - client
              - client
            realm:
            - realm
            - realm
          clientRole: true
          composite: true
          name: name
          description: description
          attributes:
            key:
            - attributes
            - attributes
          id: id
          scopeParamRequired: true
          containerId: containerId
        client: client
        id: id
      properties:
        id:
          type: string
        client:
          type: string
        mappings:
          items:
            $ref: '#/components/schemas/RoleRepresentation'
          type: array
      type: object
    ClientPoliciesRepresentation:
      example:
        policies:
        - name: name
          profiles:
          - profiles
          - profiles
          description: description
          conditions:
          - condition: condition
            configuration:
            - "{}"
            - "{}"
          - condition: condition
            configuration:
            - "{}"
            - "{}"
          enabled: true
        - name: name
          profiles:
          - profiles
          - profiles
          description: description
          conditions:
          - condition: condition
            configuration:
            - "{}"
            - "{}"
          - condition: condition
            configuration:
            - "{}"
            - "{}"
          enabled: true
      properties:
        policies:
          items:
            $ref: '#/components/schemas/ClientPolicyRepresentation'
          type: array
      type: object
    ClientPolicyConditionRepresentation:
      example:
        condition: condition
        configuration:
        - "{}"
        - "{}"
      properties:
        condition:
          type: string
        configuration:
          items:
            type: object
          type: array
      type: object
    ClientPolicyExecutorRepresentation:
      example:
        configuration:
        - "{}"
        - "{}"
        executor: executor
      properties:
        executor:
          type: string
        configuration:
          items:
            type: object
          type: array
      type: object
    ClientPolicyRepresentation:
      example:
        name: name
        profiles:
        - profiles
        - profiles
        description: description
        conditions:
        - condition: condition
          configuration:
          - "{}"
          - "{}"
        - condition: condition
          configuration:
          - "{}"
          - "{}"
        enabled: true
      properties:
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        conditions:
          items:
            $ref: '#/components/schemas/ClientPolicyConditionRepresentation'
          type: array
        profiles:
          items:
            type: string
          type: array
      type: object
    ClientProfileRepresentation:
      example:
        name: name
        description: description
        executors:
        - configuration:
          - "{}"
          - "{}"
          executor: executor
        - configuration:
          - "{}"
          - "{}"
          executor: executor
      properties:
        name:
          type: string
        description:
          type: string
        executors:
          items:
            $ref: '#/components/schemas/ClientPolicyExecutorRepresentation'
          type: array
      type: object
    ClientProfilesRepresentation:
      example:
        profiles:
        - name: name
          description: description
          executors:
          - configuration:
            - "{}"
            - "{}"
            executor: executor
          - configuration:
            - "{}"
            - "{}"
            executor: executor
        - name: name
          description: description
          executors:
          - configuration:
            - "{}"
            - "{}"
            executor: executor
          - configuration:
            - "{}"
            - "{}"
            executor: executor
        globalProfiles:
        - name: name
          description: description
          executors:
          - configuration:
            - "{}"
            - "{}"
            executor: executor
          - configuration:
            - "{}"
            - "{}"
            executor: executor
        - name: name
          description: description
          executors:
          - configuration:
            - "{}"
            - "{}"
            executor: executor
          - configuration:
            - "{}"
            - "{}"
            executor: executor
      properties:
        profiles:
          items:
            $ref: '#/components/schemas/ClientProfileRepresentation'
          type: array
        globalProfiles:
          items:
            $ref: '#/components/schemas/ClientProfileRepresentation'
          type: array
      type: object
    ClientRepresentation:
      example:
        optionalClientScopes:
        - optionalClientScopes
        - optionalClientScopes
        publicClient: true
        registeredNodes:
          key: 7
        authorizationSettings:
          clientId: clientId
          name: name
          policies:
          - owner: owner
            policies:
            - policies
            - policies
            resourcesData:
            - null
            - null
            description: description
            resources:
            - resources
            - resources
            type: type
            scopesData:
            - null
            - null
            name: name
            id: id
            scopes:
            - scopes
            - scopes
            logic: "{}"
            decisionStrategy: "{}"
            config:
              key: config
          - owner: owner
            policies:
            - policies
            - policies
            resourcesData:
            - null
            - null
            description: description
            resources:
            - resources
            - resources
            type: type
            scopesData:
            - null
            - null
            name: name
            id: id
            scopes:
            - scopes
            - scopes
            logic: "{}"
            decisionStrategy: "{}"
            config:
              key: config
          resources:
          - owner:
              name: name
              id: id
            uris:
            - uris
            - uris
            scopesUma:
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            ownerManagedAccess: true
            displayName: displayName
            name: name
            attributes:
              key:
              - attributes
              - attributes
            id: id
            scopes:
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            type: type
            uri: uri
            icon_uri: icon_uri
          - owner:
              name: name
              id: id
            uris:
            - uris
            - uris
            scopesUma:
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            ownerManagedAccess: true
            displayName: displayName
            name: name
            attributes:
              key:
              - attributes
              - attributes
            id: id
            scopes:
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            type: type
            uri: uri
            icon_uri: icon_uri
          id: id
          scopes:
          - displayName: displayName
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - null
            - null
            id: id
            iconUri: iconUri
          - displayName: displayName
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - null
            - null
            id: id
            iconUri: iconUri
          allowRemoteResourceManagement: true
          policyEnforcementMode: "{}"
          decisionStrategy: "{}"
        access:
          key: true
        authorizationServicesEnabled: true
        origin: origin
        description: description
        alwaysDisplayInConsole: true
        serviceAccountsEnabled: true
        secret: secret
        consentRequired: true
        useTemplateConfig: true
        enabled: true
        clientAuthenticatorType: clientAuthenticatorType
        notBefore: 3
        surrogateAuthRequired: true
        frontchannelLogout: true
        protocol: protocol
        defaultClientScopes:
        - defaultClientScopes
        - defaultClientScopes
        bearerOnly: true
        nodeReRegistrationTimeout: 3
        id: id
        adminUrl: adminUrl
        useTemplateScope: true
        clientId: clientId
        registrationAccessToken: registrationAccessToken
        useTemplateMappers: true
        directGrantsOnly: true
        protocolMappers:
        - protocol: protocol
          protocolMapper: protocolMapper
          name: name
          id: id
          consentText: consentText
          consentRequired: true
          config:
            key: config
        - protocol: protocol
          protocolMapper: protocolMapper
          name: name
          id: id
          consentText: consentText
          consentRequired: true
          config:
            key: config
        clientTemplate: clientTemplate
        redirectUris:
        - redirectUris
        - redirectUris
        oauth2DeviceAuthorizationGrantEnabled: true
        fullScopeAllowed: true
        rootUrl: rootUrl
        implicitFlowEnabled: true
        directAccessGrantsEnabled: true
        baseUrl: baseUrl
        name: name
        defaultRoles:
        - defaultRoles
        - defaultRoles
        authenticationFlowBindingOverrides:
          key: authenticationFlowBindingOverrides
        standardFlowEnabled: true
        webOrigins:
        - webOrigins
        - webOrigins
        attributes:
          key: attributes
      properties:
        id:
          type: string
        clientId:
          type: string
        name:
          type: string
        description:
          type: string
        rootUrl:
          type: string
        adminUrl:
          type: string
        baseUrl:
          type: string
        surrogateAuthRequired:
          type: boolean
        enabled:
          type: boolean
        alwaysDisplayInConsole:
          type: boolean
        clientAuthenticatorType:
          type: string
        secret:
          type: string
        registrationAccessToken:
          type: string
        defaultRoles:
          items:
            type: string
          type: array
        redirectUris:
          items:
            type: string
          type: array
        webOrigins:
          items:
            type: string
          type: array
        notBefore:
          format: int32
          type: integer
        bearerOnly:
          type: boolean
        consentRequired:
          type: boolean
        standardFlowEnabled:
          type: boolean
        implicitFlowEnabled:
          type: boolean
        directAccessGrantsEnabled:
          type: boolean
        serviceAccountsEnabled:
          type: boolean
        oauth2DeviceAuthorizationGrantEnabled:
          type: boolean
        authorizationServicesEnabled:
          type: boolean
        directGrantsOnly:
          type: boolean
        publicClient:
          type: boolean
        frontchannelLogout:
          type: boolean
        protocol:
          type: string
        attributes:
          additionalProperties:
            type: string
          type: object
        authenticationFlowBindingOverrides:
          additionalProperties:
            type: string
          type: object
        fullScopeAllowed:
          type: boolean
        nodeReRegistrationTimeout:
          format: int32
          type: integer
        registeredNodes:
          additionalProperties:
            format: int32
            type: integer
          type: object
        protocolMappers:
          items:
            $ref: '#/components/schemas/ProtocolMapperRepresentation'
          type: array
        clientTemplate:
          type: string
        useTemplateConfig:
          type: boolean
        useTemplateScope:
          type: boolean
        useTemplateMappers:
          type: boolean
        defaultClientScopes:
          items:
            type: string
          type: array
        optionalClientScopes:
          items:
            type: string
          type: array
        authorizationSettings:
          $ref: '#/components/schemas/ResourceServerRepresentation'
        access:
          additionalProperties:
            type: boolean
          type: object
        origin:
          type: string
      type: object
    ClientScopeRepresentation:
      example:
        protocol: protocol
        name: name
        description: description
        attributes:
          key: attributes
        protocolMappers:
        - protocol: protocol
          protocolMapper: protocolMapper
          name: name
          id: id
          consentText: consentText
          consentRequired: true
          config:
            key: config
        - protocol: protocol
          protocolMapper: protocolMapper
          name: name
          id: id
          consentText: consentText
          consentRequired: true
          config:
            key: config
        id: id
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        protocol:
          type: string
        attributes:
          additionalProperties:
            type: string
          type: object
        protocolMappers:
          items:
            $ref: '#/components/schemas/ProtocolMapperRepresentation'
          type: array
      type: object
    ClientTemplateRepresentation:
      example:
        publicClient: true
        description: description
        serviceAccountsEnabled: true
        protocolMappers:
        - protocol: protocol
          protocolMapper: protocolMapper
          name: name
          id: id
          consentText: consentText
          consentRequired: true
          config:
            key: config
        - protocol: protocol
          protocolMapper: protocolMapper
          name: name
          id: id
          consentText: consentText
          consentRequired: true
          config:
            key: config
        consentRequired: true
        fullScopeAllowed: true
        implicitFlowEnabled: true
        directAccessGrantsEnabled: true
        frontchannelLogout: true
        protocol: protocol
        bearerOnly: true
        name: name
        standardFlowEnabled: true
        attributes:
          key: attributes
        id: id
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        protocol:
          type: string
        fullScopeAllowed:
          type: boolean
        bearerOnly:
          type: boolean
        consentRequired:
          type: boolean
        standardFlowEnabled:
          type: boolean
        implicitFlowEnabled:
          type: boolean
        directAccessGrantsEnabled:
          type: boolean
        serviceAccountsEnabled:
          type: boolean
        publicClient:
          type: boolean
        frontchannelLogout:
          type: boolean
        attributes:
          additionalProperties:
            type: string
          type: object
        protocolMappers:
          items:
            $ref: '#/components/schemas/ProtocolMapperRepresentation'
          type: array
      type: object
    ComponentExportRepresentation:
      properties:
        id:
          type: string
        name:
          type: string
        providerId:
          type: string
        subType:
          type: string
        subComponents:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
          type: object
        config:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
          type: object
      type: object
    ComponentRepresentation:
      example:
        providerId: providerId
        name: name
        subType: subType
        id: id
        config:
          key:
          - config
          - config
        providerType: providerType
        parentId: parentId
      properties:
        id:
          type: string
        name:
          type: string
        providerId:
          type: string
        providerType:
          type: string
        parentId:
          type: string
        subType:
          type: string
        config:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
          type: object
      type: object
    ComponentTypeRepresentation:
      example:
        metadata:
          key: "{}"
        helpText: helpText
        id: id
        properties:
        - helpText: helpText
          defaultValue: "{}"
          name: name
          options:
          - options
          - options
          readOnly: true
          label: label
          secret: true
          type: type
          required: true
        - helpText: helpText
          defaultValue: "{}"
          name: name
          options:
          - options
          - options
          readOnly: true
          label: label
          secret: true
          type: type
          required: true
      properties:
        id:
          type: string
        helpText:
          type: string
        properties:
          items:
            $ref: '#/components/schemas/ConfigPropertyRepresentation'
          type: array
        metadata:
          additionalProperties:
            type: object
          type: object
      type: object
    Composites:
      example:
        application:
          key:
          - application
          - application
        client:
          key:
          - client
          - client
        realm:
        - realm
        - realm
      properties:
        realm:
          items:
            type: string
          type: array
          uniqueItems: true
        client:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
          type: object
        application:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
          type: object
      type: object
    ConfigPropertyRepresentation:
      example:
        helpText: helpText
        defaultValue: "{}"
        name: name
        options:
        - options
        - options
        readOnly: true
        label: label
        secret: true
        type: type
        required: true
      properties:
        name:
          type: string
        label:
          type: string
        helpText:
          type: string
        type:
          type: string
        defaultValue:
          $ref: '#/components/schemas/oas_any_type_not_mapped'
        options:
          items:
            type: string
          type: array
        secret:
          type: boolean
        required:
          type: boolean
        readOnly:
          type: boolean
      type: object
    Confirmation:
      example:
        x5t#S256: x5t#S256
        jkt: jkt
      properties:
        x5t#S256:
          type: string
        jkt:
          type: string
      type: object
    CredentialRepresentation:
      example:
        userLabel: userLabel
        temporary: true
        period: 0
        hashedSaltedValue: hashedSaltedValue
        salt: salt
        hashIterations: 0
        counter: 7
        type: type
        priority: 7
        secretData: secretData
        createdDate: 3
        digits: 6
        id: id
        credentialData: credentialData
        value: value
        device: device
        config:
          key: ""
        algorithm: algorithm
      properties:
        id:
          type: string
        type:
          type: string
        userLabel:
          type: string
        createdDate:
          format: int64
          type: integer
        secretData:
          type: string
        credentialData:
          type: string
        priority:
          format: int32
          type: integer
        value:
          type: string
        temporary:
          type: boolean
        device:
          type: string
        hashedSaltedValue:
          type: string
        salt:
          type: string
        hashIterations:
          format: int32
          type: integer
        counter:
          format: int32
          type: integer
        algorithm:
          type: string
        digits:
          format: int32
          type: integer
        period:
          format: int32
          type: integer
        config:
          additionalProperties: true
          type: object
      type: object
    DecisionStrategy:
      type: object
    EnforcementMode:
      type: object
    EventRepresentation:
      example:
        realmId: realmId
        clientId: clientId
        ipAddress: ipAddress
        details:
          key: details
        time: 0
        sessionId: sessionId
        type: type
        error: error
        userId: userId
      properties:
        time:
          format: int64
          type: integer
        type:
          type: string
        realmId:
          type: string
        clientId:
          type: string
        userId:
          type: string
        sessionId:
          type: string
        ipAddress:
          type: string
        error:
          type: string
        details:
          additionalProperties:
            type: string
          type: object
      type: object
    FederatedIdentityRepresentation:
      example:
        userName: userName
        userId: userId
        identityProvider: identityProvider
      properties:
        identityProvider:
          type: string
        userId:
          type: string
        userName:
          type: string
      type: object
    GlobalRequestResult:
      example:
        successRequests:
        - successRequests
        - successRequests
        failedRequests:
        - failedRequests
        - failedRequests
      properties:
        successRequests:
          items:
            type: string
          type: array
        failedRequests:
          items:
            type: string
          type: array
      type: object
    GroupRepresentation:
      example:
        path: path
        realmRoles:
        - realmRoles
        - realmRoles
        access:
          key: true
        name: name
        subGroups:
        - null
        - null
        attributes:
          key:
          - attributes
          - attributes
        id: id
        parentId: parentId
        clientRoles:
          key:
          - clientRoles
          - clientRoles
        subGroupCount: 6
      properties:
        id:
          type: string
        name:
          type: string
        path:
          type: string
        parentId:
          type: string
        subGroupCount:
          format: int64
          type: integer
        subGroups:
          items:
            $ref: '#/components/schemas/GroupRepresentation'
          type: array
        attributes:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
          type: object
        realmRoles:
          items:
            type: string
          type: array
        clientRoles:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
          type: object
        access:
          additionalProperties:
            type: boolean
          type: object
      type: object
    IDToken:
      example:
        at_hash: at_hash
        sub: sub
        zoneinfo: zoneinfo
        birthdate: birthdate
        gender: gender
        iss: iss
        typ: typ
        preferred_username: preferred_username
        authTime: 2
        locale: locale
        sid: sid
        acr: acr
        updated_at: 5
        azp: azp
        auth_time: 5
        nickname: nickname
        exp: 0
        session_state: session_state
        iat: 1
        jti: jti
        email: email
        website: website
        email_verified: true
        address:
          street_address: street_address
          country: country
          formatted: formatted
          locality: locality
          region: region
          postal_code: postal_code
        profile: profile
        otherClaims:
          key: "{}"
        phone_number_verified: true
        given_name: given_name
        middle_name: middle_name
        nonce: nonce
        picture: picture
        c_hash: c_hash
        s_hash: s_hash
        nbf: 6
        claims_locales: claims_locales
        name: name
        phone_number: phone_number
        family_name: family_name
      properties:
        jti:
          type: string
        exp:
          format: int64
          type: integer
        nbf:
          format: int64
          type: integer
        iat:
          format: int64
          type: integer
        iss:
          type: string
        sub:
          type: string
        typ:
          type: string
        azp:
          type: string
        otherClaims:
          additionalProperties:
            type: object
          type: object
        nonce:
          type: string
        auth_time:
          format: int64
          type: integer
        session_state:
          type: string
        at_hash:
          type: string
        c_hash:
          type: string
        name:
          type: string
        given_name:
          type: string
        family_name:
          type: string
        middle_name:
          type: string
        nickname:
          type: string
        preferred_username:
          type: string
        profile:
          type: string
        picture:
          type: string
        website:
          type: string
        email:
          type: string
        email_verified:
          type: boolean
        gender:
          type: string
        birthdate:
          type: string
        zoneinfo:
          type: string
        locale:
          type: string
        phone_number:
          type: string
        phone_number_verified:
          type: boolean
        address:
          $ref: '#/components/schemas/AddressClaimSet'
        updated_at:
          format: int64
          type: integer
        claims_locales:
          type: string
        acr:
          type: string
        s_hash:
          type: string
        authTime:
          format: int32
          type: integer
        sid:
          type: string
      type: object
    IdentityProviderMapperRepresentation:
      example:
        identityProviderAlias: identityProviderAlias
        name: name
        id: id
        config:
          key: config
        identityProviderMapper: identityProviderMapper
      properties:
        id:
          type: string
        name:
          type: string
        identityProviderAlias:
          type: string
        identityProviderMapper:
          type: string
        config:
          additionalProperties:
            type: string
          type: object
      type: object
    IdentityProviderMapperTypeRepresentation:
      properties:
        id:
          type: string
        name:
          type: string
        category:
          type: string
        helpText:
          type: string
        properties:
          items:
            $ref: '#/components/schemas/ConfigPropertyRepresentation'
          type: array
      type: object
    IdentityProviderRepresentation:
      example:
        addReadTokenRoleOnCreate: true
        displayName: displayName
        trustEmail: true
        linkOnly: true
        enabled: true
        storeToken: true
        internalId: internalId
        firstBrokerLoginFlowAlias: firstBrokerLoginFlowAlias
        updateProfileFirstLoginMode: updateProfileFirstLoginMode
        providerId: providerId
        postBrokerLoginFlowAlias: postBrokerLoginFlowAlias
        alias: alias
        authenticateByDefault: true
        updateProfileFirstLogin: true
        config:
          key: config
      properties:
        alias:
          type: string
        displayName:
          type: string
        internalId:
          type: string
        providerId:
          type: string
        enabled:
          type: boolean
        updateProfileFirstLoginMode:
          type: string
        trustEmail:
          type: boolean
        storeToken:
          type: boolean
        addReadTokenRoleOnCreate:
          type: boolean
        authenticateByDefault:
          type: boolean
        linkOnly:
          type: boolean
        firstBrokerLoginFlowAlias:
          type: string
        postBrokerLoginFlowAlias:
          type: string
        config:
          additionalProperties:
            type: string
          type: object
        updateProfileFirstLogin:
          type: boolean
      type: object
    InstallationAdapterConfig:
      properties:
        realm:
          type: string
        realm-public-key:
          type: string
        auth-server-url:
          type: string
        ssl-required:
          type: string
        bearer-only:
          type: boolean
        resource:
          type: string
        public-client:
          type: boolean
        verify-token-audience:
          type: boolean
        credentials:
          additionalProperties:
            type: object
          type: object
        use-resource-role-mappings:
          type: boolean
        confidential-port:
          format: int32
          type: integer
        policy-enforcer:
          $ref: '#/components/schemas/PolicyEnforcerConfig'
      type: object
    KeyMetadataRepresentation:
      example:
        providerId: providerId
        use: "{}"
        kid: kid
        certificate: certificate
        providerPriority: 0
        publicKey: publicKey
        type: type
        status: status
        algorithm: algorithm
        validTo: 6
      properties:
        providerId:
          type: string
        providerPriority:
          format: int64
          type: integer
        kid:
          type: string
        status:
          type: string
        type:
          type: string
        algorithm:
          type: string
        publicKey:
          type: string
        certificate:
          type: string
        use:
          type: object
        validTo:
          format: int64
          type: integer
      type: object
    KeyStoreConfig:
      example:
        storePassword: storePassword
        keyAlias: keyAlias
        keyPassword: keyPassword
        format: format
        realmCertificate: true
        realmAlias: realmAlias
      properties:
        realmCertificate:
          type: boolean
        storePassword:
          type: string
        keyPassword:
          type: string
        keyAlias:
          type: string
        realmAlias:
          type: string
        format:
          type: string
      type: object
    KeyUse:
      type: object
    KeysMetadataRepresentation:
      example:
        keys:
        - providerId: providerId
          use: "{}"
          kid: kid
          certificate: certificate
          providerPriority: 0
          publicKey: publicKey
          type: type
          status: status
          algorithm: algorithm
          validTo: 6
        - providerId: providerId
          use: "{}"
          kid: kid
          certificate: certificate
          providerPriority: 0
          publicKey: publicKey
          type: type
          status: status
          algorithm: algorithm
          validTo: 6
        active:
          key: active
      properties:
        active:
          additionalProperties:
            type: string
          type: object
        keys:
          items:
            $ref: '#/components/schemas/KeyMetadataRepresentation'
          type: array
      type: object
    Logic:
      type: object
    ManagementPermissionReference:
      example:
        scopePermissions:
          key: scopePermissions
        resource: resource
        enabled: true
      properties:
        enabled:
          type: boolean
        resource:
          type: string
        scopePermissions:
          additionalProperties:
            type: string
          type: object
      type: object
    MappingsRepresentation:
      example:
        realmMappings:
        - composites:
            application:
              key:
              - application
              - application
            client:
              key:
              - client
              - client
            realm:
            - realm
            - realm
          clientRole: true
          composite: true
          name: name
          description: description
          attributes:
            key:
            - attributes
            - attributes
          id: id
          scopeParamRequired: true
          containerId: containerId
        - composites:
            application:
              key:
              - application
              - application
            client:
              key:
              - client
              - client
            realm:
            - realm
            - realm
          clientRole: true
          composite: true
          name: name
          description: description
          attributes:
            key:
            - attributes
            - attributes
          id: id
          scopeParamRequired: true
          containerId: containerId
        clientMappings:
          key:
            mappings:
            - composites:
                application:
                  key:
                  - application
                  - application
                client:
                  key:
                  - client
                  - client
                realm:
                - realm
                - realm
              clientRole: true
              composite: true
              name: name
              description: description
              attributes:
                key:
                - attributes
                - attributes
              id: id
              scopeParamRequired: true
              containerId: containerId
            - composites:
                application:
                  key:
                  - application
                  - application
                client:
                  key:
                  - client
                  - client
                realm:
                - realm
                - realm
              clientRole: true
              composite: true
              name: name
              description: description
              attributes:
                key:
                - attributes
                - attributes
              id: id
              scopeParamRequired: true
              containerId: containerId
            client: client
            id: id
      properties:
        realmMappings:
          items:
            $ref: '#/components/schemas/RoleRepresentation'
          type: array
        clientMappings:
          additionalProperties:
            $ref: '#/components/schemas/ClientMappingsRepresentation'
          type: object
      type: object
    MethodConfig:
      properties:
        method:
          type: string
        scopes:
          items:
            type: string
          type: array
        scopes-enforcement-mode:
          type: object
      type: object
    OAuthClientRepresentation:
      example:
        optionalClientScopes:
        - optionalClientScopes
        - optionalClientScopes
        publicClient: true
        registeredNodes:
          key: 0
        authorizationSettings:
          clientId: clientId
          name: name
          policies:
          - owner: owner
            policies:
            - policies
            - policies
            resourcesData:
            - null
            - null
            description: description
            resources:
            - resources
            - resources
            type: type
            scopesData:
            - null
            - null
            name: name
            id: id
            scopes:
            - scopes
            - scopes
            logic: "{}"
            decisionStrategy: "{}"
            config:
              key: config
          - owner: owner
            policies:
            - policies
            - policies
            resourcesData:
            - null
            - null
            description: description
            resources:
            - resources
            - resources
            type: type
            scopesData:
            - null
            - null
            name: name
            id: id
            scopes:
            - scopes
            - scopes
            logic: "{}"
            decisionStrategy: "{}"
            config:
              key: config
          resources:
          - owner:
              name: name
              id: id
            uris:
            - uris
            - uris
            scopesUma:
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            ownerManagedAccess: true
            displayName: displayName
            name: name
            attributes:
              key:
              - attributes
              - attributes
            id: id
            scopes:
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            type: type
            uri: uri
            icon_uri: icon_uri
          - owner:
              name: name
              id: id
            uris:
            - uris
            - uris
            scopesUma:
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            ownerManagedAccess: true
            displayName: displayName
            name: name
            attributes:
              key:
              - attributes
              - attributes
            id: id
            scopes:
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            type: type
            uri: uri
            icon_uri: icon_uri
          id: id
          scopes:
          - displayName: displayName
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - null
            - null
            id: id
            iconUri: iconUri
          - displayName: displayName
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - null
            - null
            id: id
            iconUri: iconUri
          allowRemoteResourceManagement: true
          policyEnforcementMode: "{}"
          decisionStrategy: "{}"
        access:
          key: true
        authorizationServicesEnabled: true
        origin: origin
        description: description
        alwaysDisplayInConsole: true
        serviceAccountsEnabled: true
        secret: secret
        consentRequired: true
        useTemplateConfig: true
        enabled: true
        clientAuthenticatorType: clientAuthenticatorType
        notBefore: 0
        surrogateAuthRequired: true
        frontchannelLogout: true
        protocol: protocol
        defaultClientScopes:
        - defaultClientScopes
        - defaultClientScopes
        bearerOnly: true
        nodeReRegistrationTimeout: 9
        id: id
        adminUrl: adminUrl
        useTemplateScope: true
        clientId: clientId
        registrationAccessToken: registrationAccessToken
        useTemplateMappers: true
        directGrantsOnly: true
        protocolMappers:
        - protocol: protocol
          protocolMapper: protocolMapper
          name: name
          id: id
          consentText: consentText
          consentRequired: true
          config:
            key: config
        - protocol: protocol
          protocolMapper: protocolMapper
          name: name
          id: id
          consentText: consentText
          consentRequired: true
          config:
            key: config
        clientTemplate: clientTemplate
        redirectUris:
        - redirectUris
        - redirectUris
        oauth2DeviceAuthorizationGrantEnabled: true
        fullScopeAllowed: true
        rootUrl: rootUrl
        implicitFlowEnabled: true
        directAccessGrantsEnabled: true
        baseUrl: baseUrl
        defaultRoles:
        - defaultRoles
        - defaultRoles
        authenticationFlowBindingOverrides:
          key: authenticationFlowBindingOverrides
        name: name
        claims:
          website: true
          address: true
          gender: true
          phone: true
          profile: true
          name: true
          locale: true
          picture: true
          email: true
          username: true
        standardFlowEnabled: true
        webOrigins:
        - webOrigins
        - webOrigins
        attributes:
          key: attributes
      properties:
        id:
          type: string
        clientId:
          type: string
        description:
          type: string
        rootUrl:
          type: string
        adminUrl:
          type: string
        baseUrl:
          type: string
        surrogateAuthRequired:
          type: boolean
        enabled:
          type: boolean
        alwaysDisplayInConsole:
          type: boolean
        clientAuthenticatorType:
          type: string
        secret:
          type: string
        registrationAccessToken:
          type: string
        defaultRoles:
          items:
            type: string
          type: array
        redirectUris:
          items:
            type: string
          type: array
        webOrigins:
          items:
            type: string
          type: array
        notBefore:
          format: int32
          type: integer
        bearerOnly:
          type: boolean
        consentRequired:
          type: boolean
        standardFlowEnabled:
          type: boolean
        implicitFlowEnabled:
          type: boolean
        directAccessGrantsEnabled:
          type: boolean
        serviceAccountsEnabled:
          type: boolean
        oauth2DeviceAuthorizationGrantEnabled:
          type: boolean
        authorizationServicesEnabled:
          type: boolean
        directGrantsOnly:
          type: boolean
        publicClient:
          type: boolean
        frontchannelLogout:
          type: boolean
        protocol:
          type: string
        attributes:
          additionalProperties:
            type: string
          type: object
        authenticationFlowBindingOverrides:
          additionalProperties:
            type: string
          type: object
        fullScopeAllowed:
          type: boolean
        nodeReRegistrationTimeout:
          format: int32
          type: integer
        registeredNodes:
          additionalProperties:
            format: int32
            type: integer
          type: object
        protocolMappers:
          items:
            $ref: '#/components/schemas/ProtocolMapperRepresentation'
          type: array
        clientTemplate:
          type: string
        useTemplateConfig:
          type: boolean
        useTemplateScope:
          type: boolean
        useTemplateMappers:
          type: boolean
        defaultClientScopes:
          items:
            type: string
          type: array
        optionalClientScopes:
          items:
            type: string
          type: array
        authorizationSettings:
          $ref: '#/components/schemas/ResourceServerRepresentation'
        access:
          additionalProperties:
            type: boolean
          type: object
        origin:
          type: string
        name:
          type: string
        claims:
          $ref: '#/components/schemas/ApplicationRepresentationClaims'
      type: object
    PathCacheConfig:
      properties:
        max-entries:
          format: int32
          type: integer
        lifespan:
          format: int64
          type: integer
      type: object
    PathConfig:
      properties:
        name:
          type: string
        type:
          type: string
        path:
          type: string
        methods:
          items:
            $ref: '#/components/schemas/MethodConfig'
          type: array
        scopes:
          items:
            type: string
          type: array
        id:
          type: string
        enforcement-mode:
          type: object
        claim-information-point:
          additionalProperties:
            additionalProperties: true
            type: object
          type: object
        invalidated:
          type: boolean
        staticPath:
          type: boolean
        static:
          type: boolean
      type: object
    PathSegment:
      properties:
        path:
          type: string
        matrixParameters:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
          type: object
      type: object
    Permission:
      example:
        claims:
          key:
          - claims
          - claims
        rsid: rsid
        scopes:
        - scopes
        - scopes
        rsname: rsname
      properties:
        rsid:
          type: string
        rsname:
          type: string
        scopes:
          items:
            type: string
          type: array
          uniqueItems: true
        claims:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
            uniqueItems: true
          type: object
      type: object
    PolicyEnforcementMode:
      type: object
    PolicyEnforcerConfig:
      properties:
        enforcement-mode:
          type: object
        paths:
          items:
            $ref: '#/components/schemas/PathConfig'
          type: array
        path-cache:
          $ref: '#/components/schemas/PathCacheConfig'
        lazy-load-paths:
          type: boolean
        on-deny-redirect-to:
          type: string
        user-managed-access:
          type: object
        claim-information-point:
          additionalProperties:
            additionalProperties: true
            type: object
          type: object
        http-method-as-scope:
          type: boolean
        realm:
          type: string
        auth-server-url:
          type: string
        credentials:
          additionalProperties:
            type: object
          type: object
        resource:
          type: string
      type: object
    PolicyRepresentation:
      example:
        owner: owner
        policies:
        - policies
        - policies
        resourcesData:
        - null
        - null
        description: description
        resources:
        - resources
        - resources
        type: type
        scopesData:
        - null
        - null
        name: name
        id: id
        scopes:
        - scopes
        - scopes
        logic: "{}"
        decisionStrategy: "{}"
        config:
          key: config
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
        policies:
          items:
            type: string
          type: array
          uniqueItems: true
        resources:
          items:
            type: string
          type: array
          uniqueItems: true
        scopes:
          items:
            type: string
          type: array
          uniqueItems: true
        logic:
          type: object
        decisionStrategy:
          type: object
        owner:
          type: string
        resourcesData:
          items:
            $ref: '#/components/schemas/ResourceRepresentation'
          type: array
          uniqueItems: true
        scopesData:
          items:
            $ref: '#/components/schemas/ScopeRepresentation'
          type: array
          uniqueItems: true
        config:
          additionalProperties:
            type: string
          type: object
      type: object
    ProtocolMapperEvaluationRepresentation:
      example:
        protocolMapper: protocolMapper
        containerName: containerName
        containerType: containerType
        mapperId: mapperId
        mapperName: mapperName
        containerId: containerId
      properties:
        mapperId:
          type: string
        mapperName:
          type: string
        containerId:
          type: string
        containerName:
          type: string
        containerType:
          type: string
        protocolMapper:
          type: string
      type: object
    ProtocolMapperRepresentation:
      example:
        protocol: protocol
        protocolMapper: protocolMapper
        name: name
        id: id
        consentText: consentText
        consentRequired: true
        config:
          key: config
      properties:
        id:
          type: string
        name:
          type: string
        protocol:
          type: string
        protocolMapper:
          type: string
        consentRequired:
          type: boolean
        consentText:
          type: string
        config:
          additionalProperties:
            type: string
          type: object
      type: object
    PublishedRealmRepresentation:
      properties:
        realm:
          type: string
        public_key:
          type: string
        token-service:
          type: string
        account-service:
          type: string
        tokens-not-before:
          format: int32
          type: integer
      type: object
    RealmEventsConfigRepresentation:
      example:
        adminEventsDetailsEnabled: true
        enabledEventTypes:
        - enabledEventTypes
        - enabledEventTypes
        eventsEnabled: true
        eventsExpiration: 0
        eventsListeners:
        - eventsListeners
        - eventsListeners
        adminEventsEnabled: true
      properties:
        eventsEnabled:
          type: boolean
        eventsExpiration:
          format: int64
          type: integer
        eventsListeners:
          items:
            type: string
          type: array
        enabledEventTypes:
          items:
            type: string
          type: array
        adminEventsEnabled:
          type: boolean
        adminEventsDetailsEnabled:
          type: boolean
      type: object
    RealmRepresentation:
      example:
        socialProviders:
          key: socialProviders
        otpPolicyLookAheadWindow: 6
        webAuthnPolicyPasswordlessExtraOrigins:
        - webAuthnPolicyPasswordlessExtraOrigins
        - webAuthnPolicyPasswordlessExtraOrigins
        clientProfiles:
          profiles:
          - name: name
            description: description
            executors:
            - configuration:
              - "{}"
              - "{}"
              executor: executor
            - configuration:
              - "{}"
              - "{}"
              executor: executor
          - name: name
            description: description
            executors:
            - configuration:
              - "{}"
              - "{}"
              executor: executor
            - configuration:
              - "{}"
              - "{}"
              executor: executor
          globalProfiles:
          - name: name
            description: description
            executors:
            - configuration:
              - "{}"
              - "{}"
              executor: executor
            - configuration:
              - "{}"
              - "{}"
              executor: executor
          - name: name
            description: description
            executors:
            - configuration:
              - "{}"
              - "{}"
              executor: executor
            - configuration:
              - "{}"
              - "{}"
              executor: executor
        defaultGroups:
        - defaultGroups
        - defaultGroups
        webAuthnPolicyPasswordlessAcceptableAaguids:
        - webAuthnPolicyPasswordlessAcceptableAaguids
        - webAuthnPolicyPasswordlessAcceptableAaguids
        directGrantFlow: directGrantFlow
        publicKey: publicKey
        otpPolicyDigits: 2
        webAuthnPolicySignatureAlgorithms:
        - webAuthnPolicySignatureAlgorithms
        - webAuthnPolicySignatureAlgorithms
        offlineSessionMaxLifespan: 2
        eventsListeners:
        - eventsListeners
        - eventsListeners
        id: id
        clientPolicies:
          policies:
          - name: name
            profiles:
            - profiles
            - profiles
            description: description
            conditions:
            - condition: condition
              configuration:
              - "{}"
              - "{}"
            - condition: condition
              configuration:
              - "{}"
              - "{}"
            enabled: true
          - name: name
            profiles:
            - profiles
            - profiles
            description: description
            conditions:
            - condition: condition
              configuration:
              - "{}"
              - "{}"
            - condition: condition
              configuration:
              - "{}"
              - "{}"
            enabled: true
        ssoSessionIdleTimeoutRememberMe: 7
        adminEventsDetailsEnabled: true
        clientSessionIdleTimeout: 4
        accessCodeLifespanLogin: 7
        quickLoginCheckMilliSeconds: 9
        oAuth2DeviceCodeLifespan: 7
        eventsEnabled: true
        registrationFlow: registrationFlow
        clientAuthenticationFlow: clientAuthenticationFlow
        defaultLocale: defaultLocale
        authenticatorConfig:
        - alias: alias
          id: id
          config:
            key: config
        - alias: alias
          id: id
          config:
            key: config
        defaultSignatureAlgorithm: defaultSignatureAlgorithm
        duplicateEmailsAllowed: true
        accessCodeLifespan: 1
        eventsExpiration: 6
        webAuthnPolicyPasswordlessCreateTimeout: 6
        otpPolicyType: otpPolicyType
        components:
          key:
          - components
          - components
        clients:
        - optionalClientScopes:
          - optionalClientScopes
          - optionalClientScopes
          publicClient: true
          registeredNodes:
            key: 7
          authorizationSettings:
            clientId: clientId
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - owner:
                name: name
                id: id
              uris:
              - uris
              - uris
              scopesUma:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              ownerManagedAccess: true
              displayName: displayName
              name: name
              attributes:
                key:
                - attributes
                - attributes
              id: id
              scopes:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              type: type
              uri: uri
              icon_uri: icon_uri
            - owner:
                name: name
                id: id
              uris:
              - uris
              - uris
              scopesUma:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              ownerManagedAccess: true
              displayName: displayName
              name: name
              attributes:
                key:
                - attributes
                - attributes
              id: id
              scopes:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              type: type
              uri: uri
              icon_uri: icon_uri
            id: id
            scopes:
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            allowRemoteResourceManagement: true
            policyEnforcementMode: "{}"
            decisionStrategy: "{}"
          access:
            key: true
          authorizationServicesEnabled: true
          origin: origin
          description: description
          alwaysDisplayInConsole: true
          serviceAccountsEnabled: true
          secret: secret
          consentRequired: true
          useTemplateConfig: true
          enabled: true
          clientAuthenticatorType: clientAuthenticatorType
          notBefore: 3
          surrogateAuthRequired: true
          frontchannelLogout: true
          protocol: protocol
          defaultClientScopes:
          - defaultClientScopes
          - defaultClientScopes
          bearerOnly: true
          nodeReRegistrationTimeout: 3
          id: id
          adminUrl: adminUrl
          useTemplateScope: true
          clientId: clientId
          registrationAccessToken: registrationAccessToken
          useTemplateMappers: true
          directGrantsOnly: true
          protocolMappers:
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          clientTemplate: clientTemplate
          redirectUris:
          - redirectUris
          - redirectUris
          oauth2DeviceAuthorizationGrantEnabled: true
          fullScopeAllowed: true
          rootUrl: rootUrl
          implicitFlowEnabled: true
          directAccessGrantsEnabled: true
          baseUrl: baseUrl
          name: name
          defaultRoles:
          - defaultRoles
          - defaultRoles
          authenticationFlowBindingOverrides:
            key: authenticationFlowBindingOverrides
          standardFlowEnabled: true
          webOrigins:
          - webOrigins
          - webOrigins
          attributes:
            key: attributes
        - optionalClientScopes:
          - optionalClientScopes
          - optionalClientScopes
          publicClient: true
          registeredNodes:
            key: 7
          authorizationSettings:
            clientId: clientId
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - owner:
                name: name
                id: id
              uris:
              - uris
              - uris
              scopesUma:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              ownerManagedAccess: true
              displayName: displayName
              name: name
              attributes:
                key:
                - attributes
                - attributes
              id: id
              scopes:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              type: type
              uri: uri
              icon_uri: icon_uri
            - owner:
                name: name
                id: id
              uris:
              - uris
              - uris
              scopesUma:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              ownerManagedAccess: true
              displayName: displayName
              name: name
              attributes:
                key:
                - attributes
                - attributes
              id: id
              scopes:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              type: type
              uri: uri
              icon_uri: icon_uri
            id: id
            scopes:
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            allowRemoteResourceManagement: true
            policyEnforcementMode: "{}"
            decisionStrategy: "{}"
          access:
            key: true
          authorizationServicesEnabled: true
          origin: origin
          description: description
          alwaysDisplayInConsole: true
          serviceAccountsEnabled: true
          secret: secret
          consentRequired: true
          useTemplateConfig: true
          enabled: true
          clientAuthenticatorType: clientAuthenticatorType
          notBefore: 3
          surrogateAuthRequired: true
          frontchannelLogout: true
          protocol: protocol
          defaultClientScopes:
          - defaultClientScopes
          - defaultClientScopes
          bearerOnly: true
          nodeReRegistrationTimeout: 3
          id: id
          adminUrl: adminUrl
          useTemplateScope: true
          clientId: clientId
          registrationAccessToken: registrationAccessToken
          useTemplateMappers: true
          directGrantsOnly: true
          protocolMappers:
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          clientTemplate: clientTemplate
          redirectUris:
          - redirectUris
          - redirectUris
          oauth2DeviceAuthorizationGrantEnabled: true
          fullScopeAllowed: true
          rootUrl: rootUrl
          implicitFlowEnabled: true
          directAccessGrantsEnabled: true
          baseUrl: baseUrl
          name: name
          defaultRoles:
          - defaultRoles
          - defaultRoles
          authenticationFlowBindingOverrides:
            key: authenticationFlowBindingOverrides
          standardFlowEnabled: true
          webOrigins:
          - webOrigins
          - webOrigins
          attributes:
            key: attributes
        displayName: displayName
        otpPolicyAlgorithm: otpPolicyAlgorithm
        webAuthnPolicyAuthenticatorAttachment: webAuthnPolicyAuthenticatorAttachment
        userCacheEnabled: true
        enabled: true
        oauthClients:
        - optionalClientScopes:
          - optionalClientScopes
          - optionalClientScopes
          publicClient: true
          registeredNodes:
            key: 0
          authorizationSettings:
            clientId: clientId
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - owner:
                name: name
                id: id
              uris:
              - uris
              - uris
              scopesUma:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              ownerManagedAccess: true
              displayName: displayName
              name: name
              attributes:
                key:
                - attributes
                - attributes
              id: id
              scopes:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              type: type
              uri: uri
              icon_uri: icon_uri
            - owner:
                name: name
                id: id
              uris:
              - uris
              - uris
              scopesUma:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              ownerManagedAccess: true
              displayName: displayName
              name: name
              attributes:
                key:
                - attributes
                - attributes
              id: id
              scopes:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              type: type
              uri: uri
              icon_uri: icon_uri
            id: id
            scopes:
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            allowRemoteResourceManagement: true
            policyEnforcementMode: "{}"
            decisionStrategy: "{}"
          access:
            key: true
          authorizationServicesEnabled: true
          origin: origin
          description: description
          alwaysDisplayInConsole: true
          serviceAccountsEnabled: true
          secret: secret
          consentRequired: true
          useTemplateConfig: true
          enabled: true
          clientAuthenticatorType: clientAuthenticatorType
          notBefore: 0
          surrogateAuthRequired: true
          frontchannelLogout: true
          protocol: protocol
          defaultClientScopes:
          - defaultClientScopes
          - defaultClientScopes
          bearerOnly: true
          nodeReRegistrationTimeout: 9
          id: id
          adminUrl: adminUrl
          useTemplateScope: true
          clientId: clientId
          registrationAccessToken: registrationAccessToken
          useTemplateMappers: true
          directGrantsOnly: true
          protocolMappers:
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          clientTemplate: clientTemplate
          redirectUris:
          - redirectUris
          - redirectUris
          oauth2DeviceAuthorizationGrantEnabled: true
          fullScopeAllowed: true
          rootUrl: rootUrl
          implicitFlowEnabled: true
          directAccessGrantsEnabled: true
          baseUrl: baseUrl
          defaultRoles:
          - defaultRoles
          - defaultRoles
          authenticationFlowBindingOverrides:
            key: authenticationFlowBindingOverrides
          name: name
          claims:
            website: true
            address: true
            gender: true
            phone: true
            profile: true
            name: true
            locale: true
            picture: true
            email: true
            username: true
          standardFlowEnabled: true
          webOrigins:
          - webOrigins
          - webOrigins
          attributes:
            key: attributes
        - optionalClientScopes:
          - optionalClientScopes
          - optionalClientScopes
          publicClient: true
          registeredNodes:
            key: 0
          authorizationSettings:
            clientId: clientId
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - owner:
                name: name
                id: id
              uris:
              - uris
              - uris
              scopesUma:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              ownerManagedAccess: true
              displayName: displayName
              name: name
              attributes:
                key:
                - attributes
                - attributes
              id: id
              scopes:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              type: type
              uri: uri
              icon_uri: icon_uri
            - owner:
                name: name
                id: id
              uris:
              - uris
              - uris
              scopesUma:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              ownerManagedAccess: true
              displayName: displayName
              name: name
              attributes:
                key:
                - attributes
                - attributes
              id: id
              scopes:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              type: type
              uri: uri
              icon_uri: icon_uri
            id: id
            scopes:
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            allowRemoteResourceManagement: true
            policyEnforcementMode: "{}"
            decisionStrategy: "{}"
          access:
            key: true
          authorizationServicesEnabled: true
          origin: origin
          description: description
          alwaysDisplayInConsole: true
          serviceAccountsEnabled: true
          secret: secret
          consentRequired: true
          useTemplateConfig: true
          enabled: true
          clientAuthenticatorType: clientAuthenticatorType
          notBefore: 0
          surrogateAuthRequired: true
          frontchannelLogout: true
          protocol: protocol
          defaultClientScopes:
          - defaultClientScopes
          - defaultClientScopes
          bearerOnly: true
          nodeReRegistrationTimeout: 9
          id: id
          adminUrl: adminUrl
          useTemplateScope: true
          clientId: clientId
          registrationAccessToken: registrationAccessToken
          useTemplateMappers: true
          directGrantsOnly: true
          protocolMappers:
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          clientTemplate: clientTemplate
          redirectUris:
          - redirectUris
          - redirectUris
          oauth2DeviceAuthorizationGrantEnabled: true
          fullScopeAllowed: true
          rootUrl: rootUrl
          implicitFlowEnabled: true
          directAccessGrantsEnabled: true
          baseUrl: baseUrl
          defaultRoles:
          - defaultRoles
          - defaultRoles
          authenticationFlowBindingOverrides:
            key: authenticationFlowBindingOverrides
          name: name
          claims:
            website: true
            address: true
            gender: true
            phone: true
            profile: true
            name: true
            locale: true
            picture: true
            email: true
            username: true
          standardFlowEnabled: true
          webOrigins:
          - webOrigins
          - webOrigins
          attributes:
            key: attributes
        requiredCredentials:
        - requiredCredentials
        - requiredCredentials
        maxDeltaTimeSeconds: 6
        internationalizationEnabled: true
        ssoSessionMaxLifespan: 2
        bruteForceProtected: true
        accessTokenLifespanForImplicitFlow: 5
        webAuthnPolicyPasswordlessSignatureAlgorithms:
        - webAuthnPolicyPasswordlessSignatureAlgorithms
        - webAuthnPolicyPasswordlessSignatureAlgorithms
        userFederationProviders:
        - changedSyncPeriod: 4
          fullSyncPeriod: 3
          lastSync: 0
          displayName: displayName
          id: id
          priority: 5
          config:
            key: config
          providerName: providerName
        - changedSyncPeriod: 4
          fullSyncPeriod: 3
          lastSync: 0
          displayName: displayName
          id: id
          priority: 5
          config:
            key: config
          providerName: providerName
        identityProviders:
        - addReadTokenRoleOnCreate: true
          displayName: displayName
          trustEmail: true
          linkOnly: true
          enabled: true
          storeToken: true
          internalId: internalId
          firstBrokerLoginFlowAlias: firstBrokerLoginFlowAlias
          updateProfileFirstLoginMode: updateProfileFirstLoginMode
          providerId: providerId
          postBrokerLoginFlowAlias: postBrokerLoginFlowAlias
          alias: alias
          authenticateByDefault: true
          updateProfileFirstLogin: true
          config:
            key: config
        - addReadTokenRoleOnCreate: true
          displayName: displayName
          trustEmail: true
          linkOnly: true
          enabled: true
          storeToken: true
          internalId: internalId
          firstBrokerLoginFlowAlias: firstBrokerLoginFlowAlias
          updateProfileFirstLoginMode: updateProfileFirstLoginMode
          providerId: providerId
          postBrokerLoginFlowAlias: postBrokerLoginFlowAlias
          alias: alias
          authenticateByDefault: true
          updateProfileFirstLogin: true
          config:
            key: config
        supportedLocales:
        - supportedLocales
        - supportedLocales
        webAuthnPolicyAttestationConveyancePreference: webAuthnPolicyAttestationConveyancePreference
        webAuthnPolicyPasswordlessUserVerificationRequirement: webAuthnPolicyPasswordlessUserVerificationRequirement
        browserSecurityHeaders:
          key: browserSecurityHeaders
        applicationScopeMappings:
          key:
          - applicationScopeMappings
          - applicationScopeMappings
        oauth2DeviceCodeLifespan: 5
        webAuthnPolicyPasswordlessAuthenticatorAttachment: webAuthnPolicyPasswordlessAuthenticatorAttachment
        smtpServer:
          key: smtpServer
        webAuthnPolicyExtraOrigins:
        - webAuthnPolicyExtraOrigins
        - webAuthnPolicyExtraOrigins
        emailTheme: emailTheme
        enabledEventTypes:
        - enabledEventTypes
        - enabledEventTypes
        otpSupportedApplications:
        - otpSupportedApplications
        - otpSupportedApplications
        actionTokenGeneratedByAdminLifespan: 1
        defaultRoles:
        - defaultRoles
        - defaultRoles
        attributes:
          key: attributes
        registrationEmailAsUsername: true
        otpPolicyPeriod: 6
        ssoSessionMaxLifespanRememberMe: 9
        otpPolicyInitialCounter: 1
        userManagedAccessAllowed: true
        clientOfflineSessionIdleTimeout: 1
        notBefore: 0
        resetPasswordAllowed: true
        scopeMappings:
        - roles:
          - roles
          - roles
          self: self
          client: client
          clientTemplate: clientTemplate
          clientScope: clientScope
        - roles:
          - roles
          - roles
          self: self
          client: client
          clientTemplate: clientTemplate
          clientScope: clientScope
        actionTokenGeneratedByUserLifespan: 4
        clientScopeMappings:
          key:
          - clientScopeMappings
          - clientScopeMappings
        webAuthnPolicyPasswordlessRpEntityName: webAuthnPolicyPasswordlessRpEntityName
        defaultOptionalClientScopes:
        - defaultOptionalClientScopes
        - defaultOptionalClientScopes
        webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister: true
        webAuthnPolicyPasswordlessRequireResidentKey: webAuthnPolicyPasswordlessRequireResidentKey
        resetCredentialsFlow: resetCredentialsFlow
        webAuthnPolicyUserVerificationRequirement: webAuthnPolicyUserVerificationRequirement
        passwordPolicy: passwordPolicy
        webAuthnPolicyCreateTimeout: 5
        defaultRole:
          composites:
            application:
              key:
              - application
              - application
            client:
              key:
              - client
              - client
            realm:
            - realm
            - realm
          clientRole: true
          composite: true
          name: name
          description: description
          attributes:
            key:
            - attributes
            - attributes
          id: id
          scopeParamRequired: true
          containerId: containerId
        keycloakVersion: keycloakVersion
        authenticationFlows:
        - authenticationExecutions:
          - authenticatorConfig: authenticatorConfig
            authenticatorFlow: true
            userSetupAllowed: true
            requirement: requirement
            priority: 4
            flowAlias: flowAlias
            authenticator: authenticator
            autheticatorFlow: true
          - authenticatorConfig: authenticatorConfig
            authenticatorFlow: true
            userSetupAllowed: true
            requirement: requirement
            priority: 4
            flowAlias: flowAlias
            authenticator: authenticator
            autheticatorFlow: true
          providerId: providerId
          topLevel: true
          builtIn: true
          alias: alias
          description: description
          id: id
        - authenticationExecutions:
          - authenticatorConfig: authenticatorConfig
            authenticatorFlow: true
            userSetupAllowed: true
            requirement: requirement
            priority: 4
            flowAlias: flowAlias
            authenticator: authenticator
            autheticatorFlow: true
          - authenticatorConfig: authenticatorConfig
            authenticatorFlow: true
            userSetupAllowed: true
            requirement: requirement
            priority: 4
            flowAlias: flowAlias
            authenticator: authenticator
            autheticatorFlow: true
          providerId: providerId
          topLevel: true
          builtIn: true
          alias: alias
          description: description
          id: id
        realmCacheEnabled: true
        revokeRefreshToken: true
        minimumQuickLoginWaitSeconds: 6
        adminEventsEnabled: true
        users:
        - totp: true
          lastName: lastName
          serviceAccountClientId: serviceAccountClientId
          socialLinks:
          - socialUserId: socialUserId
            socialUsername: socialUsername
            socialProvider: socialProvider
          - socialUserId: socialUserId
            socialUsername: socialUsername
            socialProvider: socialProvider
          federatedIdentities:
          - userName: userName
            userId: userId
            identityProvider: identityProvider
          - userName: userName
            userId: userId
            identityProvider: identityProvider
          access:
            key: true
          credentials:
          - userLabel: userLabel
            temporary: true
            period: 0
            hashedSaltedValue: hashedSaltedValue
            salt: salt
            hashIterations: 0
            counter: 7
            type: type
            priority: 7
            secretData: secretData
            createdDate: 3
            digits: 6
            id: id
            credentialData: credentialData
            value: value
            device: device
            config:
              key: ""
            algorithm: algorithm
          - userLabel: userLabel
            temporary: true
            period: 0
            hashedSaltedValue: hashedSaltedValue
            salt: salt
            hashIterations: 0
            counter: 7
            type: type
            priority: 7
            secretData: secretData
            createdDate: 3
            digits: 6
            id: id
            credentialData: credentialData
            value: value
            device: device
            config:
              key: ""
            algorithm: algorithm
          origin: origin
          enabled: true
          notBefore: 7
          id: id
          email: email
          clientRoles:
            key:
            - clientRoles
            - clientRoles
          applicationRoles:
            key:
            - applicationRoles
            - applicationRoles
          createdTimestamp: 3
          groups:
          - groups
          - groups
          clientConsents:
          - grantedRealmRoles:
            - grantedRealmRoles
            - grantedRealmRoles
            lastUpdatedDate: 8
            clientId: clientId
            createdDate: 4
            grantedClientScopes:
            - grantedClientScopes
            - grantedClientScopes
          - grantedRealmRoles:
            - grantedRealmRoles
            - grantedRealmRoles
            lastUpdatedDate: 8
            clientId: clientId
            createdDate: 4
            grantedClientScopes:
            - grantedClientScopes
            - grantedClientScopes
          disableableCredentialTypes:
          - disableableCredentialTypes
          - disableableCredentialTypes
          emailVerified: true
          firstName: firstName
          realmRoles:
          - realmRoles
          - realmRoles
          requiredActions:
          - requiredActions
          - requiredActions
          userProfileMetadata:
            groups:
            - displayDescription: displayDescription
              name: name
              annotations:
                key: "{}"
              displayHeader: displayHeader
            - displayDescription: displayDescription
              name: name
              annotations:
                key: "{}"
              displayHeader: displayHeader
            attributes:
            - displayName: displayName
              validators:
                key:
                  key: ""
              name: name
              annotations:
                key: "{}"
              readOnly: true
              required: true
              group: group
            - displayName: displayName
              validators:
                key:
                  key: ""
              name: name
              annotations:
                key: "{}"
              readOnly: true
              required: true
              group: group
          self: self
          federationLink: federationLink
          attributes:
            key:
            - attributes
            - attributes
          username: username
        - totp: true
          lastName: lastName
          serviceAccountClientId: serviceAccountClientId
          socialLinks:
          - socialUserId: socialUserId
            socialUsername: socialUsername
            socialProvider: socialProvider
          - socialUserId: socialUserId
            socialUsername: socialUsername
            socialProvider: socialProvider
          federatedIdentities:
          - userName: userName
            userId: userId
            identityProvider: identityProvider
          - userName: userName
            userId: userId
            identityProvider: identityProvider
          access:
            key: true
          credentials:
          - userLabel: userLabel
            temporary: true
            period: 0
            hashedSaltedValue: hashedSaltedValue
            salt: salt
            hashIterations: 0
            counter: 7
            type: type
            priority: 7
            secretData: secretData
            createdDate: 3
            digits: 6
            id: id
            credentialData: credentialData
            value: value
            device: device
            config:
              key: ""
            algorithm: algorithm
          - userLabel: userLabel
            temporary: true
            period: 0
            hashedSaltedValue: hashedSaltedValue
            salt: salt
            hashIterations: 0
            counter: 7
            type: type
            priority: 7
            secretData: secretData
            createdDate: 3
            digits: 6
            id: id
            credentialData: credentialData
            value: value
            device: device
            config:
              key: ""
            algorithm: algorithm
          origin: origin
          enabled: true
          notBefore: 7
          id: id
          email: email
          clientRoles:
            key:
            - clientRoles
            - clientRoles
          applicationRoles:
            key:
            - applicationRoles
            - applicationRoles
          createdTimestamp: 3
          groups:
          - groups
          - groups
          clientConsents:
          - grantedRealmRoles:
            - grantedRealmRoles
            - grantedRealmRoles
            lastUpdatedDate: 8
            clientId: clientId
            createdDate: 4
            grantedClientScopes:
            - grantedClientScopes
            - grantedClientScopes
          - grantedRealmRoles:
            - grantedRealmRoles
            - grantedRealmRoles
            lastUpdatedDate: 8
            clientId: clientId
            createdDate: 4
            grantedClientScopes:
            - grantedClientScopes
            - grantedClientScopes
          disableableCredentialTypes:
          - disableableCredentialTypes
          - disableableCredentialTypes
          emailVerified: true
          firstName: firstName
          realmRoles:
          - realmRoles
          - realmRoles
          requiredActions:
          - requiredActions
          - requiredActions
          userProfileMetadata:
            groups:
            - displayDescription: displayDescription
              name: name
              annotations:
                key: "{}"
              displayHeader: displayHeader
            - displayDescription: displayDescription
              name: name
              annotations:
                key: "{}"
              displayHeader: displayHeader
            attributes:
            - displayName: displayName
              validators:
                key:
                  key: ""
              name: name
              annotations:
                key: "{}"
              readOnly: true
              required: true
              group: group
            - displayName: displayName
              validators:
                key:
                  key: ""
              name: name
              annotations:
                key: "{}"
              readOnly: true
              required: true
              group: group
          self: self
          federationLink: federationLink
          attributes:
            key:
            - attributes
            - attributes
          username: username
        loginWithEmailAllowed: true
        browserFlow: browserFlow
        accessCodeLifespanUserAction: 6
        editUsernameAllowed: true
        ssoSessionIdleTimeout: 5
        clientSessionMaxLifespan: 7
        passwordCredentialGrantAllowed: true
        localizationTexts:
          key:
            key: ""
        offlineSessionMaxLifespanEnabled: true
        waitIncrementSeconds: 8
        codeSecret: codeSecret
        roles:
          application:
            key:
            - application
            - application
          client:
            key:
            - client
            - client
          realm:
          - composites:
              application:
                key:
                - application
                - application
              client:
                key:
                - client
                - client
              realm:
              - realm
              - realm
            clientRole: true
            composite: true
            name: name
            description: description
            attributes:
              key:
              - attributes
              - attributes
            id: id
            scopeParamRequired: true
            containerId: containerId
          - composites:
              application:
                key:
                - application
                - application
              client:
                key:
                - client
                - client
              realm:
              - realm
              - realm
            clientRole: true
            composite: true
            name: name
            description: description
            attributes:
              key:
              - attributes
              - attributes
            id: id
            scopeParamRequired: true
            containerId: containerId
        registrationAllowed: true
        certificate: certificate
        displayNameHtml: displayNameHtml
        verifyEmail: true
        sslRequired: sslRequired
        webAuthnPolicyRpEntityName: webAuthnPolicyRpEntityName
        failureFactor: 3
        federatedUsers:
        - totp: true
          lastName: lastName
          serviceAccountClientId: serviceAccountClientId
          socialLinks:
          - socialUserId: socialUserId
            socialUsername: socialUsername
            socialProvider: socialProvider
          - socialUserId: socialUserId
            socialUsername: socialUsername
            socialProvider: socialProvider
          federatedIdentities:
          - userName: userName
            userId: userId
            identityProvider: identityProvider
          - userName: userName
            userId: userId
            identityProvider: identityProvider
          access:
            key: true
          credentials:
          - userLabel: userLabel
            temporary: true
            period: 0
            hashedSaltedValue: hashedSaltedValue
            salt: salt
            hashIterations: 0
            counter: 7
            type: type
            priority: 7
            secretData: secretData
            createdDate: 3
            digits: 6
            id: id
            credentialData: credentialData
            value: value
            device: device
            config:
              key: ""
            algorithm: algorithm
          - userLabel: userLabel
            temporary: true
            period: 0
            hashedSaltedValue: hashedSaltedValue
            salt: salt
            hashIterations: 0
            counter: 7
            type: type
            priority: 7
            secretData: secretData
            createdDate: 3
            digits: 6
            id: id
            credentialData: credentialData
            value: value
            device: device
            config:
              key: ""
            algorithm: algorithm
          origin: origin
          enabled: true
          notBefore: 7
          id: id
          email: email
          clientRoles:
            key:
            - clientRoles
            - clientRoles
          applicationRoles:
            key:
            - applicationRoles
            - applicationRoles
          createdTimestamp: 3
          groups:
          - groups
          - groups
          clientConsents:
          - grantedRealmRoles:
            - grantedRealmRoles
            - grantedRealmRoles
            lastUpdatedDate: 8
            clientId: clientId
            createdDate: 4
            grantedClientScopes:
            - grantedClientScopes
            - grantedClientScopes
          - grantedRealmRoles:
            - grantedRealmRoles
            - grantedRealmRoles
            lastUpdatedDate: 8
            clientId: clientId
            createdDate: 4
            grantedClientScopes:
            - grantedClientScopes
            - grantedClientScopes
          disableableCredentialTypes:
          - disableableCredentialTypes
          - disableableCredentialTypes
          emailVerified: true
          firstName: firstName
          realmRoles:
          - realmRoles
          - realmRoles
          requiredActions:
          - requiredActions
          - requiredActions
          userProfileMetadata:
            groups:
            - displayDescription: displayDescription
              name: name
              annotations:
                key: "{}"
              displayHeader: displayHeader
            - displayDescription: displayDescription
              name: name
              annotations:
                key: "{}"
              displayHeader: displayHeader
            attributes:
            - displayName: displayName
              validators:
                key:
                  key: ""
              name: name
              annotations:
                key: "{}"
              readOnly: true
              required: true
              group: group
            - displayName: displayName
              validators:
                key:
                  key: ""
              name: name
              annotations:
                key: "{}"
              readOnly: true
              required: true
              group: group
          self: self
          federationLink: federationLink
          attributes:
            key:
            - attributes
            - attributes
          username: username
        - totp: true
          lastName: lastName
          serviceAccountClientId: serviceAccountClientId
          socialLinks:
          - socialUserId: socialUserId
            socialUsername: socialUsername
            socialProvider: socialProvider
          - socialUserId: socialUserId
            socialUsername: socialUsername
            socialProvider: socialProvider
          federatedIdentities:
          - userName: userName
            userId: userId
            identityProvider: identityProvider
          - userName: userName
            userId: userId
            identityProvider: identityProvider
          access:
            key: true
          credentials:
          - userLabel: userLabel
            temporary: true
            period: 0
            hashedSaltedValue: hashedSaltedValue
            salt: salt
            hashIterations: 0
            counter: 7
            type: type
            priority: 7
            secretData: secretData
            createdDate: 3
            digits: 6
            id: id
            credentialData: credentialData
            value: value
            device: device
            config:
              key: ""
            algorithm: algorithm
          - userLabel: userLabel
            temporary: true
            period: 0
            hashedSaltedValue: hashedSaltedValue
            salt: salt
            hashIterations: 0
            counter: 7
            type: type
            priority: 7
            secretData: secretData
            createdDate: 3
            digits: 6
            id: id
            credentialData: credentialData
            value: value
            device: device
            config:
              key: ""
            algorithm: algorithm
          origin: origin
          enabled: true
          notBefore: 7
          id: id
          email: email
          clientRoles:
            key:
            - clientRoles
            - clientRoles
          applicationRoles:
            key:
            - applicationRoles
            - applicationRoles
          createdTimestamp: 3
          groups:
          - groups
          - groups
          clientConsents:
          - grantedRealmRoles:
            - grantedRealmRoles
            - grantedRealmRoles
            lastUpdatedDate: 8
            clientId: clientId
            createdDate: 4
            grantedClientScopes:
            - grantedClientScopes
            - grantedClientScopes
          - grantedRealmRoles:
            - grantedRealmRoles
            - grantedRealmRoles
            lastUpdatedDate: 8
            clientId: clientId
            createdDate: 4
            grantedClientScopes:
            - grantedClientScopes
            - grantedClientScopes
          disableableCredentialTypes:
          - disableableCredentialTypes
          - disableableCredentialTypes
          emailVerified: true
          firstName: firstName
          realmRoles:
          - realmRoles
          - realmRoles
          requiredActions:
          - requiredActions
          - requiredActions
          userProfileMetadata:
            groups:
            - displayDescription: displayDescription
              name: name
              annotations:
                key: "{}"
              displayHeader: displayHeader
            - displayDescription: displayDescription
              name: name
              annotations:
                key: "{}"
              displayHeader: displayHeader
            attributes:
            - displayName: displayName
              validators:
                key:
                  key: ""
              name: name
              annotations:
                key: "{}"
              readOnly: true
              required: true
              group: group
            - displayName: displayName
              validators:
                key:
                  key: ""
              name: name
              annotations:
                key: "{}"
              readOnly: true
              required: true
              group: group
          self: self
          federationLink: federationLink
          attributes:
            key:
            - attributes
            - attributes
          username: username
        loginTheme: loginTheme
        identityProviderMappers:
        - identityProviderAlias: identityProviderAlias
          name: name
          id: id
          config:
            key: config
          identityProviderMapper: identityProviderMapper
        - identityProviderAlias: identityProviderAlias
          name: name
          id: id
          config:
            key: config
          identityProviderMapper: identityProviderMapper
        adminTheme: adminTheme
        accessTokenLifespan: 1
        refreshTokenMaxReuse: 6
        updateProfileOnInitialSocialLogin: true
        clientScopes:
        - protocol: protocol
          name: name
          description: description
          attributes:
            key: attributes
          protocolMappers:
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          id: id
        - protocol: protocol
          name: name
          description: description
          attributes:
            key: attributes
          protocolMappers:
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          id: id
        clientOfflineSessionMaxLifespan: 1
        oauth2DevicePollingInterval: 9
        permanentLockout: true
        defaultDefaultClientScopes:
        - defaultDefaultClientScopes
        - defaultDefaultClientScopes
        webAuthnPolicyRequireResidentKey: webAuthnPolicyRequireResidentKey
        webAuthnPolicyPasswordlessRpId: webAuthnPolicyPasswordlessRpId
        dockerAuthenticationFlow: dockerAuthenticationFlow
        social: true
        webAuthnPolicyRpId: webAuthnPolicyRpId
        groups:
        - path: path
          realmRoles:
          - realmRoles
          - realmRoles
          access:
            key: true
          name: name
          subGroups:
          - null
          - null
          attributes:
            key:
            - attributes
            - attributes
          id: id
          parentId: parentId
          clientRoles:
            key:
            - clientRoles
            - clientRoles
          subGroupCount: 6
        - path: path
          realmRoles:
          - realmRoles
          - realmRoles
          access:
            key: true
          name: name
          subGroups:
          - null
          - null
          attributes:
            key:
            - attributes
            - attributes
          id: id
          parentId: parentId
          clientRoles:
            key:
            - clientRoles
            - clientRoles
          subGroupCount: 6
        maxFailureWaitSeconds: 9
        protocolMappers:
        - protocol: protocol
          protocolMapper: protocolMapper
          name: name
          id: id
          consentText: consentText
          consentRequired: true
          config:
            key: config
        - protocol: protocol
          protocolMapper: protocolMapper
          name: name
          id: id
          consentText: consentText
          consentRequired: true
          config:
            key: config
        privateKey: privateKey
        accountTheme: accountTheme
        requiredActions:
        - defaultAction: true
          providerId: providerId
          name: name
          alias: alias
          priority: 1
          config:
            key: config
          enabled: true
        - defaultAction: true
          providerId: providerId
          name: name
          alias: alias
          priority: 1
          config:
            key: config
          enabled: true
        clientTemplates:
        - publicClient: true
          description: description
          serviceAccountsEnabled: true
          protocolMappers:
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          consentRequired: true
          fullScopeAllowed: true
          implicitFlowEnabled: true
          directAccessGrantsEnabled: true
          frontchannelLogout: true
          protocol: protocol
          bearerOnly: true
          name: name
          standardFlowEnabled: true
          attributes:
            key: attributes
          id: id
        - publicClient: true
          description: description
          serviceAccountsEnabled: true
          protocolMappers:
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          consentRequired: true
          fullScopeAllowed: true
          implicitFlowEnabled: true
          directAccessGrantsEnabled: true
          frontchannelLogout: true
          protocol: protocol
          bearerOnly: true
          name: name
          standardFlowEnabled: true
          attributes:
            key: attributes
          id: id
        webAuthnPolicyAvoidSameAuthenticatorRegister: true
        otpPolicyCodeReusable: true
        webAuthnPolicyPasswordlessAttestationConveyancePreference: webAuthnPolicyPasswordlessAttestationConveyancePreference
        realm: realm
        rememberMe: true
        offlineSessionIdleTimeout: 3
        webAuthnPolicyAcceptableAaguids:
        - webAuthnPolicyAcceptableAaguids
        - webAuthnPolicyAcceptableAaguids
        oAuth2DevicePollingInterval: 5
        userFederationMappers:
        - federationProviderDisplayName: federationProviderDisplayName
          name: name
          id: id
          config:
            key: config
          federationMapperType: federationMapperType
        - federationProviderDisplayName: federationProviderDisplayName
          name: name
          id: id
          config:
            key: config
          federationMapperType: federationMapperType
        applications:
        - optionalClientScopes:
          - optionalClientScopes
          - optionalClientScopes
          publicClient: true
          registeredNodes:
            key: 9
          authorizationSettings:
            clientId: clientId
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - owner:
                name: name
                id: id
              uris:
              - uris
              - uris
              scopesUma:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              ownerManagedAccess: true
              displayName: displayName
              name: name
              attributes:
                key:
                - attributes
                - attributes
              id: id
              scopes:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              type: type
              uri: uri
              icon_uri: icon_uri
            - owner:
                name: name
                id: id
              uris:
              - uris
              - uris
              scopesUma:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              ownerManagedAccess: true
              displayName: displayName
              name: name
              attributes:
                key:
                - attributes
                - attributes
              id: id
              scopes:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              type: type
              uri: uri
              icon_uri: icon_uri
            id: id
            scopes:
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            allowRemoteResourceManagement: true
            policyEnforcementMode: "{}"
            decisionStrategy: "{}"
          access:
            key: true
          authorizationServicesEnabled: true
          origin: origin
          description: description
          alwaysDisplayInConsole: true
          serviceAccountsEnabled: true
          secret: secret
          consentRequired: true
          useTemplateConfig: true
          enabled: true
          clientAuthenticatorType: clientAuthenticatorType
          notBefore: 4
          surrogateAuthRequired: true
          frontchannelLogout: true
          protocol: protocol
          defaultClientScopes:
          - defaultClientScopes
          - defaultClientScopes
          bearerOnly: true
          nodeReRegistrationTimeout: 7
          id: id
          adminUrl: adminUrl
          useTemplateScope: true
          clientId: clientId
          registrationAccessToken: registrationAccessToken
          useTemplateMappers: true
          directGrantsOnly: true
          protocolMappers:
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          clientTemplate: clientTemplate
          redirectUris:
          - redirectUris
          - redirectUris
          oauth2DeviceAuthorizationGrantEnabled: true
          fullScopeAllowed: true
          rootUrl: rootUrl
          implicitFlowEnabled: true
          directAccessGrantsEnabled: true
          baseUrl: baseUrl
          defaultRoles:
          - defaultRoles
          - defaultRoles
          authenticationFlowBindingOverrides:
            key: authenticationFlowBindingOverrides
          name: name
          claims:
            website: true
            address: true
            gender: true
            phone: true
            profile: true
            name: true
            locale: true
            picture: true
            email: true
            username: true
          standardFlowEnabled: true
          webOrigins:
          - webOrigins
          - webOrigins
          attributes:
            key: attributes
        - optionalClientScopes:
          - optionalClientScopes
          - optionalClientScopes
          publicClient: true
          registeredNodes:
            key: 9
          authorizationSettings:
            clientId: clientId
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - owner:
                name: name
                id: id
              uris:
              - uris
              - uris
              scopesUma:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              ownerManagedAccess: true
              displayName: displayName
              name: name
              attributes:
                key:
                - attributes
                - attributes
              id: id
              scopes:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              type: type
              uri: uri
              icon_uri: icon_uri
            - owner:
                name: name
                id: id
              uris:
              - uris
              - uris
              scopesUma:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              ownerManagedAccess: true
              displayName: displayName
              name: name
              attributes:
                key:
                - attributes
                - attributes
              id: id
              scopes:
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              - displayName: displayName
                name: name
                policies:
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                - owner: owner
                  policies:
                  - policies
                  - policies
                  resourcesData:
                  - null
                  - null
                  description: description
                  resources:
                  - resources
                  - resources
                  type: type
                  scopesData:
                  - null
                  - null
                  name: name
                  id: id
                  scopes:
                  - scopes
                  - scopes
                  logic: "{}"
                  decisionStrategy: "{}"
                  config:
                    key: config
                resources:
                - null
                - null
                id: id
                iconUri: iconUri
              type: type
              uri: uri
              icon_uri: icon_uri
            id: id
            scopes:
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            - displayName: displayName
              name: name
              policies:
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              - owner: owner
                policies:
                - policies
                - policies
                resourcesData:
                - null
                - null
                description: description
                resources:
                - resources
                - resources
                type: type
                scopesData:
                - null
                - null
                name: name
                id: id
                scopes:
                - scopes
                - scopes
                logic: "{}"
                decisionStrategy: "{}"
                config:
                  key: config
              resources:
              - null
              - null
              id: id
              iconUri: iconUri
            allowRemoteResourceManagement: true
            policyEnforcementMode: "{}"
            decisionStrategy: "{}"
          access:
            key: true
          authorizationServicesEnabled: true
          origin: origin
          description: description
          alwaysDisplayInConsole: true
          serviceAccountsEnabled: true
          secret: secret
          consentRequired: true
          useTemplateConfig: true
          enabled: true
          clientAuthenticatorType: clientAuthenticatorType
          notBefore: 4
          surrogateAuthRequired: true
          frontchannelLogout: true
          protocol: protocol
          defaultClientScopes:
          - defaultClientScopes
          - defaultClientScopes
          bearerOnly: true
          nodeReRegistrationTimeout: 7
          id: id
          adminUrl: adminUrl
          useTemplateScope: true
          clientId: clientId
          registrationAccessToken: registrationAccessToken
          useTemplateMappers: true
          directGrantsOnly: true
          protocolMappers:
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          - protocol: protocol
            protocolMapper: protocolMapper
            name: name
            id: id
            consentText: consentText
            consentRequired: true
            config:
              key: config
          clientTemplate: clientTemplate
          redirectUris:
          - redirectUris
          - redirectUris
          oauth2DeviceAuthorizationGrantEnabled: true
          fullScopeAllowed: true
          rootUrl: rootUrl
          implicitFlowEnabled: true
          directAccessGrantsEnabled: true
          baseUrl: baseUrl
          defaultRoles:
          - defaultRoles
          - defaultRoles
          authenticationFlowBindingOverrides:
            key: authenticationFlowBindingOverrides
          name: name
          claims:
            website: true
            address: true
            gender: true
            phone: true
            profile: true
            name: true
            locale: true
            picture: true
            email: true
            username: true
          standardFlowEnabled: true
          webOrigins:
          - webOrigins
          - webOrigins
          attributes:
            key: attributes
      properties:
        id:
          type: string
        realm:
          type: string
        displayName:
          type: string
        displayNameHtml:
          type: string
        notBefore:
          format: int32
          type: integer
        defaultSignatureAlgorithm:
          type: string
        revokeRefreshToken:
          type: boolean
        refreshTokenMaxReuse:
          format: int32
          type: integer
        accessTokenLifespan:
          format: int32
          type: integer
        accessTokenLifespanForImplicitFlow:
          format: int32
          type: integer
        ssoSessionIdleTimeout:
          format: int32
          type: integer
        ssoSessionMaxLifespan:
          format: int32
          type: integer
        ssoSessionIdleTimeoutRememberMe:
          format: int32
          type: integer
        ssoSessionMaxLifespanRememberMe:
          format: int32
          type: integer
        offlineSessionIdleTimeout:
          format: int32
          type: integer
        offlineSessionMaxLifespanEnabled:
          type: boolean
        offlineSessionMaxLifespan:
          format: int32
          type: integer
        clientSessionIdleTimeout:
          format: int32
          type: integer
        clientSessionMaxLifespan:
          format: int32
          type: integer
        clientOfflineSessionIdleTimeout:
          format: int32
          type: integer
        clientOfflineSessionMaxLifespan:
          format: int32
          type: integer
        accessCodeLifespan:
          format: int32
          type: integer
        accessCodeLifespanUserAction:
          format: int32
          type: integer
        accessCodeLifespanLogin:
          format: int32
          type: integer
        actionTokenGeneratedByAdminLifespan:
          format: int32
          type: integer
        actionTokenGeneratedByUserLifespan:
          format: int32
          type: integer
        oauth2DeviceCodeLifespan:
          format: int32
          type: integer
        oauth2DevicePollingInterval:
          format: int32
          type: integer
        enabled:
          type: boolean
        sslRequired:
          type: string
        passwordCredentialGrantAllowed:
          type: boolean
        registrationAllowed:
          type: boolean
        registrationEmailAsUsername:
          type: boolean
        rememberMe:
          type: boolean
        verifyEmail:
          type: boolean
        loginWithEmailAllowed:
          type: boolean
        duplicateEmailsAllowed:
          type: boolean
        resetPasswordAllowed:
          type: boolean
        editUsernameAllowed:
          type: boolean
        userCacheEnabled:
          type: boolean
        realmCacheEnabled:
          type: boolean
        bruteForceProtected:
          type: boolean
        permanentLockout:
          type: boolean
        maxFailureWaitSeconds:
          format: int32
          type: integer
        minimumQuickLoginWaitSeconds:
          format: int32
          type: integer
        waitIncrementSeconds:
          format: int32
          type: integer
        quickLoginCheckMilliSeconds:
          format: int64
          type: integer
        maxDeltaTimeSeconds:
          format: int32
          type: integer
        failureFactor:
          format: int32
          type: integer
        privateKey:
          type: string
        publicKey:
          type: string
        certificate:
          type: string
        codeSecret:
          type: string
        roles:
          $ref: '#/components/schemas/RolesRepresentation'
        groups:
          items:
            $ref: '#/components/schemas/GroupRepresentation'
          type: array
        defaultRoles:
          items:
            type: string
          type: array
        defaultRole:
          $ref: '#/components/schemas/RoleRepresentation'
        defaultGroups:
          items:
            type: string
          type: array
        requiredCredentials:
          items:
            type: string
          type: array
          uniqueItems: true
        passwordPolicy:
          type: string
        otpPolicyType:
          type: string
        otpPolicyAlgorithm:
          type: string
        otpPolicyInitialCounter:
          format: int32
          type: integer
        otpPolicyDigits:
          format: int32
          type: integer
        otpPolicyLookAheadWindow:
          format: int32
          type: integer
        otpPolicyPeriod:
          format: int32
          type: integer
        otpPolicyCodeReusable:
          type: boolean
        otpSupportedApplications:
          items:
            type: string
          type: array
        localizationTexts:
          additionalProperties:
            additionalProperties: true
            type: object
          type: object
        webAuthnPolicyRpEntityName:
          type: string
        webAuthnPolicySignatureAlgorithms:
          items:
            type: string
          type: array
        webAuthnPolicyRpId:
          type: string
        webAuthnPolicyAttestationConveyancePreference:
          type: string
        webAuthnPolicyAuthenticatorAttachment:
          type: string
        webAuthnPolicyRequireResidentKey:
          type: string
        webAuthnPolicyUserVerificationRequirement:
          type: string
        webAuthnPolicyCreateTimeout:
          format: int32
          type: integer
        webAuthnPolicyAvoidSameAuthenticatorRegister:
          type: boolean
        webAuthnPolicyAcceptableAaguids:
          items:
            type: string
          type: array
        webAuthnPolicyExtraOrigins:
          items:
            type: string
          type: array
        webAuthnPolicyPasswordlessRpEntityName:
          type: string
        webAuthnPolicyPasswordlessSignatureAlgorithms:
          items:
            type: string
          type: array
        webAuthnPolicyPasswordlessRpId:
          type: string
        webAuthnPolicyPasswordlessAttestationConveyancePreference:
          type: string
        webAuthnPolicyPasswordlessAuthenticatorAttachment:
          type: string
        webAuthnPolicyPasswordlessRequireResidentKey:
          type: string
        webAuthnPolicyPasswordlessUserVerificationRequirement:
          type: string
        webAuthnPolicyPasswordlessCreateTimeout:
          format: int32
          type: integer
        webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister:
          type: boolean
        webAuthnPolicyPasswordlessAcceptableAaguids:
          items:
            type: string
          type: array
        webAuthnPolicyPasswordlessExtraOrigins:
          items:
            type: string
          type: array
        clientProfiles:
          $ref: '#/components/schemas/ClientProfilesRepresentation'
        clientPolicies:
          $ref: '#/components/schemas/ClientPoliciesRepresentation'
        users:
          items:
            $ref: '#/components/schemas/UserRepresentation'
          type: array
        federatedUsers:
          items:
            $ref: '#/components/schemas/UserRepresentation'
          type: array
        scopeMappings:
          items:
            $ref: '#/components/schemas/ScopeMappingRepresentation'
          type: array
        clientScopeMappings:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
          type: object
        clients:
          items:
            $ref: '#/components/schemas/ClientRepresentation'
          type: array
        clientScopes:
          items:
            $ref: '#/components/schemas/ClientScopeRepresentation'
          type: array
        defaultDefaultClientScopes:
          items:
            type: string
          type: array
        defaultOptionalClientScopes:
          items:
            type: string
          type: array
        browserSecurityHeaders:
          additionalProperties:
            type: string
          type: object
        smtpServer:
          additionalProperties:
            type: string
          type: object
        userFederationProviders:
          items:
            $ref: '#/components/schemas/UserFederationProviderRepresentation'
          type: array
        userFederationMappers:
          items:
            $ref: '#/components/schemas/UserFederationMapperRepresentation'
          type: array
        loginTheme:
          type: string
        accountTheme:
          type: string
        adminTheme:
          type: string
        emailTheme:
          type: string
        eventsEnabled:
          type: boolean
        eventsExpiration:
          format: int64
          type: integer
        eventsListeners:
          items:
            type: string
          type: array
        enabledEventTypes:
          items:
            type: string
          type: array
        adminEventsEnabled:
          type: boolean
        adminEventsDetailsEnabled:
          type: boolean
        identityProviders:
          items:
            $ref: '#/components/schemas/IdentityProviderRepresentation'
          type: array
        identityProviderMappers:
          items:
            $ref: '#/components/schemas/IdentityProviderMapperRepresentation'
          type: array
        protocolMappers:
          items:
            $ref: '#/components/schemas/ProtocolMapperRepresentation'
          type: array
        components:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
          type: object
        internationalizationEnabled:
          type: boolean
        supportedLocales:
          items:
            type: string
          type: array
          uniqueItems: true
        defaultLocale:
          type: string
        authenticationFlows:
          items:
            $ref: '#/components/schemas/AuthenticationFlowRepresentation'
          type: array
        authenticatorConfig:
          items:
            $ref: '#/components/schemas/AuthenticatorConfigRepresentation'
          type: array
        requiredActions:
          items:
            $ref: '#/components/schemas/RequiredActionProviderRepresentation'
          type: array
        browserFlow:
          type: string
        registrationFlow:
          type: string
        directGrantFlow:
          type: string
        resetCredentialsFlow:
          type: string
        clientAuthenticationFlow:
          type: string
        dockerAuthenticationFlow:
          type: string
        attributes:
          additionalProperties:
            type: string
          type: object
        keycloakVersion:
          type: string
        userManagedAccessAllowed:
          type: boolean
        social:
          type: boolean
        updateProfileOnInitialSocialLogin:
          type: boolean
        socialProviders:
          additionalProperties:
            type: string
          type: object
        applicationScopeMappings:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
          type: object
        applications:
          items:
            $ref: '#/components/schemas/ApplicationRepresentation'
          type: array
        oauthClients:
          items:
            $ref: '#/components/schemas/OAuthClientRepresentation'
          type: array
        clientTemplates:
          items:
            $ref: '#/components/schemas/ClientTemplateRepresentation'
          type: array
        oAuth2DeviceCodeLifespan:
          format: int32
          type: integer
        oAuth2DevicePollingInterval:
          format: int32
          type: integer
      type: object
    RequiredActionProviderRepresentation:
      example:
        defaultAction: true
        providerId: providerId
        name: name
        alias: alias
        priority: 1
        config:
          key: config
        enabled: true
      properties:
        alias:
          type: string
        name:
          type: string
        providerId:
          type: string
        enabled:
          type: boolean
        defaultAction:
          type: boolean
        priority:
          format: int32
          type: integer
        config:
          additionalProperties:
            type: string
          type: object
      type: object
    ResourceOwnerRepresentation:
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    ResourceRepresentation:
      example:
        owner:
          name: name
          id: id
        uris:
        - uris
        - uris
        scopesUma:
        - displayName: displayName
          name: name
          policies:
          - owner: owner
            policies:
            - policies
            - policies
            resourcesData:
            - null
            - null
            description: description
            resources:
            - resources
            - resources
            type: type
            scopesData:
            - null
            - null
            name: name
            id: id
            scopes:
            - scopes
            - scopes
            logic: "{}"
            decisionStrategy: "{}"
            config:
              key: config
          - owner: owner
            policies:
            - policies
            - policies
            resourcesData:
            - null
            - null
            description: description
            resources:
            - resources
            - resources
            type: type
            scopesData:
            - null
            - null
            name: name
            id: id
            scopes:
            - scopes
            - scopes
            logic: "{}"
            decisionStrategy: "{}"
            config:
              key: config
          resources:
          - null
          - null
          id: id
          iconUri: iconUri
        - displayName: displayName
          name: name
          policies:
          - owner: owner
            policies:
            - policies
            - policies
            resourcesData:
            - null
            - null
            description: description
            resources:
            - resources
            - resources
            type: type
            scopesData:
            - null
            - null
            name: name
            id: id
            scopes:
            - scopes
            - scopes
            logic: "{}"
            decisionStrategy: "{}"
            config:
              key: config
          - owner: owner
            policies:
            - policies
            - policies
            resourcesData:
            - null
            - null
            description: description
            resources:
            - resources
            - resources
            type: type
            scopesData:
            - null
            - null
            name: name
            id: id
            scopes:
            - scopes
            - scopes
            logic: "{}"
            decisionStrategy: "{}"
            config:
              key: config
          resources:
          - null
          - null
          id: id
          iconUri: iconUri
        ownerManagedAccess: true
        displayName: displayName
        name: name
        attributes:
          key:
          - attributes
          - attributes
        id: id
        scopes:
        - displayName: displayName
          name: name
          policies:
          - owner: owner
            policies:
            - policies
            - policies
            resourcesData:
            - null
            - null
            description: description
            resources:
            - resources
            - resources
            type: type
            scopesData:
            - null
            - null
            name: name
            id: id
            scopes:
            - scopes
            - scopes
            logic: "{}"
            decisionStrategy: "{}"
            config:
              key: config
          - owner: owner
            policies:
            - policies
            - policies
            resourcesData:
            - null
            - null
            description: description
            resources:
            - resources
            - resources
            type: type
            scopesData:
            - null
            - null
            name: name
            id: id
            scopes:
            - scopes
            - scopes
            logic: "{}"
            decisionStrategy: "{}"
            config:
              key: config
          resources:
          - null
          - null
          id: id
          iconUri: iconUri
        - displayName: displayName
          name: name
          policies:
          - owner: owner
            policies:
            - policies
            - policies
            resourcesData:
            - null
            - null
            description: description
            resources:
            - resources
            - resources
            type: type
            scopesData:
            - null
            - null
            name: name
            id: id
            scopes:
            - scopes
            - scopes
            logic: "{}"
            decisionStrategy: "{}"
            config:
              key: config
          - owner: owner
            policies:
            - policies
            - policies
            resourcesData:
            - null
            - null
            description: description
            resources:
            - resources
            - resources
            type: type
            scopesData:
            - null
            - null
            name: name
            id: id
            scopes:
            - scopes
            - scopes
            logic: "{}"
            decisionStrategy: "{}"
            config:
              key: config
          resources:
          - null
          - null
          id: id
          iconUri: iconUri
        type: type
        uri: uri
        icon_uri: icon_uri
      properties:
        id:
          type: string
        name:
          type: string
        uris:
          items:
            type: string
          type: array
          uniqueItems: true
        type:
          type: string
        scopes:
          items:
            $ref: '#/components/schemas/ScopeRepresentation'
          type: array
          uniqueItems: true
        icon_uri:
          type: string
        owner:
          $ref: '#/components/schemas/ResourceRepresentationOwner'
        ownerManagedAccess:
          type: boolean
        displayName:
          type: string
        attributes:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
          type: object
        uri:
          type: string
        scopesUma:
          items:
            $ref: '#/components/schemas/ScopeRepresentation'
          type: array
          uniqueItems: true
      type: object
    ResourceRepresentationOwner:
      example:
        name: name
        id: id
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    ResourceServerRepresentation:
      example:
        clientId: clientId
        name: name
        policies:
        - owner: owner
          policies:
          - policies
          - policies
          resourcesData:
          - null
          - null
          description: description
          resources:
          - resources
          - resources
          type: type
          scopesData:
          - null
          - null
          name: name
          id: id
          scopes:
          - scopes
          - scopes
          logic: "{}"
          decisionStrategy: "{}"
          config:
            key: config
        - owner: owner
          policies:
          - policies
          - policies
          resourcesData:
          - null
          - null
          description: description
          resources:
          - resources
          - resources
          type: type
          scopesData:
          - null
          - null
          name: name
          id: id
          scopes:
          - scopes
          - scopes
          logic: "{}"
          decisionStrategy: "{}"
          config:
            key: config
        resources:
        - owner:
            name: name
            id: id
          uris:
          - uris
          - uris
          scopesUma:
          - displayName: displayName
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - null
            - null
            id: id
            iconUri: iconUri
          - displayName: displayName
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - null
            - null
            id: id
            iconUri: iconUri
          ownerManagedAccess: true
          displayName: displayName
          name: name
          attributes:
            key:
            - attributes
            - attributes
          id: id
          scopes:
          - displayName: displayName
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - null
            - null
            id: id
            iconUri: iconUri
          - displayName: displayName
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - null
            - null
            id: id
            iconUri: iconUri
          type: type
          uri: uri
          icon_uri: icon_uri
        - owner:
            name: name
            id: id
          uris:
          - uris
          - uris
          scopesUma:
          - displayName: displayName
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - null
            - null
            id: id
            iconUri: iconUri
          - displayName: displayName
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - null
            - null
            id: id
            iconUri: iconUri
          ownerManagedAccess: true
          displayName: displayName
          name: name
          attributes:
            key:
            - attributes
            - attributes
          id: id
          scopes:
          - displayName: displayName
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - null
            - null
            id: id
            iconUri: iconUri
          - displayName: displayName
            name: name
            policies:
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            - owner: owner
              policies:
              - policies
              - policies
              resourcesData:
              - null
              - null
              description: description
              resources:
              - resources
              - resources
              type: type
              scopesData:
              - null
              - null
              name: name
              id: id
              scopes:
              - scopes
              - scopes
              logic: "{}"
              decisionStrategy: "{}"
              config:
                key: config
            resources:
            - null
            - null
            id: id
            iconUri: iconUri
          type: type
          uri: uri
          icon_uri: icon_uri
        id: id
        scopes:
        - displayName: displayName
          name: name
          policies:
          - owner: owner
            policies:
            - policies
            - policies
            resourcesData:
            - null
            - null
            description: description
            resources:
            - resources
            - resources
            type: type
            scopesData:
            - null
            - null
            name: name
            id: id
            scopes:
            - scopes
            - scopes
            logic: "{}"
            decisionStrategy: "{}"
            config:
              key: config
          - owner: owner
            policies:
            - policies
            - policies
            resourcesData:
            - null
            - null
            description: description
            resources:
            - resources
            - resources
            type: type
            scopesData:
            - null
            - null
            name: name
            id: id
            scopes:
            - scopes
            - scopes
            logic: "{}"
            decisionStrategy: "{}"
            config:
              key: config
          resources:
          - null
          - null
          id: id
          iconUri: iconUri
        - displayName: displayName
          name: name
          policies:
          - owner: owner
            policies:
            - policies
            - policies
            resourcesData:
            - null
            - null
            description: description
            resources:
            - resources
            - resources
            type: type
            scopesData:
            - null
            - null
            name: name
            id: id
            scopes:
            - scopes
            - scopes
            logic: "{}"
            decisionStrategy: "{}"
            config:
              key: config
          - owner: owner
            policies:
            - policies
            - policies
            resourcesData:
            - null
            - null
            description: description
            resources:
            - resources
            - resources
            type: type
            scopesData:
            - null
            - null
            name: name
            id: id
            scopes:
            - scopes
            - scopes
            logic: "{}"
            decisionStrategy: "{}"
            config:
              key: config
          resources:
          - null
          - null
          id: id
          iconUri: iconUri
        allowRemoteResourceManagement: true
        policyEnforcementMode: "{}"
        decisionStrategy: "{}"
      properties:
        id:
          type: string
        clientId:
          type: string
        name:
          type: string
        allowRemoteResourceManagement:
          type: boolean
        policyEnforcementMode:
          type: object
        resources:
          items:
            $ref: '#/components/schemas/ResourceRepresentation'
          type: array
        policies:
          items:
            $ref: '#/components/schemas/PolicyRepresentation'
          type: array
        scopes:
          items:
            $ref: '#/components/schemas/ScopeRepresentation'
          type: array
        decisionStrategy:
          type: object
      type: object
    RoleRepresentation:
      example:
        composites:
          application:
            key:
            - application
            - application
          client:
            key:
            - client
            - client
          realm:
          - realm
          - realm
        clientRole: true
        composite: true
        name: name
        description: description
        attributes:
          key:
          - attributes
          - attributes
        id: id
        scopeParamRequired: true
        containerId: containerId
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        scopeParamRequired:
          type: boolean
        composite:
          type: boolean
        composites:
          $ref: '#/components/schemas/Composites'
        clientRole:
          type: boolean
        containerId:
          type: string
        attributes:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
          type: object
      type: object
    RolesRepresentation:
      example:
        application:
          key:
          - application
          - application
        client:
          key:
          - client
          - client
        realm:
        - composites:
            application:
              key:
              - application
              - application
            client:
              key:
              - client
              - client
            realm:
            - realm
            - realm
          clientRole: true
          composite: true
          name: name
          description: description
          attributes:
            key:
            - attributes
            - attributes
          id: id
          scopeParamRequired: true
          containerId: containerId
        - composites:
            application:
              key:
              - application
              - application
            client:
              key:
              - client
              - client
            realm:
            - realm
            - realm
          clientRole: true
          composite: true
          name: name
          description: description
          attributes:
            key:
            - attributes
            - attributes
          id: id
          scopeParamRequired: true
          containerId: containerId
      properties:
        realm:
          items:
            $ref: '#/components/schemas/RoleRepresentation'
          type: array
        client:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
          type: object
        application:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
          type: object
      type: object
    ScopeEnforcementMode:
      type: object
    ScopeMappingRepresentation:
      example:
        roles:
        - roles
        - roles
        self: self
        client: client
        clientTemplate: clientTemplate
        clientScope: clientScope
      properties:
        self:
          type: string
        client:
          type: string
        clientTemplate:
          type: string
        clientScope:
          type: string
        roles:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    ScopeRepresentation:
      example:
        displayName: displayName
        name: name
        policies:
        - owner: owner
          policies:
          - policies
          - policies
          resourcesData:
          - null
          - null
          description: description
          resources:
          - resources
          - resources
          type: type
          scopesData:
          - null
          - null
          name: name
          id: id
          scopes:
          - scopes
          - scopes
          logic: "{}"
          decisionStrategy: "{}"
          config:
            key: config
        - owner: owner
          policies:
          - policies
          - policies
          resourcesData:
          - null
          - null
          description: description
          resources:
          - resources
          - resources
          type: type
          scopesData:
          - null
          - null
          name: name
          id: id
          scopes:
          - scopes
          - scopes
          logic: "{}"
          decisionStrategy: "{}"
          config:
            key: config
        resources:
        - null
        - null
        id: id
        iconUri: iconUri
      properties:
        id:
          type: string
        name:
          type: string
        iconUri:
          type: string
        policies:
          items:
            $ref: '#/components/schemas/PolicyRepresentation'
          type: array
        resources:
          items:
            $ref: '#/components/schemas/ResourceRepresentation'
          type: array
        displayName:
          type: string
      type: object
    SocialLinkRepresentation:
      example:
        socialUserId: socialUserId
        socialUsername: socialUsername
        socialProvider: socialProvider
      properties:
        socialProvider:
          type: string
        socialUserId:
          type: string
        socialUsername:
          type: string
      type: object
    UPAttribute:
      example:
        displayName: displayName
        permissions:
          view:
          - view
          - view
          edit:
          - edit
          - edit
        name: name
        annotations:
          key: "{}"
        selector:
          scopes:
          - scopes
          - scopes
        validations:
          key:
            key: ""
        required:
          roles:
          - roles
          - roles
          scopes:
          - scopes
          - scopes
        group: group
      properties:
        name:
          type: string
        displayName:
          type: string
        validations:
          additionalProperties:
            additionalProperties: true
            type: object
          type: object
        annotations:
          additionalProperties:
            type: object
          type: object
        required:
          $ref: '#/components/schemas/UPAttributeRequired'
        permissions:
          $ref: '#/components/schemas/UPAttributePermissions'
        selector:
          $ref: '#/components/schemas/UPAttributeSelector'
        group:
          type: string
      type: object
    UPAttributePermissions:
      example:
        view:
        - view
        - view
        edit:
        - edit
        - edit
      properties:
        view:
          items:
            type: string
          type: array
          uniqueItems: true
        edit:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    UPAttributeRequired:
      example:
        roles:
        - roles
        - roles
        scopes:
        - scopes
        - scopes
      properties:
        roles:
          items:
            type: string
          type: array
          uniqueItems: true
        scopes:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    UPAttributeSelector:
      example:
        scopes:
        - scopes
        - scopes
      properties:
        scopes:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    UPConfig:
      example:
        groups:
        - displayDescription: displayDescription
          name: name
          annotations:
            key: "{}"
          displayHeader: displayHeader
        - displayDescription: displayDescription
          name: name
          annotations:
            key: "{}"
          displayHeader: displayHeader
        attributes:
        - displayName: displayName
          permissions:
            view:
            - view
            - view
            edit:
            - edit
            - edit
          name: name
          annotations:
            key: "{}"
          selector:
            scopes:
            - scopes
            - scopes
          validations:
            key:
              key: ""
          required:
            roles:
            - roles
            - roles
            scopes:
            - scopes
            - scopes
          group: group
        - displayName: displayName
          permissions:
            view:
            - view
            - view
            edit:
            - edit
            - edit
          name: name
          annotations:
            key: "{}"
          selector:
            scopes:
            - scopes
            - scopes
          validations:
            key:
              key: ""
          required:
            roles:
            - roles
            - roles
            scopes:
            - scopes
            - scopes
          group: group
      properties:
        attributes:
          items:
            $ref: '#/components/schemas/UPAttribute'
          type: array
        groups:
          items:
            $ref: '#/components/schemas/UPGroup'
          type: array
      type: object
    UPGroup:
      example:
        displayDescription: displayDescription
        name: name
        annotations:
          key: "{}"
        displayHeader: displayHeader
      properties:
        name:
          type: string
        displayHeader:
          type: string
        displayDescription:
          type: string
        annotations:
          additionalProperties:
            type: object
          type: object
      type: object
    UserConsentRepresentation:
      example:
        grantedRealmRoles:
        - grantedRealmRoles
        - grantedRealmRoles
        lastUpdatedDate: 8
        clientId: clientId
        createdDate: 4
        grantedClientScopes:
        - grantedClientScopes
        - grantedClientScopes
      properties:
        clientId:
          type: string
        grantedClientScopes:
          items:
            type: string
          type: array
        createdDate:
          format: int64
          type: integer
        lastUpdatedDate:
          format: int64
          type: integer
        grantedRealmRoles:
          items:
            type: string
          type: array
      type: object
    UserFederationMapperRepresentation:
      example:
        federationProviderDisplayName: federationProviderDisplayName
        name: name
        id: id
        config:
          key: config
        federationMapperType: federationMapperType
      properties:
        id:
          type: string
        name:
          type: string
        federationProviderDisplayName:
          type: string
        federationMapperType:
          type: string
        config:
          additionalProperties:
            type: string
          type: object
      type: object
    UserFederationProviderRepresentation:
      example:
        changedSyncPeriod: 4
        fullSyncPeriod: 3
        lastSync: 0
        displayName: displayName
        id: id
        priority: 5
        config:
          key: config
        providerName: providerName
      properties:
        id:
          type: string
        displayName:
          type: string
        providerName:
          type: string
        config:
          additionalProperties:
            type: string
          type: object
        priority:
          format: int32
          type: integer
        fullSyncPeriod:
          format: int32
          type: integer
        changedSyncPeriod:
          format: int32
          type: integer
        lastSync:
          format: int32
          type: integer
      type: object
    UserProfileAttributeGroupMetadata:
      example:
        displayDescription: displayDescription
        name: name
        annotations:
          key: "{}"
        displayHeader: displayHeader
      properties:
        name:
          type: string
        displayHeader:
          type: string
        displayDescription:
          type: string
        annotations:
          additionalProperties:
            type: object
          type: object
      type: object
    UserProfileAttributeMetadata:
      example:
        displayName: displayName
        validators:
          key:
            key: ""
        name: name
        annotations:
          key: "{}"
        readOnly: true
        required: true
        group: group
      properties:
        name:
          type: string
        displayName:
          type: string
        required:
          type: boolean
        readOnly:
          type: boolean
        annotations:
          additionalProperties:
            type: object
          type: object
        validators:
          additionalProperties:
            additionalProperties: true
            type: object
          type: object
        group:
          type: string
      type: object
    UserProfileMetadata:
      example:
        groups:
        - displayDescription: displayDescription
          name: name
          annotations:
            key: "{}"
          displayHeader: displayHeader
        - displayDescription: displayDescription
          name: name
          annotations:
            key: "{}"
          displayHeader: displayHeader
        attributes:
        - displayName: displayName
          validators:
            key:
              key: ""
          name: name
          annotations:
            key: "{}"
          readOnly: true
          required: true
          group: group
        - displayName: displayName
          validators:
            key:
              key: ""
          name: name
          annotations:
            key: "{}"
          readOnly: true
          required: true
          group: group
      properties:
        attributes:
          items:
            $ref: '#/components/schemas/UserProfileAttributeMetadata'
          type: array
        groups:
          items:
            $ref: '#/components/schemas/UserProfileAttributeGroupMetadata'
          type: array
      type: object
    UserRepresentation:
      example:
        totp: true
        lastName: lastName
        serviceAccountClientId: serviceAccountClientId
        socialLinks:
        - socialUserId: socialUserId
          socialUsername: socialUsername
          socialProvider: socialProvider
        - socialUserId: socialUserId
          socialUsername: socialUsername
          socialProvider: socialProvider
        federatedIdentities:
        - userName: userName
          userId: userId
          identityProvider: identityProvider
        - userName: userName
          userId: userId
          identityProvider: identityProvider
        access:
          key: true
        credentials:
        - userLabel: userLabel
          temporary: true
          period: 0
          hashedSaltedValue: hashedSaltedValue
          salt: salt
          hashIterations: 0
          counter: 7
          type: type
          priority: 7
          secretData: secretData
          createdDate: 3
          digits: 6
          id: id
          credentialData: credentialData
          value: value
          device: device
          config:
            key: ""
          algorithm: algorithm
        - userLabel: userLabel
          temporary: true
          period: 0
          hashedSaltedValue: hashedSaltedValue
          salt: salt
          hashIterations: 0
          counter: 7
          type: type
          priority: 7
          secretData: secretData
          createdDate: 3
          digits: 6
          id: id
          credentialData: credentialData
          value: value
          device: device
          config:
            key: ""
          algorithm: algorithm
        origin: origin
        enabled: true
        notBefore: 7
        id: id
        email: email
        clientRoles:
          key:
          - clientRoles
          - clientRoles
        applicationRoles:
          key:
          - applicationRoles
          - applicationRoles
        createdTimestamp: 3
        groups:
        - groups
        - groups
        clientConsents:
        - grantedRealmRoles:
          - grantedRealmRoles
          - grantedRealmRoles
          lastUpdatedDate: 8
          clientId: clientId
          createdDate: 4
          grantedClientScopes:
          - grantedClientScopes
          - grantedClientScopes
        - grantedRealmRoles:
          - grantedRealmRoles
          - grantedRealmRoles
          lastUpdatedDate: 8
          clientId: clientId
          createdDate: 4
          grantedClientScopes:
          - grantedClientScopes
          - grantedClientScopes
        disableableCredentialTypes:
        - disableableCredentialTypes
        - disableableCredentialTypes
        emailVerified: true
        firstName: firstName
        realmRoles:
        - realmRoles
        - realmRoles
        requiredActions:
        - requiredActions
        - requiredActions
        userProfileMetadata:
          groups:
          - displayDescription: displayDescription
            name: name
            annotations:
              key: "{}"
            displayHeader: displayHeader
          - displayDescription: displayDescription
            name: name
            annotations:
              key: "{}"
            displayHeader: displayHeader
          attributes:
          - displayName: displayName
            validators:
              key:
                key: ""
            name: name
            annotations:
              key: "{}"
            readOnly: true
            required: true
            group: group
          - displayName: displayName
            validators:
              key:
                key: ""
            name: name
            annotations:
              key: "{}"
            readOnly: true
            required: true
            group: group
        self: self
        federationLink: federationLink
        attributes:
          key:
          - attributes
          - attributes
        username: username
      properties:
        self:
          type: string
        id:
          type: string
        origin:
          type: string
        createdTimestamp:
          format: int64
          type: integer
        username:
          type: string
        enabled:
          type: boolean
        totp:
          type: boolean
        emailVerified:
          type: boolean
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        federationLink:
          type: string
        serviceAccountClientId:
          type: string
        attributes:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
          type: object
        credentials:
          items:
            $ref: '#/components/schemas/CredentialRepresentation'
          type: array
        disableableCredentialTypes:
          items:
            type: string
          type: array
          uniqueItems: true
        requiredActions:
          items:
            type: string
          type: array
        federatedIdentities:
          items:
            $ref: '#/components/schemas/FederatedIdentityRepresentation'
          type: array
        realmRoles:
          items:
            type: string
          type: array
        clientRoles:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
          type: object
        clientConsents:
          items:
            $ref: '#/components/schemas/UserConsentRepresentation'
          type: array
        notBefore:
          format: int32
          type: integer
        applicationRoles:
          additionalProperties:
            items:
              description: TODO default missing array inner type to string
              type: string
            type: array
          type: object
        socialLinks:
          items:
            $ref: '#/components/schemas/SocialLinkRepresentation'
          type: array
        groups:
          items:
            type: string
          type: array
        access:
          additionalProperties:
            type: boolean
          type: object
        userProfileMetadata:
          $ref: '#/components/schemas/UserProfileMetadata'
      type: object
    UserSessionRepresentation:
      example:
        clients:
          key: clients
        ipAddress: ipAddress
        start: 0
        lastAccess: 6
        id: id
        rememberMe: true
        userId: userId
        username: username
      properties:
        id:
          type: string
        username:
          type: string
        userId:
          type: string
        ipAddress:
          type: string
        start:
          format: int64
          type: integer
        lastAccess:
          format: int64
          type: integer
        rememberMe:
          type: boolean
        clients:
          additionalProperties:
            type: string
          type: object
      type: object
  securitySchemes:
    access_token:
      scheme: bearer
      type: http
