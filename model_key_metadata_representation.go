/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the KeyMetadataRepresentation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyMetadataRepresentation{}

// KeyMetadataRepresentation struct for KeyMetadataRepresentation
type KeyMetadataRepresentation struct {
	ProviderId       *string                `json:"providerId,omitempty"`
	ProviderPriority *int64                 `json:"providerPriority,omitempty"`
	Kid              *string                `json:"kid,omitempty"`
	Status           *string                `json:"status,omitempty"`
	Type             *string                `json:"type,omitempty"`
	Algorithm        *string                `json:"algorithm,omitempty"`
	PublicKey        *string                `json:"publicKey,omitempty"`
	Certificate      *string                `json:"certificate,omitempty"`
	Use              map[string]interface{} `json:"use,omitempty"`
	ValidTo          *int64                 `json:"validTo,omitempty"`
}

// NewKeyMetadataRepresentation instantiates a new KeyMetadataRepresentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyMetadataRepresentation() *KeyMetadataRepresentation {
	this := KeyMetadataRepresentation{}
	return &this
}

// NewKeyMetadataRepresentationWithDefaults instantiates a new KeyMetadataRepresentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyMetadataRepresentationWithDefaults() *KeyMetadataRepresentation {
	this := KeyMetadataRepresentation{}
	return &this
}

// GetProviderId returns the ProviderId field value if set, zero value otherwise.
func (o *KeyMetadataRepresentation) GetProviderId() string {
	if o == nil || IsNil(o.ProviderId) {
		var ret string
		return ret
	}
	return *o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyMetadataRepresentation) GetProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderId) {
		return nil, false
	}
	return o.ProviderId, true
}

// HasProviderId returns a boolean if a field has been set.
func (o *KeyMetadataRepresentation) HasProviderId() bool {
	if o != nil && !IsNil(o.ProviderId) {
		return true
	}

	return false
}

// SetProviderId gets a reference to the given string and assigns it to the ProviderId field.
func (o *KeyMetadataRepresentation) SetProviderId(v string) {
	o.ProviderId = &v
}

// GetProviderPriority returns the ProviderPriority field value if set, zero value otherwise.
func (o *KeyMetadataRepresentation) GetProviderPriority() int64 {
	if o == nil || IsNil(o.ProviderPriority) {
		var ret int64
		return ret
	}
	return *o.ProviderPriority
}

// GetProviderPriorityOk returns a tuple with the ProviderPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyMetadataRepresentation) GetProviderPriorityOk() (*int64, bool) {
	if o == nil || IsNil(o.ProviderPriority) {
		return nil, false
	}
	return o.ProviderPriority, true
}

// HasProviderPriority returns a boolean if a field has been set.
func (o *KeyMetadataRepresentation) HasProviderPriority() bool {
	if o != nil && !IsNil(o.ProviderPriority) {
		return true
	}

	return false
}

// SetProviderPriority gets a reference to the given int64 and assigns it to the ProviderPriority field.
func (o *KeyMetadataRepresentation) SetProviderPriority(v int64) {
	o.ProviderPriority = &v
}

// GetKid returns the Kid field value if set, zero value otherwise.
func (o *KeyMetadataRepresentation) GetKid() string {
	if o == nil || IsNil(o.Kid) {
		var ret string
		return ret
	}
	return *o.Kid
}

// GetKidOk returns a tuple with the Kid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyMetadataRepresentation) GetKidOk() (*string, bool) {
	if o == nil || IsNil(o.Kid) {
		return nil, false
	}
	return o.Kid, true
}

// HasKid returns a boolean if a field has been set.
func (o *KeyMetadataRepresentation) HasKid() bool {
	if o != nil && !IsNil(o.Kid) {
		return true
	}

	return false
}

// SetKid gets a reference to the given string and assigns it to the Kid field.
func (o *KeyMetadataRepresentation) SetKid(v string) {
	o.Kid = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *KeyMetadataRepresentation) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyMetadataRepresentation) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *KeyMetadataRepresentation) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *KeyMetadataRepresentation) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *KeyMetadataRepresentation) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyMetadataRepresentation) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *KeyMetadataRepresentation) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *KeyMetadataRepresentation) SetType(v string) {
	o.Type = &v
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *KeyMetadataRepresentation) GetAlgorithm() string {
	if o == nil || IsNil(o.Algorithm) {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyMetadataRepresentation) GetAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *KeyMetadataRepresentation) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *KeyMetadataRepresentation) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *KeyMetadataRepresentation) GetPublicKey() string {
	if o == nil || IsNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyMetadataRepresentation) GetPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *KeyMetadataRepresentation) HasPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *KeyMetadataRepresentation) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *KeyMetadataRepresentation) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyMetadataRepresentation) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *KeyMetadataRepresentation) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *KeyMetadataRepresentation) SetCertificate(v string) {
	o.Certificate = &v
}

// GetUse returns the Use field value if set, zero value otherwise.
func (o *KeyMetadataRepresentation) GetUse() map[string]interface{} {
	if o == nil || IsNil(o.Use) {
		var ret map[string]interface{}
		return ret
	}
	return o.Use
}

// GetUseOk returns a tuple with the Use field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyMetadataRepresentation) GetUseOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Use) {
		return map[string]interface{}{}, false
	}
	return o.Use, true
}

// HasUse returns a boolean if a field has been set.
func (o *KeyMetadataRepresentation) HasUse() bool {
	if o != nil && !IsNil(o.Use) {
		return true
	}

	return false
}

// SetUse gets a reference to the given map[string]interface{} and assigns it to the Use field.
func (o *KeyMetadataRepresentation) SetUse(v map[string]interface{}) {
	o.Use = v
}

// GetValidTo returns the ValidTo field value if set, zero value otherwise.
func (o *KeyMetadataRepresentation) GetValidTo() int64 {
	if o == nil || IsNil(o.ValidTo) {
		var ret int64
		return ret
	}
	return *o.ValidTo
}

// GetValidToOk returns a tuple with the ValidTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyMetadataRepresentation) GetValidToOk() (*int64, bool) {
	if o == nil || IsNil(o.ValidTo) {
		return nil, false
	}
	return o.ValidTo, true
}

// HasValidTo returns a boolean if a field has been set.
func (o *KeyMetadataRepresentation) HasValidTo() bool {
	if o != nil && !IsNil(o.ValidTo) {
		return true
	}

	return false
}

// SetValidTo gets a reference to the given int64 and assigns it to the ValidTo field.
func (o *KeyMetadataRepresentation) SetValidTo(v int64) {
	o.ValidTo = &v
}

func (o KeyMetadataRepresentation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyMetadataRepresentation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProviderId) {
		toSerialize["providerId"] = o.ProviderId
	}
	if !IsNil(o.ProviderPriority) {
		toSerialize["providerPriority"] = o.ProviderPriority
	}
	if !IsNil(o.Kid) {
		toSerialize["kid"] = o.Kid
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	if !IsNil(o.PublicKey) {
		toSerialize["publicKey"] = o.PublicKey
	}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.Use) {
		toSerialize["use"] = o.Use
	}
	if !IsNil(o.ValidTo) {
		toSerialize["validTo"] = o.ValidTo
	}
	return toSerialize, nil
}

type NullableKeyMetadataRepresentation struct {
	value *KeyMetadataRepresentation
	isSet bool
}

func (v NullableKeyMetadataRepresentation) Get() *KeyMetadataRepresentation {
	return v.value
}

func (v *NullableKeyMetadataRepresentation) Set(val *KeyMetadataRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyMetadataRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyMetadataRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyMetadataRepresentation(val *KeyMetadataRepresentation) *NullableKeyMetadataRepresentation {
	return &NullableKeyMetadataRepresentation{value: val, isSet: true}
}

func (v NullableKeyMetadataRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyMetadataRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
