/*
Keycloak Admin REST API

Testing IdentityProvidersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_IdentityProvidersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IdentityProvidersAPIService DeleteInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		httpRes, err := apiClient.IdentityProvidersAPI.DeleteInstance(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService DeleteMapper", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string
		var id string

		httpRes, err := apiClient.IdentityProvidersAPI.DeleteMapper(context.Background(), realm, alias, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService GetExport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		httpRes, err := apiClient.IdentityProvidersAPI.GetExport(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService GetIdentityProviderProvider", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var providerId string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.GetIdentityProviderProvider(context.Background(), realm, providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService GetInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.GetInstance(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService GetInstanceManagementPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.GetInstanceManagementPermissions(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService GetInstances", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.GetInstances(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService GetMapper", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string
		var id string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.GetMapper(context.Background(), realm, alias, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService GetMapperTypes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.GetMapperTypes(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService GetMappers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.GetMappers(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService PostImportConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.PostImportConfig(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService PostInstances", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.IdentityProvidersAPI.PostInstances(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService PostMappers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		httpRes, err := apiClient.IdentityProvidersAPI.PostMappers(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService PutInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		httpRes, err := apiClient.IdentityProvidersAPI.PutInstance(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService PutInstanceManagementPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.PutInstanceManagementPermissions(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService PutMapper", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string
		var id string

		httpRes, err := apiClient.IdentityProvidersAPI.PutMapper(context.Background(), realm, alias, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
