/*
Keycloak Admin REST API

Testing AuthenticationManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_AuthenticationManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AuthenticationManagementAPIService DeleteConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.AuthenticationManagementAPI.DeleteConfig(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService DeleteExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var executionId string

		httpRes, err := apiClient.AuthenticationManagementAPI.DeleteExecution(context.Background(), realm, executionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService DeleteFlow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.AuthenticationManagementAPI.DeleteFlow(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService DeleteRequiredAction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		httpRes, err := apiClient.AuthenticationManagementAPI.DeleteRequiredAction(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService GetAuthenticationConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.AuthenticationManagementAPI.GetAuthenticationConfig(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService GetAuthenticatorProviders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.AuthenticationManagementAPI.GetAuthenticatorProviders(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService GetClientAuthenticatorProviders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.AuthenticationManagementAPI.GetClientAuthenticatorProviders(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService GetConfigDescription", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var providerId string

		resp, httpRes, err := apiClient.AuthenticationManagementAPI.GetConfigDescription(context.Background(), realm, providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService GetExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var executionId string

		httpRes, err := apiClient.AuthenticationManagementAPI.GetExecution(context.Background(), realm, executionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService GetExecutionConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var executionId string
		var id string

		resp, httpRes, err := apiClient.AuthenticationManagementAPI.GetExecutionConfig(context.Background(), realm, executionId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService GetExecutions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var flowAlias string

		httpRes, err := apiClient.AuthenticationManagementAPI.GetExecutions(context.Background(), realm, flowAlias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService GetFlow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.AuthenticationManagementAPI.GetFlow(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService GetFlows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.AuthenticationManagementAPI.GetFlows(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService GetFormActionProviders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.AuthenticationManagementAPI.GetFormActionProviders(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService GetFormProviders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.AuthenticationManagementAPI.GetFormProviders(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService GetPerClientConfigDescription", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.AuthenticationManagementAPI.GetPerClientConfigDescription(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService GetRequiredAction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		resp, httpRes, err := apiClient.AuthenticationManagementAPI.GetRequiredAction(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService GetRequiredActions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.AuthenticationManagementAPI.GetRequiredActions(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService GetUnregisteredRequiredActions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.AuthenticationManagementAPI.GetUnregisteredRequiredActions(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService PostAuthenticationConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.AuthenticationManagementAPI.PostAuthenticationConfig(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService PostCopy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var flowAlias string

		httpRes, err := apiClient.AuthenticationManagementAPI.PostCopy(context.Background(), realm, flowAlias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService PostExecution", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var flowAlias string

		httpRes, err := apiClient.AuthenticationManagementAPI.PostExecution(context.Background(), realm, flowAlias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService PostExecutionConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var executionId string

		httpRes, err := apiClient.AuthenticationManagementAPI.PostExecutionConfig(context.Background(), realm, executionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService PostExecutionLowerPriority", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var executionId string

		httpRes, err := apiClient.AuthenticationManagementAPI.PostExecutionLowerPriority(context.Background(), realm, executionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService PostExecutionRaisePriority", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var executionId string

		httpRes, err := apiClient.AuthenticationManagementAPI.PostExecutionRaisePriority(context.Background(), realm, executionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService PostExecutions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.AuthenticationManagementAPI.PostExecutions(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService PostFlow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var flowAlias string

		httpRes, err := apiClient.AuthenticationManagementAPI.PostFlow(context.Background(), realm, flowAlias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService PostFlows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.AuthenticationManagementAPI.PostFlows(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService PostRegisterRequiredAction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.AuthenticationManagementAPI.PostRegisterRequiredAction(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService PostRequiredActionLowerPriority", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		httpRes, err := apiClient.AuthenticationManagementAPI.PostRequiredActionLowerPriority(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService PostRequiredActionRaisePriority", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		httpRes, err := apiClient.AuthenticationManagementAPI.PostRequiredActionRaisePriority(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService PutAuthenticationConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.AuthenticationManagementAPI.PutAuthenticationConfig(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService PutExecutions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var flowAlias string

		httpRes, err := apiClient.AuthenticationManagementAPI.PutExecutions(context.Background(), realm, flowAlias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService PutFlow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.AuthenticationManagementAPI.PutFlow(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationManagementAPIService PutRequiredAction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		httpRes, err := apiClient.AuthenticationManagementAPI.PutRequiredAction(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
