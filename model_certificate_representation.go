/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CertificateRepresentation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateRepresentation{}

// CertificateRepresentation struct for CertificateRepresentation
type CertificateRepresentation struct {
	PrivateKey  *string `json:"privateKey,omitempty"`
	PublicKey   *string `json:"publicKey,omitempty"`
	Certificate *string `json:"certificate,omitempty"`
	Kid         *string `json:"kid,omitempty"`
}

// NewCertificateRepresentation instantiates a new CertificateRepresentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateRepresentation() *CertificateRepresentation {
	this := CertificateRepresentation{}
	return &this
}

// NewCertificateRepresentationWithDefaults instantiates a new CertificateRepresentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateRepresentationWithDefaults() *CertificateRepresentation {
	this := CertificateRepresentation{}
	return &this
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *CertificateRepresentation) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey) {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRepresentation) GetPrivateKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKey) {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *CertificateRepresentation) HasPrivateKey() bool {
	if o != nil && !IsNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *CertificateRepresentation) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *CertificateRepresentation) GetPublicKey() string {
	if o == nil || IsNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRepresentation) GetPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *CertificateRepresentation) HasPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *CertificateRepresentation) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *CertificateRepresentation) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRepresentation) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *CertificateRepresentation) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *CertificateRepresentation) SetCertificate(v string) {
	o.Certificate = &v
}

// GetKid returns the Kid field value if set, zero value otherwise.
func (o *CertificateRepresentation) GetKid() string {
	if o == nil || IsNil(o.Kid) {
		var ret string
		return ret
	}
	return *o.Kid
}

// GetKidOk returns a tuple with the Kid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRepresentation) GetKidOk() (*string, bool) {
	if o == nil || IsNil(o.Kid) {
		return nil, false
	}
	return o.Kid, true
}

// HasKid returns a boolean if a field has been set.
func (o *CertificateRepresentation) HasKid() bool {
	if o != nil && !IsNil(o.Kid) {
		return true
	}

	return false
}

// SetKid gets a reference to the given string and assigns it to the Kid field.
func (o *CertificateRepresentation) SetKid(v string) {
	o.Kid = &v
}

func (o CertificateRepresentation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateRepresentation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PrivateKey) {
		toSerialize["privateKey"] = o.PrivateKey
	}
	if !IsNil(o.PublicKey) {
		toSerialize["publicKey"] = o.PublicKey
	}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.Kid) {
		toSerialize["kid"] = o.Kid
	}
	return toSerialize, nil
}

type NullableCertificateRepresentation struct {
	value *CertificateRepresentation
	isSet bool
}

func (v NullableCertificateRepresentation) Get() *CertificateRepresentation {
	return v.value
}

func (v *NullableCertificateRepresentation) Set(val *CertificateRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateRepresentation(val *CertificateRepresentation) *NullableCertificateRepresentation {
	return &NullableCertificateRepresentation{value: val, isSet: true}
}

func (v NullableCertificateRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
