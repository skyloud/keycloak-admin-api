/*
Keycloak Admin REST API

Testing ProtocolMappersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_ProtocolMappersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProtocolMappersAPIService DeleteClientProtocolMappersModel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id1 string
		var id2 string

		httpRes, err := apiClient.ProtocolMappersAPI.DeleteClientProtocolMappersModel(context.Background(), realm, id1, id2).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService DeleteClientScopeProtocolMappersModel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id1 string
		var id2 string

		httpRes, err := apiClient.ProtocolMappersAPI.DeleteClientScopeProtocolMappersModel(context.Background(), realm, id1, id2).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService DeleteClientTemplateProtocolMappersModel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id1 string
		var id2 string

		httpRes, err := apiClient.ProtocolMappersAPI.DeleteClientTemplateProtocolMappersModel(context.Background(), realm, id1, id2).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService GetClientProtocolMappersModel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id1 string
		var id2 string

		resp, httpRes, err := apiClient.ProtocolMappersAPI.GetClientProtocolMappersModel(context.Background(), realm, id1, id2).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService GetClientProtocolMappersModels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.ProtocolMappersAPI.GetClientProtocolMappersModels(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService GetClientProtocolMappersProtocol", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var protocol string

		resp, httpRes, err := apiClient.ProtocolMappersAPI.GetClientProtocolMappersProtocol(context.Background(), realm, id, protocol).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService GetClientScopeProtocolMappersModel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id1 string
		var id2 string

		resp, httpRes, err := apiClient.ProtocolMappersAPI.GetClientScopeProtocolMappersModel(context.Background(), realm, id1, id2).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService GetClientScopeProtocolMappersModels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.ProtocolMappersAPI.GetClientScopeProtocolMappersModels(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService GetClientScopeProtocolMappersProtocol", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var protocol string

		resp, httpRes, err := apiClient.ProtocolMappersAPI.GetClientScopeProtocolMappersProtocol(context.Background(), realm, id, protocol).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService GetClientTemplateProtocolMappersModel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id1 string
		var id2 string

		resp, httpRes, err := apiClient.ProtocolMappersAPI.GetClientTemplateProtocolMappersModel(context.Background(), realm, id1, id2).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService GetClientTemplateProtocolMappersModels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.ProtocolMappersAPI.GetClientTemplateProtocolMappersModels(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService GetClientTemplateProtocolMappersProtocol", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var protocol string

		resp, httpRes, err := apiClient.ProtocolMappersAPI.GetClientTemplateProtocolMappersProtocol(context.Background(), realm, id, protocol).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService PostClientProtocolMappersAddModels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.ProtocolMappersAPI.PostClientProtocolMappersAddModels(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService PostClientProtocolMappersModels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.ProtocolMappersAPI.PostClientProtocolMappersModels(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService PostClientScopeProtocolMappersAddModels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.ProtocolMappersAPI.PostClientScopeProtocolMappersAddModels(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService PostClientScopeProtocolMappersModels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.ProtocolMappersAPI.PostClientScopeProtocolMappersModels(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService PostClientTemplateProtocolMappersAddModels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.ProtocolMappersAPI.PostClientTemplateProtocolMappersAddModels(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService PostClientTemplateProtocolMappersModels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.ProtocolMappersAPI.PostClientTemplateProtocolMappersModels(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService PutClientProtocolMappersModel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id1 string
		var id2 string

		httpRes, err := apiClient.ProtocolMappersAPI.PutClientProtocolMappersModel(context.Background(), realm, id1, id2).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService PutClientScopeProtocolMappersModel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id1 string
		var id2 string

		httpRes, err := apiClient.ProtocolMappersAPI.PutClientScopeProtocolMappersModel(context.Background(), realm, id1, id2).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtocolMappersAPIService PutClientTemplateProtocolMappersModel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id1 string
		var id2 string

		httpRes, err := apiClient.ProtocolMappersAPI.PutClientTemplateProtocolMappersModel(context.Background(), realm, id1, id2).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
