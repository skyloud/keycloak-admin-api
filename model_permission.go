/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Permission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Permission{}

// Permission struct for Permission
type Permission struct {
	Rsid   *string              `json:"rsid,omitempty"`
	Rsname *string              `json:"rsname,omitempty"`
	Scopes []string             `json:"scopes,omitempty"`
	Claims *map[string][]string `json:"claims,omitempty"`
}

// NewPermission instantiates a new Permission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermission() *Permission {
	this := Permission{}
	return &this
}

// NewPermissionWithDefaults instantiates a new Permission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionWithDefaults() *Permission {
	this := Permission{}
	return &this
}

// GetRsid returns the Rsid field value if set, zero value otherwise.
func (o *Permission) GetRsid() string {
	if o == nil || IsNil(o.Rsid) {
		var ret string
		return ret
	}
	return *o.Rsid
}

// GetRsidOk returns a tuple with the Rsid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permission) GetRsidOk() (*string, bool) {
	if o == nil || IsNil(o.Rsid) {
		return nil, false
	}
	return o.Rsid, true
}

// HasRsid returns a boolean if a field has been set.
func (o *Permission) HasRsid() bool {
	if o != nil && !IsNil(o.Rsid) {
		return true
	}

	return false
}

// SetRsid gets a reference to the given string and assigns it to the Rsid field.
func (o *Permission) SetRsid(v string) {
	o.Rsid = &v
}

// GetRsname returns the Rsname field value if set, zero value otherwise.
func (o *Permission) GetRsname() string {
	if o == nil || IsNil(o.Rsname) {
		var ret string
		return ret
	}
	return *o.Rsname
}

// GetRsnameOk returns a tuple with the Rsname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permission) GetRsnameOk() (*string, bool) {
	if o == nil || IsNil(o.Rsname) {
		return nil, false
	}
	return o.Rsname, true
}

// HasRsname returns a boolean if a field has been set.
func (o *Permission) HasRsname() bool {
	if o != nil && !IsNil(o.Rsname) {
		return true
	}

	return false
}

// SetRsname gets a reference to the given string and assigns it to the Rsname field.
func (o *Permission) SetRsname(v string) {
	o.Rsname = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *Permission) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permission) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *Permission) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *Permission) SetScopes(v []string) {
	o.Scopes = v
}

// GetClaims returns the Claims field value if set, zero value otherwise.
func (o *Permission) GetClaims() map[string][]string {
	if o == nil || IsNil(o.Claims) {
		var ret map[string][]string
		return ret
	}
	return *o.Claims
}

// GetClaimsOk returns a tuple with the Claims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permission) GetClaimsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Claims) {
		return nil, false
	}
	return o.Claims, true
}

// HasClaims returns a boolean if a field has been set.
func (o *Permission) HasClaims() bool {
	if o != nil && !IsNil(o.Claims) {
		return true
	}

	return false
}

// SetClaims gets a reference to the given map[string][]string and assigns it to the Claims field.
func (o *Permission) SetClaims(v map[string][]string) {
	o.Claims = &v
}

func (o Permission) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Permission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rsid) {
		toSerialize["rsid"] = o.Rsid
	}
	if !IsNil(o.Rsname) {
		toSerialize["rsname"] = o.Rsname
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.Claims) {
		toSerialize["claims"] = o.Claims
	}
	return toSerialize, nil
}

type NullablePermission struct {
	value *Permission
	isSet bool
}

func (v NullablePermission) Get() *Permission {
	return v.value
}

func (v *NullablePermission) Set(val *Permission) {
	v.value = val
	v.isSet = true
}

func (v NullablePermission) IsSet() bool {
	return v.isSet
}

func (v *NullablePermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermission(val *Permission) *NullablePermission {
	return &NullablePermission{value: val, isSet: true}
}

func (v NullablePermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
