/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MethodConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MethodConfig{}

// MethodConfig struct for MethodConfig
type MethodConfig struct {
	Method                *string                `json:"method,omitempty"`
	Scopes                []string               `json:"scopes,omitempty"`
	ScopesEnforcementMode map[string]interface{} `json:"scopes-enforcement-mode,omitempty"`
}

// NewMethodConfig instantiates a new MethodConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMethodConfig() *MethodConfig {
	this := MethodConfig{}
	return &this
}

// NewMethodConfigWithDefaults instantiates a new MethodConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMethodConfigWithDefaults() *MethodConfig {
	this := MethodConfig{}
	return &this
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *MethodConfig) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodConfig) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *MethodConfig) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *MethodConfig) SetMethod(v string) {
	o.Method = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *MethodConfig) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodConfig) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *MethodConfig) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *MethodConfig) SetScopes(v []string) {
	o.Scopes = v
}

// GetScopesEnforcementMode returns the ScopesEnforcementMode field value if set, zero value otherwise.
func (o *MethodConfig) GetScopesEnforcementMode() map[string]interface{} {
	if o == nil || IsNil(o.ScopesEnforcementMode) {
		var ret map[string]interface{}
		return ret
	}
	return o.ScopesEnforcementMode
}

// GetScopesEnforcementModeOk returns a tuple with the ScopesEnforcementMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodConfig) GetScopesEnforcementModeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ScopesEnforcementMode) {
		return map[string]interface{}{}, false
	}
	return o.ScopesEnforcementMode, true
}

// HasScopesEnforcementMode returns a boolean if a field has been set.
func (o *MethodConfig) HasScopesEnforcementMode() bool {
	if o != nil && !IsNil(o.ScopesEnforcementMode) {
		return true
	}

	return false
}

// SetScopesEnforcementMode gets a reference to the given map[string]interface{} and assigns it to the ScopesEnforcementMode field.
func (o *MethodConfig) SetScopesEnforcementMode(v map[string]interface{}) {
	o.ScopesEnforcementMode = v
}

func (o MethodConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MethodConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.ScopesEnforcementMode) {
		toSerialize["scopes-enforcement-mode"] = o.ScopesEnforcementMode
	}
	return toSerialize, nil
}

type NullableMethodConfig struct {
	value *MethodConfig
	isSet bool
}

func (v NullableMethodConfig) Get() *MethodConfig {
	return v.value
}

func (v *NullableMethodConfig) Set(val *MethodConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableMethodConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableMethodConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMethodConfig(val *MethodConfig) *NullableMethodConfig {
	return &NullableMethodConfig{value: val, isSet: true}
}

func (v NullableMethodConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMethodConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
