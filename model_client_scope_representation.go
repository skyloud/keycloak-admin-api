/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ClientScopeRepresentation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientScopeRepresentation{}

// ClientScopeRepresentation struct for ClientScopeRepresentation
type ClientScopeRepresentation struct {
	Id              *string                        `json:"id,omitempty"`
	Name            *string                        `json:"name,omitempty"`
	Description     *string                        `json:"description,omitempty"`
	Protocol        *string                        `json:"protocol,omitempty"`
	Attributes      *map[string]string             `json:"attributes,omitempty"`
	ProtocolMappers []ProtocolMapperRepresentation `json:"protocolMappers,omitempty"`
}

// NewClientScopeRepresentation instantiates a new ClientScopeRepresentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientScopeRepresentation() *ClientScopeRepresentation {
	this := ClientScopeRepresentation{}
	return &this
}

// NewClientScopeRepresentationWithDefaults instantiates a new ClientScopeRepresentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientScopeRepresentationWithDefaults() *ClientScopeRepresentation {
	this := ClientScopeRepresentation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ClientScopeRepresentation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientScopeRepresentation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ClientScopeRepresentation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ClientScopeRepresentation) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ClientScopeRepresentation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientScopeRepresentation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ClientScopeRepresentation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ClientScopeRepresentation) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ClientScopeRepresentation) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientScopeRepresentation) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ClientScopeRepresentation) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ClientScopeRepresentation) SetDescription(v string) {
	o.Description = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *ClientScopeRepresentation) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientScopeRepresentation) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *ClientScopeRepresentation) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *ClientScopeRepresentation) SetProtocol(v string) {
	o.Protocol = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ClientScopeRepresentation) GetAttributes() map[string]string {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]string
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientScopeRepresentation) GetAttributesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ClientScopeRepresentation) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]string and assigns it to the Attributes field.
func (o *ClientScopeRepresentation) SetAttributes(v map[string]string) {
	o.Attributes = &v
}

// GetProtocolMappers returns the ProtocolMappers field value if set, zero value otherwise.
func (o *ClientScopeRepresentation) GetProtocolMappers() []ProtocolMapperRepresentation {
	if o == nil || IsNil(o.ProtocolMappers) {
		var ret []ProtocolMapperRepresentation
		return ret
	}
	return o.ProtocolMappers
}

// GetProtocolMappersOk returns a tuple with the ProtocolMappers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientScopeRepresentation) GetProtocolMappersOk() ([]ProtocolMapperRepresentation, bool) {
	if o == nil || IsNil(o.ProtocolMappers) {
		return nil, false
	}
	return o.ProtocolMappers, true
}

// HasProtocolMappers returns a boolean if a field has been set.
func (o *ClientScopeRepresentation) HasProtocolMappers() bool {
	if o != nil && !IsNil(o.ProtocolMappers) {
		return true
	}

	return false
}

// SetProtocolMappers gets a reference to the given []ProtocolMapperRepresentation and assigns it to the ProtocolMappers field.
func (o *ClientScopeRepresentation) SetProtocolMappers(v []ProtocolMapperRepresentation) {
	o.ProtocolMappers = v
}

func (o ClientScopeRepresentation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientScopeRepresentation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.ProtocolMappers) {
		toSerialize["protocolMappers"] = o.ProtocolMappers
	}
	return toSerialize, nil
}

type NullableClientScopeRepresentation struct {
	value *ClientScopeRepresentation
	isSet bool
}

func (v NullableClientScopeRepresentation) Get() *ClientScopeRepresentation {
	return v.value
}

func (v *NullableClientScopeRepresentation) Set(val *ClientScopeRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableClientScopeRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableClientScopeRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientScopeRepresentation(val *ClientScopeRepresentation) *NullableClientScopeRepresentation {
	return &NullableClientScopeRepresentation{value: val, isSet: true}
}

func (v NullableClientScopeRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientScopeRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
