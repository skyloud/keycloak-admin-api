/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UPAttributeRequired type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UPAttributeRequired{}

// UPAttributeRequired struct for UPAttributeRequired
type UPAttributeRequired struct {
	Roles  []string `json:"roles,omitempty"`
	Scopes []string `json:"scopes,omitempty"`
}

// NewUPAttributeRequired instantiates a new UPAttributeRequired object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUPAttributeRequired() *UPAttributeRequired {
	this := UPAttributeRequired{}
	return &this
}

// NewUPAttributeRequiredWithDefaults instantiates a new UPAttributeRequired object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUPAttributeRequiredWithDefaults() *UPAttributeRequired {
	this := UPAttributeRequired{}
	return &this
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *UPAttributeRequired) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UPAttributeRequired) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *UPAttributeRequired) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *UPAttributeRequired) SetRoles(v []string) {
	o.Roles = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *UPAttributeRequired) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UPAttributeRequired) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *UPAttributeRequired) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *UPAttributeRequired) SetScopes(v []string) {
	o.Scopes = v
}

func (o UPAttributeRequired) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UPAttributeRequired) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	return toSerialize, nil
}

type NullableUPAttributeRequired struct {
	value *UPAttributeRequired
	isSet bool
}

func (v NullableUPAttributeRequired) Get() *UPAttributeRequired {
	return v.value
}

func (v *NullableUPAttributeRequired) Set(val *UPAttributeRequired) {
	v.value = val
	v.isSet = true
}

func (v NullableUPAttributeRequired) IsSet() bool {
	return v.isSet
}

func (v *NullableUPAttributeRequired) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUPAttributeRequired(val *UPAttributeRequired) *NullableUPAttributeRequired {
	return &NullableUPAttributeRequired{value: val, isSet: true}
}

func (v NullableUPAttributeRequired) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUPAttributeRequired) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
