/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ManagementPermissionReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementPermissionReference{}

// ManagementPermissionReference struct for ManagementPermissionReference
type ManagementPermissionReference struct {
	Enabled          *bool              `json:"enabled,omitempty"`
	Resource         *string            `json:"resource,omitempty"`
	ScopePermissions *map[string]string `json:"scopePermissions,omitempty"`
}

// NewManagementPermissionReference instantiates a new ManagementPermissionReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementPermissionReference() *ManagementPermissionReference {
	this := ManagementPermissionReference{}
	return &this
}

// NewManagementPermissionReferenceWithDefaults instantiates a new ManagementPermissionReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementPermissionReferenceWithDefaults() *ManagementPermissionReference {
	this := ManagementPermissionReference{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ManagementPermissionReference) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementPermissionReference) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ManagementPermissionReference) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ManagementPermissionReference) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *ManagementPermissionReference) GetResource() string {
	if o == nil || IsNil(o.Resource) {
		var ret string
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementPermissionReference) GetResourceOk() (*string, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *ManagementPermissionReference) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given string and assigns it to the Resource field.
func (o *ManagementPermissionReference) SetResource(v string) {
	o.Resource = &v
}

// GetScopePermissions returns the ScopePermissions field value if set, zero value otherwise.
func (o *ManagementPermissionReference) GetScopePermissions() map[string]string {
	if o == nil || IsNil(o.ScopePermissions) {
		var ret map[string]string
		return ret
	}
	return *o.ScopePermissions
}

// GetScopePermissionsOk returns a tuple with the ScopePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementPermissionReference) GetScopePermissionsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ScopePermissions) {
		return nil, false
	}
	return o.ScopePermissions, true
}

// HasScopePermissions returns a boolean if a field has been set.
func (o *ManagementPermissionReference) HasScopePermissions() bool {
	if o != nil && !IsNil(o.ScopePermissions) {
		return true
	}

	return false
}

// SetScopePermissions gets a reference to the given map[string]string and assigns it to the ScopePermissions field.
func (o *ManagementPermissionReference) SetScopePermissions(v map[string]string) {
	o.ScopePermissions = &v
}

func (o ManagementPermissionReference) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementPermissionReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.ScopePermissions) {
		toSerialize["scopePermissions"] = o.ScopePermissions
	}
	return toSerialize, nil
}

type NullableManagementPermissionReference struct {
	value *ManagementPermissionReference
	isSet bool
}

func (v NullableManagementPermissionReference) Get() *ManagementPermissionReference {
	return v.value
}

func (v *NullableManagementPermissionReference) Set(val *ManagementPermissionReference) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementPermissionReference) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementPermissionReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementPermissionReference(val *ManagementPermissionReference) *NullableManagementPermissionReference {
	return &NullableManagementPermissionReference{value: val, isSet: true}
}

func (v NullableManagementPermissionReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementPermissionReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
