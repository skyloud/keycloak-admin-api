/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ComponentRepresentation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentRepresentation{}

// ComponentRepresentation struct for ComponentRepresentation
type ComponentRepresentation struct {
	Id           *string              `json:"id,omitempty"`
	Name         *string              `json:"name,omitempty"`
	ProviderId   *string              `json:"providerId,omitempty"`
	ProviderType *string              `json:"providerType,omitempty"`
	ParentId     *string              `json:"parentId,omitempty"`
	SubType      *string              `json:"subType,omitempty"`
	Config       *map[string][]string `json:"config,omitempty"`
}

// NewComponentRepresentation instantiates a new ComponentRepresentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentRepresentation() *ComponentRepresentation {
	this := ComponentRepresentation{}
	return &this
}

// NewComponentRepresentationWithDefaults instantiates a new ComponentRepresentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentRepresentationWithDefaults() *ComponentRepresentation {
	this := ComponentRepresentation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ComponentRepresentation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentRepresentation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ComponentRepresentation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ComponentRepresentation) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ComponentRepresentation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentRepresentation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ComponentRepresentation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ComponentRepresentation) SetName(v string) {
	o.Name = &v
}

// GetProviderId returns the ProviderId field value if set, zero value otherwise.
func (o *ComponentRepresentation) GetProviderId() string {
	if o == nil || IsNil(o.ProviderId) {
		var ret string
		return ret
	}
	return *o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentRepresentation) GetProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderId) {
		return nil, false
	}
	return o.ProviderId, true
}

// HasProviderId returns a boolean if a field has been set.
func (o *ComponentRepresentation) HasProviderId() bool {
	if o != nil && !IsNil(o.ProviderId) {
		return true
	}

	return false
}

// SetProviderId gets a reference to the given string and assigns it to the ProviderId field.
func (o *ComponentRepresentation) SetProviderId(v string) {
	o.ProviderId = &v
}

// GetProviderType returns the ProviderType field value if set, zero value otherwise.
func (o *ComponentRepresentation) GetProviderType() string {
	if o == nil || IsNil(o.ProviderType) {
		var ret string
		return ret
	}
	return *o.ProviderType
}

// GetProviderTypeOk returns a tuple with the ProviderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentRepresentation) GetProviderTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderType) {
		return nil, false
	}
	return o.ProviderType, true
}

// HasProviderType returns a boolean if a field has been set.
func (o *ComponentRepresentation) HasProviderType() bool {
	if o != nil && !IsNil(o.ProviderType) {
		return true
	}

	return false
}

// SetProviderType gets a reference to the given string and assigns it to the ProviderType field.
func (o *ComponentRepresentation) SetProviderType(v string) {
	o.ProviderType = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *ComponentRepresentation) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentRepresentation) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *ComponentRepresentation) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *ComponentRepresentation) SetParentId(v string) {
	o.ParentId = &v
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *ComponentRepresentation) GetSubType() string {
	if o == nil || IsNil(o.SubType) {
		var ret string
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentRepresentation) GetSubTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SubType) {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *ComponentRepresentation) HasSubType() bool {
	if o != nil && !IsNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given string and assigns it to the SubType field.
func (o *ComponentRepresentation) SetSubType(v string) {
	o.SubType = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ComponentRepresentation) GetConfig() map[string][]string {
	if o == nil || IsNil(o.Config) {
		var ret map[string][]string
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentRepresentation) GetConfigOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ComponentRepresentation) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string][]string and assigns it to the Config field.
func (o *ComponentRepresentation) SetConfig(v map[string][]string) {
	o.Config = &v
}

func (o ComponentRepresentation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentRepresentation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ProviderId) {
		toSerialize["providerId"] = o.ProviderId
	}
	if !IsNil(o.ProviderType) {
		toSerialize["providerType"] = o.ProviderType
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.SubType) {
		toSerialize["subType"] = o.SubType
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	return toSerialize, nil
}

type NullableComponentRepresentation struct {
	value *ComponentRepresentation
	isSet bool
}

func (v NullableComponentRepresentation) Get() *ComponentRepresentation {
	return v.value
}

func (v *NullableComponentRepresentation) Set(val *ComponentRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentRepresentation(val *ComponentRepresentation) *NullableComponentRepresentation {
	return &NullableComponentRepresentation{value: val, isSet: true}
}

func (v NullableComponentRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
