/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Access type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Access{}

// Access struct for Access
type Access struct {
	Roles        []string `json:"roles,omitempty"`
	VerifyCaller *bool    `json:"verify_caller,omitempty"`
}

// NewAccess instantiates a new Access object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccess() *Access {
	this := Access{}
	return &this
}

// NewAccessWithDefaults instantiates a new Access object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessWithDefaults() *Access {
	this := Access{}
	return &this
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *Access) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Access) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *Access) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *Access) SetRoles(v []string) {
	o.Roles = v
}

// GetVerifyCaller returns the VerifyCaller field value if set, zero value otherwise.
func (o *Access) GetVerifyCaller() bool {
	if o == nil || IsNil(o.VerifyCaller) {
		var ret bool
		return ret
	}
	return *o.VerifyCaller
}

// GetVerifyCallerOk returns a tuple with the VerifyCaller field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Access) GetVerifyCallerOk() (*bool, bool) {
	if o == nil || IsNil(o.VerifyCaller) {
		return nil, false
	}
	return o.VerifyCaller, true
}

// HasVerifyCaller returns a boolean if a field has been set.
func (o *Access) HasVerifyCaller() bool {
	if o != nil && !IsNil(o.VerifyCaller) {
		return true
	}

	return false
}

// SetVerifyCaller gets a reference to the given bool and assigns it to the VerifyCaller field.
func (o *Access) SetVerifyCaller(v bool) {
	o.VerifyCaller = &v
}

func (o Access) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Access) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.VerifyCaller) {
		toSerialize["verify_caller"] = o.VerifyCaller
	}
	return toSerialize, nil
}

type NullableAccess struct {
	value *Access
	isSet bool
}

func (v NullableAccess) Get() *Access {
	return v.value
}

func (v *NullableAccess) Set(val *Access) {
	v.value = val
	v.isSet = true
}

func (v NullableAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccess(val *Access) *NullableAccess {
	return &NullableAccess{value: val, isSet: true}
}

func (v NullableAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
