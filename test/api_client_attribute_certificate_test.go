/*
Keycloak Admin REST API

Testing ClientAttributeCertificateAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_ClientAttributeCertificateAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ClientAttributeCertificateAPIService GetCertificate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var attr string

		resp, httpRes, err := apiClient.ClientAttributeCertificateAPI.GetCertificate(context.Background(), realm, id, attr).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientAttributeCertificateAPIService PostDownload", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var attr string

		resp, httpRes, err := apiClient.ClientAttributeCertificateAPI.PostDownload(context.Background(), realm, id, attr).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientAttributeCertificateAPIService PostGenerate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var attr string

		resp, httpRes, err := apiClient.ClientAttributeCertificateAPI.PostGenerate(context.Background(), realm, id, attr).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientAttributeCertificateAPIService PostGenerateAndDownload", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var attr string

		resp, httpRes, err := apiClient.ClientAttributeCertificateAPI.PostGenerateAndDownload(context.Background(), realm, id, attr).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientAttributeCertificateAPIService PostUpload", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var attr string

		resp, httpRes, err := apiClient.ClientAttributeCertificateAPI.PostUpload(context.Background(), realm, id, attr).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientAttributeCertificateAPIService PostUploadCertificate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var attr string

		resp, httpRes, err := apiClient.ClientAttributeCertificateAPI.PostUploadCertificate(context.Background(), realm, id, attr).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
