/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UPAttributeSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UPAttributeSelector{}

// UPAttributeSelector struct for UPAttributeSelector
type UPAttributeSelector struct {
	Scopes []string `json:"scopes,omitempty"`
}

// NewUPAttributeSelector instantiates a new UPAttributeSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUPAttributeSelector() *UPAttributeSelector {
	this := UPAttributeSelector{}
	return &this
}

// NewUPAttributeSelectorWithDefaults instantiates a new UPAttributeSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUPAttributeSelectorWithDefaults() *UPAttributeSelector {
	this := UPAttributeSelector{}
	return &this
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *UPAttributeSelector) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UPAttributeSelector) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *UPAttributeSelector) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *UPAttributeSelector) SetScopes(v []string) {
	o.Scopes = v
}

func (o UPAttributeSelector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UPAttributeSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	return toSerialize, nil
}

type NullableUPAttributeSelector struct {
	value *UPAttributeSelector
	isSet bool
}

func (v NullableUPAttributeSelector) Get() *UPAttributeSelector {
	return v.value
}

func (v *NullableUPAttributeSelector) Set(val *UPAttributeSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableUPAttributeSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableUPAttributeSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUPAttributeSelector(val *UPAttributeSelector) *NullableUPAttributeSelector {
	return &NullableUPAttributeSelector{value: val, isSet: true}
}

func (v NullableUPAttributeSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUPAttributeSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
