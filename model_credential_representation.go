/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CredentialRepresentation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CredentialRepresentation{}

// CredentialRepresentation struct for CredentialRepresentation
type CredentialRepresentation struct {
	Id                *string                `json:"id,omitempty"`
	Type              *string                `json:"type,omitempty"`
	UserLabel         *string                `json:"userLabel,omitempty"`
	CreatedDate       *int64                 `json:"createdDate,omitempty"`
	SecretData        *string                `json:"secretData,omitempty"`
	CredentialData    *string                `json:"credentialData,omitempty"`
	Priority          *int32                 `json:"priority,omitempty"`
	Value             *string                `json:"value,omitempty"`
	Temporary         *bool                  `json:"temporary,omitempty"`
	Device            *string                `json:"device,omitempty"`
	HashedSaltedValue *string                `json:"hashedSaltedValue,omitempty"`
	Salt              *string                `json:"salt,omitempty"`
	HashIterations    *int32                 `json:"hashIterations,omitempty"`
	Counter           *int32                 `json:"counter,omitempty"`
	Algorithm         *string                `json:"algorithm,omitempty"`
	Digits            *int32                 `json:"digits,omitempty"`
	Period            *int32                 `json:"period,omitempty"`
	Config            map[string]interface{} `json:"config,omitempty"`
}

// NewCredentialRepresentation instantiates a new CredentialRepresentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCredentialRepresentation() *CredentialRepresentation {
	this := CredentialRepresentation{}
	return &this
}

// NewCredentialRepresentationWithDefaults instantiates a new CredentialRepresentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCredentialRepresentationWithDefaults() *CredentialRepresentation {
	this := CredentialRepresentation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CredentialRepresentation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialRepresentation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CredentialRepresentation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CredentialRepresentation) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CredentialRepresentation) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialRepresentation) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CredentialRepresentation) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CredentialRepresentation) SetType(v string) {
	o.Type = &v
}

// GetUserLabel returns the UserLabel field value if set, zero value otherwise.
func (o *CredentialRepresentation) GetUserLabel() string {
	if o == nil || IsNil(o.UserLabel) {
		var ret string
		return ret
	}
	return *o.UserLabel
}

// GetUserLabelOk returns a tuple with the UserLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialRepresentation) GetUserLabelOk() (*string, bool) {
	if o == nil || IsNil(o.UserLabel) {
		return nil, false
	}
	return o.UserLabel, true
}

// HasUserLabel returns a boolean if a field has been set.
func (o *CredentialRepresentation) HasUserLabel() bool {
	if o != nil && !IsNil(o.UserLabel) {
		return true
	}

	return false
}

// SetUserLabel gets a reference to the given string and assigns it to the UserLabel field.
func (o *CredentialRepresentation) SetUserLabel(v string) {
	o.UserLabel = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *CredentialRepresentation) GetCreatedDate() int64 {
	if o == nil || IsNil(o.CreatedDate) {
		var ret int64
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialRepresentation) GetCreatedDateOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *CredentialRepresentation) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given int64 and assigns it to the CreatedDate field.
func (o *CredentialRepresentation) SetCreatedDate(v int64) {
	o.CreatedDate = &v
}

// GetSecretData returns the SecretData field value if set, zero value otherwise.
func (o *CredentialRepresentation) GetSecretData() string {
	if o == nil || IsNil(o.SecretData) {
		var ret string
		return ret
	}
	return *o.SecretData
}

// GetSecretDataOk returns a tuple with the SecretData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialRepresentation) GetSecretDataOk() (*string, bool) {
	if o == nil || IsNil(o.SecretData) {
		return nil, false
	}
	return o.SecretData, true
}

// HasSecretData returns a boolean if a field has been set.
func (o *CredentialRepresentation) HasSecretData() bool {
	if o != nil && !IsNil(o.SecretData) {
		return true
	}

	return false
}

// SetSecretData gets a reference to the given string and assigns it to the SecretData field.
func (o *CredentialRepresentation) SetSecretData(v string) {
	o.SecretData = &v
}

// GetCredentialData returns the CredentialData field value if set, zero value otherwise.
func (o *CredentialRepresentation) GetCredentialData() string {
	if o == nil || IsNil(o.CredentialData) {
		var ret string
		return ret
	}
	return *o.CredentialData
}

// GetCredentialDataOk returns a tuple with the CredentialData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialRepresentation) GetCredentialDataOk() (*string, bool) {
	if o == nil || IsNil(o.CredentialData) {
		return nil, false
	}
	return o.CredentialData, true
}

// HasCredentialData returns a boolean if a field has been set.
func (o *CredentialRepresentation) HasCredentialData() bool {
	if o != nil && !IsNil(o.CredentialData) {
		return true
	}

	return false
}

// SetCredentialData gets a reference to the given string and assigns it to the CredentialData field.
func (o *CredentialRepresentation) SetCredentialData(v string) {
	o.CredentialData = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *CredentialRepresentation) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialRepresentation) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *CredentialRepresentation) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *CredentialRepresentation) SetPriority(v int32) {
	o.Priority = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *CredentialRepresentation) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialRepresentation) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *CredentialRepresentation) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *CredentialRepresentation) SetValue(v string) {
	o.Value = &v
}

// GetTemporary returns the Temporary field value if set, zero value otherwise.
func (o *CredentialRepresentation) GetTemporary() bool {
	if o == nil || IsNil(o.Temporary) {
		var ret bool
		return ret
	}
	return *o.Temporary
}

// GetTemporaryOk returns a tuple with the Temporary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialRepresentation) GetTemporaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Temporary) {
		return nil, false
	}
	return o.Temporary, true
}

// HasTemporary returns a boolean if a field has been set.
func (o *CredentialRepresentation) HasTemporary() bool {
	if o != nil && !IsNil(o.Temporary) {
		return true
	}

	return false
}

// SetTemporary gets a reference to the given bool and assigns it to the Temporary field.
func (o *CredentialRepresentation) SetTemporary(v bool) {
	o.Temporary = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *CredentialRepresentation) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialRepresentation) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *CredentialRepresentation) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *CredentialRepresentation) SetDevice(v string) {
	o.Device = &v
}

// GetHashedSaltedValue returns the HashedSaltedValue field value if set, zero value otherwise.
func (o *CredentialRepresentation) GetHashedSaltedValue() string {
	if o == nil || IsNil(o.HashedSaltedValue) {
		var ret string
		return ret
	}
	return *o.HashedSaltedValue
}

// GetHashedSaltedValueOk returns a tuple with the HashedSaltedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialRepresentation) GetHashedSaltedValueOk() (*string, bool) {
	if o == nil || IsNil(o.HashedSaltedValue) {
		return nil, false
	}
	return o.HashedSaltedValue, true
}

// HasHashedSaltedValue returns a boolean if a field has been set.
func (o *CredentialRepresentation) HasHashedSaltedValue() bool {
	if o != nil && !IsNil(o.HashedSaltedValue) {
		return true
	}

	return false
}

// SetHashedSaltedValue gets a reference to the given string and assigns it to the HashedSaltedValue field.
func (o *CredentialRepresentation) SetHashedSaltedValue(v string) {
	o.HashedSaltedValue = &v
}

// GetSalt returns the Salt field value if set, zero value otherwise.
func (o *CredentialRepresentation) GetSalt() string {
	if o == nil || IsNil(o.Salt) {
		var ret string
		return ret
	}
	return *o.Salt
}

// GetSaltOk returns a tuple with the Salt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialRepresentation) GetSaltOk() (*string, bool) {
	if o == nil || IsNil(o.Salt) {
		return nil, false
	}
	return o.Salt, true
}

// HasSalt returns a boolean if a field has been set.
func (o *CredentialRepresentation) HasSalt() bool {
	if o != nil && !IsNil(o.Salt) {
		return true
	}

	return false
}

// SetSalt gets a reference to the given string and assigns it to the Salt field.
func (o *CredentialRepresentation) SetSalt(v string) {
	o.Salt = &v
}

// GetHashIterations returns the HashIterations field value if set, zero value otherwise.
func (o *CredentialRepresentation) GetHashIterations() int32 {
	if o == nil || IsNil(o.HashIterations) {
		var ret int32
		return ret
	}
	return *o.HashIterations
}

// GetHashIterationsOk returns a tuple with the HashIterations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialRepresentation) GetHashIterationsOk() (*int32, bool) {
	if o == nil || IsNil(o.HashIterations) {
		return nil, false
	}
	return o.HashIterations, true
}

// HasHashIterations returns a boolean if a field has been set.
func (o *CredentialRepresentation) HasHashIterations() bool {
	if o != nil && !IsNil(o.HashIterations) {
		return true
	}

	return false
}

// SetHashIterations gets a reference to the given int32 and assigns it to the HashIterations field.
func (o *CredentialRepresentation) SetHashIterations(v int32) {
	o.HashIterations = &v
}

// GetCounter returns the Counter field value if set, zero value otherwise.
func (o *CredentialRepresentation) GetCounter() int32 {
	if o == nil || IsNil(o.Counter) {
		var ret int32
		return ret
	}
	return *o.Counter
}

// GetCounterOk returns a tuple with the Counter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialRepresentation) GetCounterOk() (*int32, bool) {
	if o == nil || IsNil(o.Counter) {
		return nil, false
	}
	return o.Counter, true
}

// HasCounter returns a boolean if a field has been set.
func (o *CredentialRepresentation) HasCounter() bool {
	if o != nil && !IsNil(o.Counter) {
		return true
	}

	return false
}

// SetCounter gets a reference to the given int32 and assigns it to the Counter field.
func (o *CredentialRepresentation) SetCounter(v int32) {
	o.Counter = &v
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *CredentialRepresentation) GetAlgorithm() string {
	if o == nil || IsNil(o.Algorithm) {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialRepresentation) GetAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *CredentialRepresentation) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *CredentialRepresentation) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetDigits returns the Digits field value if set, zero value otherwise.
func (o *CredentialRepresentation) GetDigits() int32 {
	if o == nil || IsNil(o.Digits) {
		var ret int32
		return ret
	}
	return *o.Digits
}

// GetDigitsOk returns a tuple with the Digits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialRepresentation) GetDigitsOk() (*int32, bool) {
	if o == nil || IsNil(o.Digits) {
		return nil, false
	}
	return o.Digits, true
}

// HasDigits returns a boolean if a field has been set.
func (o *CredentialRepresentation) HasDigits() bool {
	if o != nil && !IsNil(o.Digits) {
		return true
	}

	return false
}

// SetDigits gets a reference to the given int32 and assigns it to the Digits field.
func (o *CredentialRepresentation) SetDigits(v int32) {
	o.Digits = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *CredentialRepresentation) GetPeriod() int32 {
	if o == nil || IsNil(o.Period) {
		var ret int32
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialRepresentation) GetPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *CredentialRepresentation) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given int32 and assigns it to the Period field.
func (o *CredentialRepresentation) SetPeriod(v int32) {
	o.Period = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *CredentialRepresentation) GetConfig() map[string]interface{} {
	if o == nil || IsNil(o.Config) {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialRepresentation) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *CredentialRepresentation) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *CredentialRepresentation) SetConfig(v map[string]interface{}) {
	o.Config = v
}

func (o CredentialRepresentation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CredentialRepresentation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UserLabel) {
		toSerialize["userLabel"] = o.UserLabel
	}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.SecretData) {
		toSerialize["secretData"] = o.SecretData
	}
	if !IsNil(o.CredentialData) {
		toSerialize["credentialData"] = o.CredentialData
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Temporary) {
		toSerialize["temporary"] = o.Temporary
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.HashedSaltedValue) {
		toSerialize["hashedSaltedValue"] = o.HashedSaltedValue
	}
	if !IsNil(o.Salt) {
		toSerialize["salt"] = o.Salt
	}
	if !IsNil(o.HashIterations) {
		toSerialize["hashIterations"] = o.HashIterations
	}
	if !IsNil(o.Counter) {
		toSerialize["counter"] = o.Counter
	}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	if !IsNil(o.Digits) {
		toSerialize["digits"] = o.Digits
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	return toSerialize, nil
}

type NullableCredentialRepresentation struct {
	value *CredentialRepresentation
	isSet bool
}

func (v NullableCredentialRepresentation) Get() *CredentialRepresentation {
	return v.value
}

func (v *NullableCredentialRepresentation) Set(val *CredentialRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentialRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentialRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentialRepresentation(val *CredentialRepresentation) *NullableCredentialRepresentation {
	return &NullableCredentialRepresentation{value: val, isSet: true}
}

func (v NullableCredentialRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentialRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
