/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RealmRepresentation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealmRepresentation{}

// RealmRepresentation struct for RealmRepresentation
type RealmRepresentation struct {
	Id                                                        *string                                `json:"id,omitempty"`
	Realm                                                     *string                                `json:"realm,omitempty"`
	DisplayName                                               *string                                `json:"displayName,omitempty"`
	DisplayNameHtml                                           *string                                `json:"displayNameHtml,omitempty"`
	NotBefore                                                 *int32                                 `json:"notBefore,omitempty"`
	DefaultSignatureAlgorithm                                 *string                                `json:"defaultSignatureAlgorithm,omitempty"`
	RevokeRefreshToken                                        *bool                                  `json:"revokeRefreshToken,omitempty"`
	RefreshTokenMaxReuse                                      *int32                                 `json:"refreshTokenMaxReuse,omitempty"`
	AccessTokenLifespan                                       *int32                                 `json:"accessTokenLifespan,omitempty"`
	AccessTokenLifespanForImplicitFlow                        *int32                                 `json:"accessTokenLifespanForImplicitFlow,omitempty"`
	SsoSessionIdleTimeout                                     *int32                                 `json:"ssoSessionIdleTimeout,omitempty"`
	SsoSessionMaxLifespan                                     *int32                                 `json:"ssoSessionMaxLifespan,omitempty"`
	SsoSessionIdleTimeoutRememberMe                           *int32                                 `json:"ssoSessionIdleTimeoutRememberMe,omitempty"`
	SsoSessionMaxLifespanRememberMe                           *int32                                 `json:"ssoSessionMaxLifespanRememberMe,omitempty"`
	OfflineSessionIdleTimeout                                 *int32                                 `json:"offlineSessionIdleTimeout,omitempty"`
	OfflineSessionMaxLifespanEnabled                          *bool                                  `json:"offlineSessionMaxLifespanEnabled,omitempty"`
	OfflineSessionMaxLifespan                                 *int32                                 `json:"offlineSessionMaxLifespan,omitempty"`
	ClientSessionIdleTimeout                                  *int32                                 `json:"clientSessionIdleTimeout,omitempty"`
	ClientSessionMaxLifespan                                  *int32                                 `json:"clientSessionMaxLifespan,omitempty"`
	ClientOfflineSessionIdleTimeout                           *int32                                 `json:"clientOfflineSessionIdleTimeout,omitempty"`
	ClientOfflineSessionMaxLifespan                           *int32                                 `json:"clientOfflineSessionMaxLifespan,omitempty"`
	AccessCodeLifespan                                        *int32                                 `json:"accessCodeLifespan,omitempty"`
	AccessCodeLifespanUserAction                              *int32                                 `json:"accessCodeLifespanUserAction,omitempty"`
	AccessCodeLifespanLogin                                   *int32                                 `json:"accessCodeLifespanLogin,omitempty"`
	ActionTokenGeneratedByAdminLifespan                       *int32                                 `json:"actionTokenGeneratedByAdminLifespan,omitempty"`
	ActionTokenGeneratedByUserLifespan                        *int32                                 `json:"actionTokenGeneratedByUserLifespan,omitempty"`
	Oauth2DeviceCodeLifespan                                  *int32                                 `json:"oauth2DeviceCodeLifespan,omitempty"`
	Oauth2DevicePollingInterval                               *int32                                 `json:"oauth2DevicePollingInterval,omitempty"`
	Enabled                                                   *bool                                  `json:"enabled,omitempty"`
	SslRequired                                               *string                                `json:"sslRequired,omitempty"`
	PasswordCredentialGrantAllowed                            *bool                                  `json:"passwordCredentialGrantAllowed,omitempty"`
	RegistrationAllowed                                       *bool                                  `json:"registrationAllowed,omitempty"`
	RegistrationEmailAsUsername                               *bool                                  `json:"registrationEmailAsUsername,omitempty"`
	RememberMe                                                *bool                                  `json:"rememberMe,omitempty"`
	VerifyEmail                                               *bool                                  `json:"verifyEmail,omitempty"`
	LoginWithEmailAllowed                                     *bool                                  `json:"loginWithEmailAllowed,omitempty"`
	DuplicateEmailsAllowed                                    *bool                                  `json:"duplicateEmailsAllowed,omitempty"`
	ResetPasswordAllowed                                      *bool                                  `json:"resetPasswordAllowed,omitempty"`
	EditUsernameAllowed                                       *bool                                  `json:"editUsernameAllowed,omitempty"`
	UserCacheEnabled                                          *bool                                  `json:"userCacheEnabled,omitempty"`
	RealmCacheEnabled                                         *bool                                  `json:"realmCacheEnabled,omitempty"`
	BruteForceProtected                                       *bool                                  `json:"bruteForceProtected,omitempty"`
	PermanentLockout                                          *bool                                  `json:"permanentLockout,omitempty"`
	MaxFailureWaitSeconds                                     *int32                                 `json:"maxFailureWaitSeconds,omitempty"`
	MinimumQuickLoginWaitSeconds                              *int32                                 `json:"minimumQuickLoginWaitSeconds,omitempty"`
	WaitIncrementSeconds                                      *int32                                 `json:"waitIncrementSeconds,omitempty"`
	QuickLoginCheckMilliSeconds                               *int64                                 `json:"quickLoginCheckMilliSeconds,omitempty"`
	MaxDeltaTimeSeconds                                       *int32                                 `json:"maxDeltaTimeSeconds,omitempty"`
	FailureFactor                                             *int32                                 `json:"failureFactor,omitempty"`
	PrivateKey                                                *string                                `json:"privateKey,omitempty"`
	PublicKey                                                 *string                                `json:"publicKey,omitempty"`
	Certificate                                               *string                                `json:"certificate,omitempty"`
	CodeSecret                                                *string                                `json:"codeSecret,omitempty"`
	Roles                                                     *RolesRepresentation                   `json:"roles,omitempty"`
	Groups                                                    []GroupRepresentation                  `json:"groups,omitempty"`
	DefaultRoles                                              []string                               `json:"defaultRoles,omitempty"`
	DefaultRole                                               *RoleRepresentation                    `json:"defaultRole,omitempty"`
	DefaultGroups                                             []string                               `json:"defaultGroups,omitempty"`
	RequiredCredentials                                       []string                               `json:"requiredCredentials,omitempty"`
	PasswordPolicy                                            *string                                `json:"passwordPolicy,omitempty"`
	OtpPolicyType                                             *string                                `json:"otpPolicyType,omitempty"`
	OtpPolicyAlgorithm                                        *string                                `json:"otpPolicyAlgorithm,omitempty"`
	OtpPolicyInitialCounter                                   *int32                                 `json:"otpPolicyInitialCounter,omitempty"`
	OtpPolicyDigits                                           *int32                                 `json:"otpPolicyDigits,omitempty"`
	OtpPolicyLookAheadWindow                                  *int32                                 `json:"otpPolicyLookAheadWindow,omitempty"`
	OtpPolicyPeriod                                           *int32                                 `json:"otpPolicyPeriod,omitempty"`
	OtpPolicyCodeReusable                                     *bool                                  `json:"otpPolicyCodeReusable,omitempty"`
	OtpSupportedApplications                                  []string                               `json:"otpSupportedApplications,omitempty"`
	LocalizationTexts                                         *map[string]map[string]interface{}     `json:"localizationTexts,omitempty"`
	WebAuthnPolicyRpEntityName                                *string                                `json:"webAuthnPolicyRpEntityName,omitempty"`
	WebAuthnPolicySignatureAlgorithms                         []string                               `json:"webAuthnPolicySignatureAlgorithms,omitempty"`
	WebAuthnPolicyRpId                                        *string                                `json:"webAuthnPolicyRpId,omitempty"`
	WebAuthnPolicyAttestationConveyancePreference             *string                                `json:"webAuthnPolicyAttestationConveyancePreference,omitempty"`
	WebAuthnPolicyAuthenticatorAttachment                     *string                                `json:"webAuthnPolicyAuthenticatorAttachment,omitempty"`
	WebAuthnPolicyRequireResidentKey                          *string                                `json:"webAuthnPolicyRequireResidentKey,omitempty"`
	WebAuthnPolicyUserVerificationRequirement                 *string                                `json:"webAuthnPolicyUserVerificationRequirement,omitempty"`
	WebAuthnPolicyCreateTimeout                               *int32                                 `json:"webAuthnPolicyCreateTimeout,omitempty"`
	WebAuthnPolicyAvoidSameAuthenticatorRegister              *bool                                  `json:"webAuthnPolicyAvoidSameAuthenticatorRegister,omitempty"`
	WebAuthnPolicyAcceptableAaguids                           []string                               `json:"webAuthnPolicyAcceptableAaguids,omitempty"`
	WebAuthnPolicyExtraOrigins                                []string                               `json:"webAuthnPolicyExtraOrigins,omitempty"`
	WebAuthnPolicyPasswordlessRpEntityName                    *string                                `json:"webAuthnPolicyPasswordlessRpEntityName,omitempty"`
	WebAuthnPolicyPasswordlessSignatureAlgorithms             []string                               `json:"webAuthnPolicyPasswordlessSignatureAlgorithms,omitempty"`
	WebAuthnPolicyPasswordlessRpId                            *string                                `json:"webAuthnPolicyPasswordlessRpId,omitempty"`
	WebAuthnPolicyPasswordlessAttestationConveyancePreference *string                                `json:"webAuthnPolicyPasswordlessAttestationConveyancePreference,omitempty"`
	WebAuthnPolicyPasswordlessAuthenticatorAttachment         *string                                `json:"webAuthnPolicyPasswordlessAuthenticatorAttachment,omitempty"`
	WebAuthnPolicyPasswordlessRequireResidentKey              *string                                `json:"webAuthnPolicyPasswordlessRequireResidentKey,omitempty"`
	WebAuthnPolicyPasswordlessUserVerificationRequirement     *string                                `json:"webAuthnPolicyPasswordlessUserVerificationRequirement,omitempty"`
	WebAuthnPolicyPasswordlessCreateTimeout                   *int32                                 `json:"webAuthnPolicyPasswordlessCreateTimeout,omitempty"`
	WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister  *bool                                  `json:"webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister,omitempty"`
	WebAuthnPolicyPasswordlessAcceptableAaguids               []string                               `json:"webAuthnPolicyPasswordlessAcceptableAaguids,omitempty"`
	WebAuthnPolicyPasswordlessExtraOrigins                    []string                               `json:"webAuthnPolicyPasswordlessExtraOrigins,omitempty"`
	ClientProfiles                                            *ClientProfilesRepresentation          `json:"clientProfiles,omitempty"`
	ClientPolicies                                            *ClientPoliciesRepresentation          `json:"clientPolicies,omitempty"`
	Users                                                     []UserRepresentation                   `json:"users,omitempty"`
	FederatedUsers                                            []UserRepresentation                   `json:"federatedUsers,omitempty"`
	ScopeMappings                                             []ScopeMappingRepresentation           `json:"scopeMappings,omitempty"`
	ClientScopeMappings                                       *map[string][]string                   `json:"clientScopeMappings,omitempty"`
	Clients                                                   []ClientRepresentation                 `json:"clients,omitempty"`
	ClientScopes                                              []ClientScopeRepresentation            `json:"clientScopes,omitempty"`
	DefaultDefaultClientScopes                                []string                               `json:"defaultDefaultClientScopes,omitempty"`
	DefaultOptionalClientScopes                               []string                               `json:"defaultOptionalClientScopes,omitempty"`
	BrowserSecurityHeaders                                    *map[string]string                     `json:"browserSecurityHeaders,omitempty"`
	SmtpServer                                                *map[string]string                     `json:"smtpServer,omitempty"`
	UserFederationProviders                                   []UserFederationProviderRepresentation `json:"userFederationProviders,omitempty"`
	UserFederationMappers                                     []UserFederationMapperRepresentation   `json:"userFederationMappers,omitempty"`
	LoginTheme                                                *string                                `json:"loginTheme,omitempty"`
	AccountTheme                                              *string                                `json:"accountTheme,omitempty"`
	AdminTheme                                                *string                                `json:"adminTheme,omitempty"`
	EmailTheme                                                *string                                `json:"emailTheme,omitempty"`
	EventsEnabled                                             *bool                                  `json:"eventsEnabled,omitempty"`
	EventsExpiration                                          *int64                                 `json:"eventsExpiration,omitempty"`
	EventsListeners                                           []string                               `json:"eventsListeners,omitempty"`
	EnabledEventTypes                                         []string                               `json:"enabledEventTypes,omitempty"`
	AdminEventsEnabled                                        *bool                                  `json:"adminEventsEnabled,omitempty"`
	AdminEventsDetailsEnabled                                 *bool                                  `json:"adminEventsDetailsEnabled,omitempty"`
	IdentityProviders                                         []IdentityProviderRepresentation       `json:"identityProviders,omitempty"`
	IdentityProviderMappers                                   []IdentityProviderMapperRepresentation `json:"identityProviderMappers,omitempty"`
	ProtocolMappers                                           []ProtocolMapperRepresentation         `json:"protocolMappers,omitempty"`
	Components                                                *map[string][]string                   `json:"components,omitempty"`
	InternationalizationEnabled                               *bool                                  `json:"internationalizationEnabled,omitempty"`
	SupportedLocales                                          []string                               `json:"supportedLocales,omitempty"`
	DefaultLocale                                             *string                                `json:"defaultLocale,omitempty"`
	AuthenticationFlows                                       []AuthenticationFlowRepresentation     `json:"authenticationFlows,omitempty"`
	AuthenticatorConfig                                       []AuthenticatorConfigRepresentation    `json:"authenticatorConfig,omitempty"`
	RequiredActions                                           []RequiredActionProviderRepresentation `json:"requiredActions,omitempty"`
	BrowserFlow                                               *string                                `json:"browserFlow,omitempty"`
	RegistrationFlow                                          *string                                `json:"registrationFlow,omitempty"`
	DirectGrantFlow                                           *string                                `json:"directGrantFlow,omitempty"`
	ResetCredentialsFlow                                      *string                                `json:"resetCredentialsFlow,omitempty"`
	ClientAuthenticationFlow                                  *string                                `json:"clientAuthenticationFlow,omitempty"`
	DockerAuthenticationFlow                                  *string                                `json:"dockerAuthenticationFlow,omitempty"`
	Attributes                                                *map[string]string                     `json:"attributes,omitempty"`
	KeycloakVersion                                           *string                                `json:"keycloakVersion,omitempty"`
	UserManagedAccessAllowed                                  *bool                                  `json:"userManagedAccessAllowed,omitempty"`
	Social                                                    *bool                                  `json:"social,omitempty"`
	UpdateProfileOnInitialSocialLogin                         *bool                                  `json:"updateProfileOnInitialSocialLogin,omitempty"`
	SocialProviders                                           *map[string]string                     `json:"socialProviders,omitempty"`
	ApplicationScopeMappings                                  *map[string][]string                   `json:"applicationScopeMappings,omitempty"`
	Applications                                              []ApplicationRepresentation            `json:"applications,omitempty"`
	OauthClients                                              []OAuthClientRepresentation            `json:"oauthClients,omitempty"`
	ClientTemplates                                           []ClientTemplateRepresentation         `json:"clientTemplates,omitempty"`
	OAuth2DeviceCodeLifespan                                  *int32                                 `json:"oAuth2DeviceCodeLifespan,omitempty"`
	OAuth2DevicePollingInterval                               *int32                                 `json:"oAuth2DevicePollingInterval,omitempty"`
}

// NewRealmRepresentation instantiates a new RealmRepresentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealmRepresentation() *RealmRepresentation {
	this := RealmRepresentation{}
	return &this
}

// NewRealmRepresentationWithDefaults instantiates a new RealmRepresentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealmRepresentationWithDefaults() *RealmRepresentation {
	this := RealmRepresentation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RealmRepresentation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RealmRepresentation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RealmRepresentation) SetId(v string) {
	o.Id = &v
}

// GetRealm returns the Realm field value if set, zero value otherwise.
func (o *RealmRepresentation) GetRealm() string {
	if o == nil || IsNil(o.Realm) {
		var ret string
		return ret
	}
	return *o.Realm
}

// GetRealmOk returns a tuple with the Realm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetRealmOk() (*string, bool) {
	if o == nil || IsNil(o.Realm) {
		return nil, false
	}
	return o.Realm, true
}

// HasRealm returns a boolean if a field has been set.
func (o *RealmRepresentation) HasRealm() bool {
	if o != nil && !IsNil(o.Realm) {
		return true
	}

	return false
}

// SetRealm gets a reference to the given string and assigns it to the Realm field.
func (o *RealmRepresentation) SetRealm(v string) {
	o.Realm = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *RealmRepresentation) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *RealmRepresentation) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *RealmRepresentation) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplayNameHtml returns the DisplayNameHtml field value if set, zero value otherwise.
func (o *RealmRepresentation) GetDisplayNameHtml() string {
	if o == nil || IsNil(o.DisplayNameHtml) {
		var ret string
		return ret
	}
	return *o.DisplayNameHtml
}

// GetDisplayNameHtmlOk returns a tuple with the DisplayNameHtml field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetDisplayNameHtmlOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayNameHtml) {
		return nil, false
	}
	return o.DisplayNameHtml, true
}

// HasDisplayNameHtml returns a boolean if a field has been set.
func (o *RealmRepresentation) HasDisplayNameHtml() bool {
	if o != nil && !IsNil(o.DisplayNameHtml) {
		return true
	}

	return false
}

// SetDisplayNameHtml gets a reference to the given string and assigns it to the DisplayNameHtml field.
func (o *RealmRepresentation) SetDisplayNameHtml(v string) {
	o.DisplayNameHtml = &v
}

// GetNotBefore returns the NotBefore field value if set, zero value otherwise.
func (o *RealmRepresentation) GetNotBefore() int32 {
	if o == nil || IsNil(o.NotBefore) {
		var ret int32
		return ret
	}
	return *o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetNotBeforeOk() (*int32, bool) {
	if o == nil || IsNil(o.NotBefore) {
		return nil, false
	}
	return o.NotBefore, true
}

// HasNotBefore returns a boolean if a field has been set.
func (o *RealmRepresentation) HasNotBefore() bool {
	if o != nil && !IsNil(o.NotBefore) {
		return true
	}

	return false
}

// SetNotBefore gets a reference to the given int32 and assigns it to the NotBefore field.
func (o *RealmRepresentation) SetNotBefore(v int32) {
	o.NotBefore = &v
}

// GetDefaultSignatureAlgorithm returns the DefaultSignatureAlgorithm field value if set, zero value otherwise.
func (o *RealmRepresentation) GetDefaultSignatureAlgorithm() string {
	if o == nil || IsNil(o.DefaultSignatureAlgorithm) {
		var ret string
		return ret
	}
	return *o.DefaultSignatureAlgorithm
}

// GetDefaultSignatureAlgorithmOk returns a tuple with the DefaultSignatureAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetDefaultSignatureAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultSignatureAlgorithm) {
		return nil, false
	}
	return o.DefaultSignatureAlgorithm, true
}

// HasDefaultSignatureAlgorithm returns a boolean if a field has been set.
func (o *RealmRepresentation) HasDefaultSignatureAlgorithm() bool {
	if o != nil && !IsNil(o.DefaultSignatureAlgorithm) {
		return true
	}

	return false
}

// SetDefaultSignatureAlgorithm gets a reference to the given string and assigns it to the DefaultSignatureAlgorithm field.
func (o *RealmRepresentation) SetDefaultSignatureAlgorithm(v string) {
	o.DefaultSignatureAlgorithm = &v
}

// GetRevokeRefreshToken returns the RevokeRefreshToken field value if set, zero value otherwise.
func (o *RealmRepresentation) GetRevokeRefreshToken() bool {
	if o == nil || IsNil(o.RevokeRefreshToken) {
		var ret bool
		return ret
	}
	return *o.RevokeRefreshToken
}

// GetRevokeRefreshTokenOk returns a tuple with the RevokeRefreshToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetRevokeRefreshTokenOk() (*bool, bool) {
	if o == nil || IsNil(o.RevokeRefreshToken) {
		return nil, false
	}
	return o.RevokeRefreshToken, true
}

// HasRevokeRefreshToken returns a boolean if a field has been set.
func (o *RealmRepresentation) HasRevokeRefreshToken() bool {
	if o != nil && !IsNil(o.RevokeRefreshToken) {
		return true
	}

	return false
}

// SetRevokeRefreshToken gets a reference to the given bool and assigns it to the RevokeRefreshToken field.
func (o *RealmRepresentation) SetRevokeRefreshToken(v bool) {
	o.RevokeRefreshToken = &v
}

// GetRefreshTokenMaxReuse returns the RefreshTokenMaxReuse field value if set, zero value otherwise.
func (o *RealmRepresentation) GetRefreshTokenMaxReuse() int32 {
	if o == nil || IsNil(o.RefreshTokenMaxReuse) {
		var ret int32
		return ret
	}
	return *o.RefreshTokenMaxReuse
}

// GetRefreshTokenMaxReuseOk returns a tuple with the RefreshTokenMaxReuse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetRefreshTokenMaxReuseOk() (*int32, bool) {
	if o == nil || IsNil(o.RefreshTokenMaxReuse) {
		return nil, false
	}
	return o.RefreshTokenMaxReuse, true
}

// HasRefreshTokenMaxReuse returns a boolean if a field has been set.
func (o *RealmRepresentation) HasRefreshTokenMaxReuse() bool {
	if o != nil && !IsNil(o.RefreshTokenMaxReuse) {
		return true
	}

	return false
}

// SetRefreshTokenMaxReuse gets a reference to the given int32 and assigns it to the RefreshTokenMaxReuse field.
func (o *RealmRepresentation) SetRefreshTokenMaxReuse(v int32) {
	o.RefreshTokenMaxReuse = &v
}

// GetAccessTokenLifespan returns the AccessTokenLifespan field value if set, zero value otherwise.
func (o *RealmRepresentation) GetAccessTokenLifespan() int32 {
	if o == nil || IsNil(o.AccessTokenLifespan) {
		var ret int32
		return ret
	}
	return *o.AccessTokenLifespan
}

// GetAccessTokenLifespanOk returns a tuple with the AccessTokenLifespan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetAccessTokenLifespanOk() (*int32, bool) {
	if o == nil || IsNil(o.AccessTokenLifespan) {
		return nil, false
	}
	return o.AccessTokenLifespan, true
}

// HasAccessTokenLifespan returns a boolean if a field has been set.
func (o *RealmRepresentation) HasAccessTokenLifespan() bool {
	if o != nil && !IsNil(o.AccessTokenLifespan) {
		return true
	}

	return false
}

// SetAccessTokenLifespan gets a reference to the given int32 and assigns it to the AccessTokenLifespan field.
func (o *RealmRepresentation) SetAccessTokenLifespan(v int32) {
	o.AccessTokenLifespan = &v
}

// GetAccessTokenLifespanForImplicitFlow returns the AccessTokenLifespanForImplicitFlow field value if set, zero value otherwise.
func (o *RealmRepresentation) GetAccessTokenLifespanForImplicitFlow() int32 {
	if o == nil || IsNil(o.AccessTokenLifespanForImplicitFlow) {
		var ret int32
		return ret
	}
	return *o.AccessTokenLifespanForImplicitFlow
}

// GetAccessTokenLifespanForImplicitFlowOk returns a tuple with the AccessTokenLifespanForImplicitFlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetAccessTokenLifespanForImplicitFlowOk() (*int32, bool) {
	if o == nil || IsNil(o.AccessTokenLifespanForImplicitFlow) {
		return nil, false
	}
	return o.AccessTokenLifespanForImplicitFlow, true
}

// HasAccessTokenLifespanForImplicitFlow returns a boolean if a field has been set.
func (o *RealmRepresentation) HasAccessTokenLifespanForImplicitFlow() bool {
	if o != nil && !IsNil(o.AccessTokenLifespanForImplicitFlow) {
		return true
	}

	return false
}

// SetAccessTokenLifespanForImplicitFlow gets a reference to the given int32 and assigns it to the AccessTokenLifespanForImplicitFlow field.
func (o *RealmRepresentation) SetAccessTokenLifespanForImplicitFlow(v int32) {
	o.AccessTokenLifespanForImplicitFlow = &v
}

// GetSsoSessionIdleTimeout returns the SsoSessionIdleTimeout field value if set, zero value otherwise.
func (o *RealmRepresentation) GetSsoSessionIdleTimeout() int32 {
	if o == nil || IsNil(o.SsoSessionIdleTimeout) {
		var ret int32
		return ret
	}
	return *o.SsoSessionIdleTimeout
}

// GetSsoSessionIdleTimeoutOk returns a tuple with the SsoSessionIdleTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetSsoSessionIdleTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.SsoSessionIdleTimeout) {
		return nil, false
	}
	return o.SsoSessionIdleTimeout, true
}

// HasSsoSessionIdleTimeout returns a boolean if a field has been set.
func (o *RealmRepresentation) HasSsoSessionIdleTimeout() bool {
	if o != nil && !IsNil(o.SsoSessionIdleTimeout) {
		return true
	}

	return false
}

// SetSsoSessionIdleTimeout gets a reference to the given int32 and assigns it to the SsoSessionIdleTimeout field.
func (o *RealmRepresentation) SetSsoSessionIdleTimeout(v int32) {
	o.SsoSessionIdleTimeout = &v
}

// GetSsoSessionMaxLifespan returns the SsoSessionMaxLifespan field value if set, zero value otherwise.
func (o *RealmRepresentation) GetSsoSessionMaxLifespan() int32 {
	if o == nil || IsNil(o.SsoSessionMaxLifespan) {
		var ret int32
		return ret
	}
	return *o.SsoSessionMaxLifespan
}

// GetSsoSessionMaxLifespanOk returns a tuple with the SsoSessionMaxLifespan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetSsoSessionMaxLifespanOk() (*int32, bool) {
	if o == nil || IsNil(o.SsoSessionMaxLifespan) {
		return nil, false
	}
	return o.SsoSessionMaxLifespan, true
}

// HasSsoSessionMaxLifespan returns a boolean if a field has been set.
func (o *RealmRepresentation) HasSsoSessionMaxLifespan() bool {
	if o != nil && !IsNil(o.SsoSessionMaxLifespan) {
		return true
	}

	return false
}

// SetSsoSessionMaxLifespan gets a reference to the given int32 and assigns it to the SsoSessionMaxLifespan field.
func (o *RealmRepresentation) SetSsoSessionMaxLifespan(v int32) {
	o.SsoSessionMaxLifespan = &v
}

// GetSsoSessionIdleTimeoutRememberMe returns the SsoSessionIdleTimeoutRememberMe field value if set, zero value otherwise.
func (o *RealmRepresentation) GetSsoSessionIdleTimeoutRememberMe() int32 {
	if o == nil || IsNil(o.SsoSessionIdleTimeoutRememberMe) {
		var ret int32
		return ret
	}
	return *o.SsoSessionIdleTimeoutRememberMe
}

// GetSsoSessionIdleTimeoutRememberMeOk returns a tuple with the SsoSessionIdleTimeoutRememberMe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetSsoSessionIdleTimeoutRememberMeOk() (*int32, bool) {
	if o == nil || IsNil(o.SsoSessionIdleTimeoutRememberMe) {
		return nil, false
	}
	return o.SsoSessionIdleTimeoutRememberMe, true
}

// HasSsoSessionIdleTimeoutRememberMe returns a boolean if a field has been set.
func (o *RealmRepresentation) HasSsoSessionIdleTimeoutRememberMe() bool {
	if o != nil && !IsNil(o.SsoSessionIdleTimeoutRememberMe) {
		return true
	}

	return false
}

// SetSsoSessionIdleTimeoutRememberMe gets a reference to the given int32 and assigns it to the SsoSessionIdleTimeoutRememberMe field.
func (o *RealmRepresentation) SetSsoSessionIdleTimeoutRememberMe(v int32) {
	o.SsoSessionIdleTimeoutRememberMe = &v
}

// GetSsoSessionMaxLifespanRememberMe returns the SsoSessionMaxLifespanRememberMe field value if set, zero value otherwise.
func (o *RealmRepresentation) GetSsoSessionMaxLifespanRememberMe() int32 {
	if o == nil || IsNil(o.SsoSessionMaxLifespanRememberMe) {
		var ret int32
		return ret
	}
	return *o.SsoSessionMaxLifespanRememberMe
}

// GetSsoSessionMaxLifespanRememberMeOk returns a tuple with the SsoSessionMaxLifespanRememberMe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetSsoSessionMaxLifespanRememberMeOk() (*int32, bool) {
	if o == nil || IsNil(o.SsoSessionMaxLifespanRememberMe) {
		return nil, false
	}
	return o.SsoSessionMaxLifespanRememberMe, true
}

// HasSsoSessionMaxLifespanRememberMe returns a boolean if a field has been set.
func (o *RealmRepresentation) HasSsoSessionMaxLifespanRememberMe() bool {
	if o != nil && !IsNil(o.SsoSessionMaxLifespanRememberMe) {
		return true
	}

	return false
}

// SetSsoSessionMaxLifespanRememberMe gets a reference to the given int32 and assigns it to the SsoSessionMaxLifespanRememberMe field.
func (o *RealmRepresentation) SetSsoSessionMaxLifespanRememberMe(v int32) {
	o.SsoSessionMaxLifespanRememberMe = &v
}

// GetOfflineSessionIdleTimeout returns the OfflineSessionIdleTimeout field value if set, zero value otherwise.
func (o *RealmRepresentation) GetOfflineSessionIdleTimeout() int32 {
	if o == nil || IsNil(o.OfflineSessionIdleTimeout) {
		var ret int32
		return ret
	}
	return *o.OfflineSessionIdleTimeout
}

// GetOfflineSessionIdleTimeoutOk returns a tuple with the OfflineSessionIdleTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetOfflineSessionIdleTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.OfflineSessionIdleTimeout) {
		return nil, false
	}
	return o.OfflineSessionIdleTimeout, true
}

// HasOfflineSessionIdleTimeout returns a boolean if a field has been set.
func (o *RealmRepresentation) HasOfflineSessionIdleTimeout() bool {
	if o != nil && !IsNil(o.OfflineSessionIdleTimeout) {
		return true
	}

	return false
}

// SetOfflineSessionIdleTimeout gets a reference to the given int32 and assigns it to the OfflineSessionIdleTimeout field.
func (o *RealmRepresentation) SetOfflineSessionIdleTimeout(v int32) {
	o.OfflineSessionIdleTimeout = &v
}

// GetOfflineSessionMaxLifespanEnabled returns the OfflineSessionMaxLifespanEnabled field value if set, zero value otherwise.
func (o *RealmRepresentation) GetOfflineSessionMaxLifespanEnabled() bool {
	if o == nil || IsNil(o.OfflineSessionMaxLifespanEnabled) {
		var ret bool
		return ret
	}
	return *o.OfflineSessionMaxLifespanEnabled
}

// GetOfflineSessionMaxLifespanEnabledOk returns a tuple with the OfflineSessionMaxLifespanEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetOfflineSessionMaxLifespanEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.OfflineSessionMaxLifespanEnabled) {
		return nil, false
	}
	return o.OfflineSessionMaxLifespanEnabled, true
}

// HasOfflineSessionMaxLifespanEnabled returns a boolean if a field has been set.
func (o *RealmRepresentation) HasOfflineSessionMaxLifespanEnabled() bool {
	if o != nil && !IsNil(o.OfflineSessionMaxLifespanEnabled) {
		return true
	}

	return false
}

// SetOfflineSessionMaxLifespanEnabled gets a reference to the given bool and assigns it to the OfflineSessionMaxLifespanEnabled field.
func (o *RealmRepresentation) SetOfflineSessionMaxLifespanEnabled(v bool) {
	o.OfflineSessionMaxLifespanEnabled = &v
}

// GetOfflineSessionMaxLifespan returns the OfflineSessionMaxLifespan field value if set, zero value otherwise.
func (o *RealmRepresentation) GetOfflineSessionMaxLifespan() int32 {
	if o == nil || IsNil(o.OfflineSessionMaxLifespan) {
		var ret int32
		return ret
	}
	return *o.OfflineSessionMaxLifespan
}

// GetOfflineSessionMaxLifespanOk returns a tuple with the OfflineSessionMaxLifespan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetOfflineSessionMaxLifespanOk() (*int32, bool) {
	if o == nil || IsNil(o.OfflineSessionMaxLifespan) {
		return nil, false
	}
	return o.OfflineSessionMaxLifespan, true
}

// HasOfflineSessionMaxLifespan returns a boolean if a field has been set.
func (o *RealmRepresentation) HasOfflineSessionMaxLifespan() bool {
	if o != nil && !IsNil(o.OfflineSessionMaxLifespan) {
		return true
	}

	return false
}

// SetOfflineSessionMaxLifespan gets a reference to the given int32 and assigns it to the OfflineSessionMaxLifespan field.
func (o *RealmRepresentation) SetOfflineSessionMaxLifespan(v int32) {
	o.OfflineSessionMaxLifespan = &v
}

// GetClientSessionIdleTimeout returns the ClientSessionIdleTimeout field value if set, zero value otherwise.
func (o *RealmRepresentation) GetClientSessionIdleTimeout() int32 {
	if o == nil || IsNil(o.ClientSessionIdleTimeout) {
		var ret int32
		return ret
	}
	return *o.ClientSessionIdleTimeout
}

// GetClientSessionIdleTimeoutOk returns a tuple with the ClientSessionIdleTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetClientSessionIdleTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.ClientSessionIdleTimeout) {
		return nil, false
	}
	return o.ClientSessionIdleTimeout, true
}

// HasClientSessionIdleTimeout returns a boolean if a field has been set.
func (o *RealmRepresentation) HasClientSessionIdleTimeout() bool {
	if o != nil && !IsNil(o.ClientSessionIdleTimeout) {
		return true
	}

	return false
}

// SetClientSessionIdleTimeout gets a reference to the given int32 and assigns it to the ClientSessionIdleTimeout field.
func (o *RealmRepresentation) SetClientSessionIdleTimeout(v int32) {
	o.ClientSessionIdleTimeout = &v
}

// GetClientSessionMaxLifespan returns the ClientSessionMaxLifespan field value if set, zero value otherwise.
func (o *RealmRepresentation) GetClientSessionMaxLifespan() int32 {
	if o == nil || IsNil(o.ClientSessionMaxLifespan) {
		var ret int32
		return ret
	}
	return *o.ClientSessionMaxLifespan
}

// GetClientSessionMaxLifespanOk returns a tuple with the ClientSessionMaxLifespan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetClientSessionMaxLifespanOk() (*int32, bool) {
	if o == nil || IsNil(o.ClientSessionMaxLifespan) {
		return nil, false
	}
	return o.ClientSessionMaxLifespan, true
}

// HasClientSessionMaxLifespan returns a boolean if a field has been set.
func (o *RealmRepresentation) HasClientSessionMaxLifespan() bool {
	if o != nil && !IsNil(o.ClientSessionMaxLifespan) {
		return true
	}

	return false
}

// SetClientSessionMaxLifespan gets a reference to the given int32 and assigns it to the ClientSessionMaxLifespan field.
func (o *RealmRepresentation) SetClientSessionMaxLifespan(v int32) {
	o.ClientSessionMaxLifespan = &v
}

// GetClientOfflineSessionIdleTimeout returns the ClientOfflineSessionIdleTimeout field value if set, zero value otherwise.
func (o *RealmRepresentation) GetClientOfflineSessionIdleTimeout() int32 {
	if o == nil || IsNil(o.ClientOfflineSessionIdleTimeout) {
		var ret int32
		return ret
	}
	return *o.ClientOfflineSessionIdleTimeout
}

// GetClientOfflineSessionIdleTimeoutOk returns a tuple with the ClientOfflineSessionIdleTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetClientOfflineSessionIdleTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.ClientOfflineSessionIdleTimeout) {
		return nil, false
	}
	return o.ClientOfflineSessionIdleTimeout, true
}

// HasClientOfflineSessionIdleTimeout returns a boolean if a field has been set.
func (o *RealmRepresentation) HasClientOfflineSessionIdleTimeout() bool {
	if o != nil && !IsNil(o.ClientOfflineSessionIdleTimeout) {
		return true
	}

	return false
}

// SetClientOfflineSessionIdleTimeout gets a reference to the given int32 and assigns it to the ClientOfflineSessionIdleTimeout field.
func (o *RealmRepresentation) SetClientOfflineSessionIdleTimeout(v int32) {
	o.ClientOfflineSessionIdleTimeout = &v
}

// GetClientOfflineSessionMaxLifespan returns the ClientOfflineSessionMaxLifespan field value if set, zero value otherwise.
func (o *RealmRepresentation) GetClientOfflineSessionMaxLifespan() int32 {
	if o == nil || IsNil(o.ClientOfflineSessionMaxLifespan) {
		var ret int32
		return ret
	}
	return *o.ClientOfflineSessionMaxLifespan
}

// GetClientOfflineSessionMaxLifespanOk returns a tuple with the ClientOfflineSessionMaxLifespan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetClientOfflineSessionMaxLifespanOk() (*int32, bool) {
	if o == nil || IsNil(o.ClientOfflineSessionMaxLifespan) {
		return nil, false
	}
	return o.ClientOfflineSessionMaxLifespan, true
}

// HasClientOfflineSessionMaxLifespan returns a boolean if a field has been set.
func (o *RealmRepresentation) HasClientOfflineSessionMaxLifespan() bool {
	if o != nil && !IsNil(o.ClientOfflineSessionMaxLifespan) {
		return true
	}

	return false
}

// SetClientOfflineSessionMaxLifespan gets a reference to the given int32 and assigns it to the ClientOfflineSessionMaxLifespan field.
func (o *RealmRepresentation) SetClientOfflineSessionMaxLifespan(v int32) {
	o.ClientOfflineSessionMaxLifespan = &v
}

// GetAccessCodeLifespan returns the AccessCodeLifespan field value if set, zero value otherwise.
func (o *RealmRepresentation) GetAccessCodeLifespan() int32 {
	if o == nil || IsNil(o.AccessCodeLifespan) {
		var ret int32
		return ret
	}
	return *o.AccessCodeLifespan
}

// GetAccessCodeLifespanOk returns a tuple with the AccessCodeLifespan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetAccessCodeLifespanOk() (*int32, bool) {
	if o == nil || IsNil(o.AccessCodeLifespan) {
		return nil, false
	}
	return o.AccessCodeLifespan, true
}

// HasAccessCodeLifespan returns a boolean if a field has been set.
func (o *RealmRepresentation) HasAccessCodeLifespan() bool {
	if o != nil && !IsNil(o.AccessCodeLifespan) {
		return true
	}

	return false
}

// SetAccessCodeLifespan gets a reference to the given int32 and assigns it to the AccessCodeLifespan field.
func (o *RealmRepresentation) SetAccessCodeLifespan(v int32) {
	o.AccessCodeLifespan = &v
}

// GetAccessCodeLifespanUserAction returns the AccessCodeLifespanUserAction field value if set, zero value otherwise.
func (o *RealmRepresentation) GetAccessCodeLifespanUserAction() int32 {
	if o == nil || IsNil(o.AccessCodeLifespanUserAction) {
		var ret int32
		return ret
	}
	return *o.AccessCodeLifespanUserAction
}

// GetAccessCodeLifespanUserActionOk returns a tuple with the AccessCodeLifespanUserAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetAccessCodeLifespanUserActionOk() (*int32, bool) {
	if o == nil || IsNil(o.AccessCodeLifespanUserAction) {
		return nil, false
	}
	return o.AccessCodeLifespanUserAction, true
}

// HasAccessCodeLifespanUserAction returns a boolean if a field has been set.
func (o *RealmRepresentation) HasAccessCodeLifespanUserAction() bool {
	if o != nil && !IsNil(o.AccessCodeLifespanUserAction) {
		return true
	}

	return false
}

// SetAccessCodeLifespanUserAction gets a reference to the given int32 and assigns it to the AccessCodeLifespanUserAction field.
func (o *RealmRepresentation) SetAccessCodeLifespanUserAction(v int32) {
	o.AccessCodeLifespanUserAction = &v
}

// GetAccessCodeLifespanLogin returns the AccessCodeLifespanLogin field value if set, zero value otherwise.
func (o *RealmRepresentation) GetAccessCodeLifespanLogin() int32 {
	if o == nil || IsNil(o.AccessCodeLifespanLogin) {
		var ret int32
		return ret
	}
	return *o.AccessCodeLifespanLogin
}

// GetAccessCodeLifespanLoginOk returns a tuple with the AccessCodeLifespanLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetAccessCodeLifespanLoginOk() (*int32, bool) {
	if o == nil || IsNil(o.AccessCodeLifespanLogin) {
		return nil, false
	}
	return o.AccessCodeLifespanLogin, true
}

// HasAccessCodeLifespanLogin returns a boolean if a field has been set.
func (o *RealmRepresentation) HasAccessCodeLifespanLogin() bool {
	if o != nil && !IsNil(o.AccessCodeLifespanLogin) {
		return true
	}

	return false
}

// SetAccessCodeLifespanLogin gets a reference to the given int32 and assigns it to the AccessCodeLifespanLogin field.
func (o *RealmRepresentation) SetAccessCodeLifespanLogin(v int32) {
	o.AccessCodeLifespanLogin = &v
}

// GetActionTokenGeneratedByAdminLifespan returns the ActionTokenGeneratedByAdminLifespan field value if set, zero value otherwise.
func (o *RealmRepresentation) GetActionTokenGeneratedByAdminLifespan() int32 {
	if o == nil || IsNil(o.ActionTokenGeneratedByAdminLifespan) {
		var ret int32
		return ret
	}
	return *o.ActionTokenGeneratedByAdminLifespan
}

// GetActionTokenGeneratedByAdminLifespanOk returns a tuple with the ActionTokenGeneratedByAdminLifespan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetActionTokenGeneratedByAdminLifespanOk() (*int32, bool) {
	if o == nil || IsNil(o.ActionTokenGeneratedByAdminLifespan) {
		return nil, false
	}
	return o.ActionTokenGeneratedByAdminLifespan, true
}

// HasActionTokenGeneratedByAdminLifespan returns a boolean if a field has been set.
func (o *RealmRepresentation) HasActionTokenGeneratedByAdminLifespan() bool {
	if o != nil && !IsNil(o.ActionTokenGeneratedByAdminLifespan) {
		return true
	}

	return false
}

// SetActionTokenGeneratedByAdminLifespan gets a reference to the given int32 and assigns it to the ActionTokenGeneratedByAdminLifespan field.
func (o *RealmRepresentation) SetActionTokenGeneratedByAdminLifespan(v int32) {
	o.ActionTokenGeneratedByAdminLifespan = &v
}

// GetActionTokenGeneratedByUserLifespan returns the ActionTokenGeneratedByUserLifespan field value if set, zero value otherwise.
func (o *RealmRepresentation) GetActionTokenGeneratedByUserLifespan() int32 {
	if o == nil || IsNil(o.ActionTokenGeneratedByUserLifespan) {
		var ret int32
		return ret
	}
	return *o.ActionTokenGeneratedByUserLifespan
}

// GetActionTokenGeneratedByUserLifespanOk returns a tuple with the ActionTokenGeneratedByUserLifespan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetActionTokenGeneratedByUserLifespanOk() (*int32, bool) {
	if o == nil || IsNil(o.ActionTokenGeneratedByUserLifespan) {
		return nil, false
	}
	return o.ActionTokenGeneratedByUserLifespan, true
}

// HasActionTokenGeneratedByUserLifespan returns a boolean if a field has been set.
func (o *RealmRepresentation) HasActionTokenGeneratedByUserLifespan() bool {
	if o != nil && !IsNil(o.ActionTokenGeneratedByUserLifespan) {
		return true
	}

	return false
}

// SetActionTokenGeneratedByUserLifespan gets a reference to the given int32 and assigns it to the ActionTokenGeneratedByUserLifespan field.
func (o *RealmRepresentation) SetActionTokenGeneratedByUserLifespan(v int32) {
	o.ActionTokenGeneratedByUserLifespan = &v
}

// GetOauth2DeviceCodeLifespan returns the Oauth2DeviceCodeLifespan field value if set, zero value otherwise.
func (o *RealmRepresentation) GetOauth2DeviceCodeLifespan() int32 {
	if o == nil || IsNil(o.Oauth2DeviceCodeLifespan) {
		var ret int32
		return ret
	}
	return *o.Oauth2DeviceCodeLifespan
}

// GetOauth2DeviceCodeLifespanOk returns a tuple with the Oauth2DeviceCodeLifespan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetOauth2DeviceCodeLifespanOk() (*int32, bool) {
	if o == nil || IsNil(o.Oauth2DeviceCodeLifespan) {
		return nil, false
	}
	return o.Oauth2DeviceCodeLifespan, true
}

// HasOauth2DeviceCodeLifespan returns a boolean if a field has been set.
func (o *RealmRepresentation) HasOauth2DeviceCodeLifespan() bool {
	if o != nil && !IsNil(o.Oauth2DeviceCodeLifespan) {
		return true
	}

	return false
}

// SetOauth2DeviceCodeLifespan gets a reference to the given int32 and assigns it to the Oauth2DeviceCodeLifespan field.
func (o *RealmRepresentation) SetOauth2DeviceCodeLifespan(v int32) {
	o.Oauth2DeviceCodeLifespan = &v
}

// GetOauth2DevicePollingInterval returns the Oauth2DevicePollingInterval field value if set, zero value otherwise.
func (o *RealmRepresentation) GetOauth2DevicePollingInterval() int32 {
	if o == nil || IsNil(o.Oauth2DevicePollingInterval) {
		var ret int32
		return ret
	}
	return *o.Oauth2DevicePollingInterval
}

// GetOauth2DevicePollingIntervalOk returns a tuple with the Oauth2DevicePollingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetOauth2DevicePollingIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.Oauth2DevicePollingInterval) {
		return nil, false
	}
	return o.Oauth2DevicePollingInterval, true
}

// HasOauth2DevicePollingInterval returns a boolean if a field has been set.
func (o *RealmRepresentation) HasOauth2DevicePollingInterval() bool {
	if o != nil && !IsNil(o.Oauth2DevicePollingInterval) {
		return true
	}

	return false
}

// SetOauth2DevicePollingInterval gets a reference to the given int32 and assigns it to the Oauth2DevicePollingInterval field.
func (o *RealmRepresentation) SetOauth2DevicePollingInterval(v int32) {
	o.Oauth2DevicePollingInterval = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RealmRepresentation) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RealmRepresentation) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RealmRepresentation) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetSslRequired returns the SslRequired field value if set, zero value otherwise.
func (o *RealmRepresentation) GetSslRequired() string {
	if o == nil || IsNil(o.SslRequired) {
		var ret string
		return ret
	}
	return *o.SslRequired
}

// GetSslRequiredOk returns a tuple with the SslRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetSslRequiredOk() (*string, bool) {
	if o == nil || IsNil(o.SslRequired) {
		return nil, false
	}
	return o.SslRequired, true
}

// HasSslRequired returns a boolean if a field has been set.
func (o *RealmRepresentation) HasSslRequired() bool {
	if o != nil && !IsNil(o.SslRequired) {
		return true
	}

	return false
}

// SetSslRequired gets a reference to the given string and assigns it to the SslRequired field.
func (o *RealmRepresentation) SetSslRequired(v string) {
	o.SslRequired = &v
}

// GetPasswordCredentialGrantAllowed returns the PasswordCredentialGrantAllowed field value if set, zero value otherwise.
func (o *RealmRepresentation) GetPasswordCredentialGrantAllowed() bool {
	if o == nil || IsNil(o.PasswordCredentialGrantAllowed) {
		var ret bool
		return ret
	}
	return *o.PasswordCredentialGrantAllowed
}

// GetPasswordCredentialGrantAllowedOk returns a tuple with the PasswordCredentialGrantAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetPasswordCredentialGrantAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.PasswordCredentialGrantAllowed) {
		return nil, false
	}
	return o.PasswordCredentialGrantAllowed, true
}

// HasPasswordCredentialGrantAllowed returns a boolean if a field has been set.
func (o *RealmRepresentation) HasPasswordCredentialGrantAllowed() bool {
	if o != nil && !IsNil(o.PasswordCredentialGrantAllowed) {
		return true
	}

	return false
}

// SetPasswordCredentialGrantAllowed gets a reference to the given bool and assigns it to the PasswordCredentialGrantAllowed field.
func (o *RealmRepresentation) SetPasswordCredentialGrantAllowed(v bool) {
	o.PasswordCredentialGrantAllowed = &v
}

// GetRegistrationAllowed returns the RegistrationAllowed field value if set, zero value otherwise.
func (o *RealmRepresentation) GetRegistrationAllowed() bool {
	if o == nil || IsNil(o.RegistrationAllowed) {
		var ret bool
		return ret
	}
	return *o.RegistrationAllowed
}

// GetRegistrationAllowedOk returns a tuple with the RegistrationAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetRegistrationAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.RegistrationAllowed) {
		return nil, false
	}
	return o.RegistrationAllowed, true
}

// HasRegistrationAllowed returns a boolean if a field has been set.
func (o *RealmRepresentation) HasRegistrationAllowed() bool {
	if o != nil && !IsNil(o.RegistrationAllowed) {
		return true
	}

	return false
}

// SetRegistrationAllowed gets a reference to the given bool and assigns it to the RegistrationAllowed field.
func (o *RealmRepresentation) SetRegistrationAllowed(v bool) {
	o.RegistrationAllowed = &v
}

// GetRegistrationEmailAsUsername returns the RegistrationEmailAsUsername field value if set, zero value otherwise.
func (o *RealmRepresentation) GetRegistrationEmailAsUsername() bool {
	if o == nil || IsNil(o.RegistrationEmailAsUsername) {
		var ret bool
		return ret
	}
	return *o.RegistrationEmailAsUsername
}

// GetRegistrationEmailAsUsernameOk returns a tuple with the RegistrationEmailAsUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetRegistrationEmailAsUsernameOk() (*bool, bool) {
	if o == nil || IsNil(o.RegistrationEmailAsUsername) {
		return nil, false
	}
	return o.RegistrationEmailAsUsername, true
}

// HasRegistrationEmailAsUsername returns a boolean if a field has been set.
func (o *RealmRepresentation) HasRegistrationEmailAsUsername() bool {
	if o != nil && !IsNil(o.RegistrationEmailAsUsername) {
		return true
	}

	return false
}

// SetRegistrationEmailAsUsername gets a reference to the given bool and assigns it to the RegistrationEmailAsUsername field.
func (o *RealmRepresentation) SetRegistrationEmailAsUsername(v bool) {
	o.RegistrationEmailAsUsername = &v
}

// GetRememberMe returns the RememberMe field value if set, zero value otherwise.
func (o *RealmRepresentation) GetRememberMe() bool {
	if o == nil || IsNil(o.RememberMe) {
		var ret bool
		return ret
	}
	return *o.RememberMe
}

// GetRememberMeOk returns a tuple with the RememberMe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetRememberMeOk() (*bool, bool) {
	if o == nil || IsNil(o.RememberMe) {
		return nil, false
	}
	return o.RememberMe, true
}

// HasRememberMe returns a boolean if a field has been set.
func (o *RealmRepresentation) HasRememberMe() bool {
	if o != nil && !IsNil(o.RememberMe) {
		return true
	}

	return false
}

// SetRememberMe gets a reference to the given bool and assigns it to the RememberMe field.
func (o *RealmRepresentation) SetRememberMe(v bool) {
	o.RememberMe = &v
}

// GetVerifyEmail returns the VerifyEmail field value if set, zero value otherwise.
func (o *RealmRepresentation) GetVerifyEmail() bool {
	if o == nil || IsNil(o.VerifyEmail) {
		var ret bool
		return ret
	}
	return *o.VerifyEmail
}

// GetVerifyEmailOk returns a tuple with the VerifyEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetVerifyEmailOk() (*bool, bool) {
	if o == nil || IsNil(o.VerifyEmail) {
		return nil, false
	}
	return o.VerifyEmail, true
}

// HasVerifyEmail returns a boolean if a field has been set.
func (o *RealmRepresentation) HasVerifyEmail() bool {
	if o != nil && !IsNil(o.VerifyEmail) {
		return true
	}

	return false
}

// SetVerifyEmail gets a reference to the given bool and assigns it to the VerifyEmail field.
func (o *RealmRepresentation) SetVerifyEmail(v bool) {
	o.VerifyEmail = &v
}

// GetLoginWithEmailAllowed returns the LoginWithEmailAllowed field value if set, zero value otherwise.
func (o *RealmRepresentation) GetLoginWithEmailAllowed() bool {
	if o == nil || IsNil(o.LoginWithEmailAllowed) {
		var ret bool
		return ret
	}
	return *o.LoginWithEmailAllowed
}

// GetLoginWithEmailAllowedOk returns a tuple with the LoginWithEmailAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetLoginWithEmailAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.LoginWithEmailAllowed) {
		return nil, false
	}
	return o.LoginWithEmailAllowed, true
}

// HasLoginWithEmailAllowed returns a boolean if a field has been set.
func (o *RealmRepresentation) HasLoginWithEmailAllowed() bool {
	if o != nil && !IsNil(o.LoginWithEmailAllowed) {
		return true
	}

	return false
}

// SetLoginWithEmailAllowed gets a reference to the given bool and assigns it to the LoginWithEmailAllowed field.
func (o *RealmRepresentation) SetLoginWithEmailAllowed(v bool) {
	o.LoginWithEmailAllowed = &v
}

// GetDuplicateEmailsAllowed returns the DuplicateEmailsAllowed field value if set, zero value otherwise.
func (o *RealmRepresentation) GetDuplicateEmailsAllowed() bool {
	if o == nil || IsNil(o.DuplicateEmailsAllowed) {
		var ret bool
		return ret
	}
	return *o.DuplicateEmailsAllowed
}

// GetDuplicateEmailsAllowedOk returns a tuple with the DuplicateEmailsAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetDuplicateEmailsAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.DuplicateEmailsAllowed) {
		return nil, false
	}
	return o.DuplicateEmailsAllowed, true
}

// HasDuplicateEmailsAllowed returns a boolean if a field has been set.
func (o *RealmRepresentation) HasDuplicateEmailsAllowed() bool {
	if o != nil && !IsNil(o.DuplicateEmailsAllowed) {
		return true
	}

	return false
}

// SetDuplicateEmailsAllowed gets a reference to the given bool and assigns it to the DuplicateEmailsAllowed field.
func (o *RealmRepresentation) SetDuplicateEmailsAllowed(v bool) {
	o.DuplicateEmailsAllowed = &v
}

// GetResetPasswordAllowed returns the ResetPasswordAllowed field value if set, zero value otherwise.
func (o *RealmRepresentation) GetResetPasswordAllowed() bool {
	if o == nil || IsNil(o.ResetPasswordAllowed) {
		var ret bool
		return ret
	}
	return *o.ResetPasswordAllowed
}

// GetResetPasswordAllowedOk returns a tuple with the ResetPasswordAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetResetPasswordAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.ResetPasswordAllowed) {
		return nil, false
	}
	return o.ResetPasswordAllowed, true
}

// HasResetPasswordAllowed returns a boolean if a field has been set.
func (o *RealmRepresentation) HasResetPasswordAllowed() bool {
	if o != nil && !IsNil(o.ResetPasswordAllowed) {
		return true
	}

	return false
}

// SetResetPasswordAllowed gets a reference to the given bool and assigns it to the ResetPasswordAllowed field.
func (o *RealmRepresentation) SetResetPasswordAllowed(v bool) {
	o.ResetPasswordAllowed = &v
}

// GetEditUsernameAllowed returns the EditUsernameAllowed field value if set, zero value otherwise.
func (o *RealmRepresentation) GetEditUsernameAllowed() bool {
	if o == nil || IsNil(o.EditUsernameAllowed) {
		var ret bool
		return ret
	}
	return *o.EditUsernameAllowed
}

// GetEditUsernameAllowedOk returns a tuple with the EditUsernameAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetEditUsernameAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.EditUsernameAllowed) {
		return nil, false
	}
	return o.EditUsernameAllowed, true
}

// HasEditUsernameAllowed returns a boolean if a field has been set.
func (o *RealmRepresentation) HasEditUsernameAllowed() bool {
	if o != nil && !IsNil(o.EditUsernameAllowed) {
		return true
	}

	return false
}

// SetEditUsernameAllowed gets a reference to the given bool and assigns it to the EditUsernameAllowed field.
func (o *RealmRepresentation) SetEditUsernameAllowed(v bool) {
	o.EditUsernameAllowed = &v
}

// GetUserCacheEnabled returns the UserCacheEnabled field value if set, zero value otherwise.
func (o *RealmRepresentation) GetUserCacheEnabled() bool {
	if o == nil || IsNil(o.UserCacheEnabled) {
		var ret bool
		return ret
	}
	return *o.UserCacheEnabled
}

// GetUserCacheEnabledOk returns a tuple with the UserCacheEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetUserCacheEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.UserCacheEnabled) {
		return nil, false
	}
	return o.UserCacheEnabled, true
}

// HasUserCacheEnabled returns a boolean if a field has been set.
func (o *RealmRepresentation) HasUserCacheEnabled() bool {
	if o != nil && !IsNil(o.UserCacheEnabled) {
		return true
	}

	return false
}

// SetUserCacheEnabled gets a reference to the given bool and assigns it to the UserCacheEnabled field.
func (o *RealmRepresentation) SetUserCacheEnabled(v bool) {
	o.UserCacheEnabled = &v
}

// GetRealmCacheEnabled returns the RealmCacheEnabled field value if set, zero value otherwise.
func (o *RealmRepresentation) GetRealmCacheEnabled() bool {
	if o == nil || IsNil(o.RealmCacheEnabled) {
		var ret bool
		return ret
	}
	return *o.RealmCacheEnabled
}

// GetRealmCacheEnabledOk returns a tuple with the RealmCacheEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetRealmCacheEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmCacheEnabled) {
		return nil, false
	}
	return o.RealmCacheEnabled, true
}

// HasRealmCacheEnabled returns a boolean if a field has been set.
func (o *RealmRepresentation) HasRealmCacheEnabled() bool {
	if o != nil && !IsNil(o.RealmCacheEnabled) {
		return true
	}

	return false
}

// SetRealmCacheEnabled gets a reference to the given bool and assigns it to the RealmCacheEnabled field.
func (o *RealmRepresentation) SetRealmCacheEnabled(v bool) {
	o.RealmCacheEnabled = &v
}

// GetBruteForceProtected returns the BruteForceProtected field value if set, zero value otherwise.
func (o *RealmRepresentation) GetBruteForceProtected() bool {
	if o == nil || IsNil(o.BruteForceProtected) {
		var ret bool
		return ret
	}
	return *o.BruteForceProtected
}

// GetBruteForceProtectedOk returns a tuple with the BruteForceProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetBruteForceProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.BruteForceProtected) {
		return nil, false
	}
	return o.BruteForceProtected, true
}

// HasBruteForceProtected returns a boolean if a field has been set.
func (o *RealmRepresentation) HasBruteForceProtected() bool {
	if o != nil && !IsNil(o.BruteForceProtected) {
		return true
	}

	return false
}

// SetBruteForceProtected gets a reference to the given bool and assigns it to the BruteForceProtected field.
func (o *RealmRepresentation) SetBruteForceProtected(v bool) {
	o.BruteForceProtected = &v
}

// GetPermanentLockout returns the PermanentLockout field value if set, zero value otherwise.
func (o *RealmRepresentation) GetPermanentLockout() bool {
	if o == nil || IsNil(o.PermanentLockout) {
		var ret bool
		return ret
	}
	return *o.PermanentLockout
}

// GetPermanentLockoutOk returns a tuple with the PermanentLockout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetPermanentLockoutOk() (*bool, bool) {
	if o == nil || IsNil(o.PermanentLockout) {
		return nil, false
	}
	return o.PermanentLockout, true
}

// HasPermanentLockout returns a boolean if a field has been set.
func (o *RealmRepresentation) HasPermanentLockout() bool {
	if o != nil && !IsNil(o.PermanentLockout) {
		return true
	}

	return false
}

// SetPermanentLockout gets a reference to the given bool and assigns it to the PermanentLockout field.
func (o *RealmRepresentation) SetPermanentLockout(v bool) {
	o.PermanentLockout = &v
}

// GetMaxFailureWaitSeconds returns the MaxFailureWaitSeconds field value if set, zero value otherwise.
func (o *RealmRepresentation) GetMaxFailureWaitSeconds() int32 {
	if o == nil || IsNil(o.MaxFailureWaitSeconds) {
		var ret int32
		return ret
	}
	return *o.MaxFailureWaitSeconds
}

// GetMaxFailureWaitSecondsOk returns a tuple with the MaxFailureWaitSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetMaxFailureWaitSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxFailureWaitSeconds) {
		return nil, false
	}
	return o.MaxFailureWaitSeconds, true
}

// HasMaxFailureWaitSeconds returns a boolean if a field has been set.
func (o *RealmRepresentation) HasMaxFailureWaitSeconds() bool {
	if o != nil && !IsNil(o.MaxFailureWaitSeconds) {
		return true
	}

	return false
}

// SetMaxFailureWaitSeconds gets a reference to the given int32 and assigns it to the MaxFailureWaitSeconds field.
func (o *RealmRepresentation) SetMaxFailureWaitSeconds(v int32) {
	o.MaxFailureWaitSeconds = &v
}

// GetMinimumQuickLoginWaitSeconds returns the MinimumQuickLoginWaitSeconds field value if set, zero value otherwise.
func (o *RealmRepresentation) GetMinimumQuickLoginWaitSeconds() int32 {
	if o == nil || IsNil(o.MinimumQuickLoginWaitSeconds) {
		var ret int32
		return ret
	}
	return *o.MinimumQuickLoginWaitSeconds
}

// GetMinimumQuickLoginWaitSecondsOk returns a tuple with the MinimumQuickLoginWaitSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetMinimumQuickLoginWaitSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumQuickLoginWaitSeconds) {
		return nil, false
	}
	return o.MinimumQuickLoginWaitSeconds, true
}

// HasMinimumQuickLoginWaitSeconds returns a boolean if a field has been set.
func (o *RealmRepresentation) HasMinimumQuickLoginWaitSeconds() bool {
	if o != nil && !IsNil(o.MinimumQuickLoginWaitSeconds) {
		return true
	}

	return false
}

// SetMinimumQuickLoginWaitSeconds gets a reference to the given int32 and assigns it to the MinimumQuickLoginWaitSeconds field.
func (o *RealmRepresentation) SetMinimumQuickLoginWaitSeconds(v int32) {
	o.MinimumQuickLoginWaitSeconds = &v
}

// GetWaitIncrementSeconds returns the WaitIncrementSeconds field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWaitIncrementSeconds() int32 {
	if o == nil || IsNil(o.WaitIncrementSeconds) {
		var ret int32
		return ret
	}
	return *o.WaitIncrementSeconds
}

// GetWaitIncrementSecondsOk returns a tuple with the WaitIncrementSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWaitIncrementSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.WaitIncrementSeconds) {
		return nil, false
	}
	return o.WaitIncrementSeconds, true
}

// HasWaitIncrementSeconds returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWaitIncrementSeconds() bool {
	if o != nil && !IsNil(o.WaitIncrementSeconds) {
		return true
	}

	return false
}

// SetWaitIncrementSeconds gets a reference to the given int32 and assigns it to the WaitIncrementSeconds field.
func (o *RealmRepresentation) SetWaitIncrementSeconds(v int32) {
	o.WaitIncrementSeconds = &v
}

// GetQuickLoginCheckMilliSeconds returns the QuickLoginCheckMilliSeconds field value if set, zero value otherwise.
func (o *RealmRepresentation) GetQuickLoginCheckMilliSeconds() int64 {
	if o == nil || IsNil(o.QuickLoginCheckMilliSeconds) {
		var ret int64
		return ret
	}
	return *o.QuickLoginCheckMilliSeconds
}

// GetQuickLoginCheckMilliSecondsOk returns a tuple with the QuickLoginCheckMilliSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetQuickLoginCheckMilliSecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.QuickLoginCheckMilliSeconds) {
		return nil, false
	}
	return o.QuickLoginCheckMilliSeconds, true
}

// HasQuickLoginCheckMilliSeconds returns a boolean if a field has been set.
func (o *RealmRepresentation) HasQuickLoginCheckMilliSeconds() bool {
	if o != nil && !IsNil(o.QuickLoginCheckMilliSeconds) {
		return true
	}

	return false
}

// SetQuickLoginCheckMilliSeconds gets a reference to the given int64 and assigns it to the QuickLoginCheckMilliSeconds field.
func (o *RealmRepresentation) SetQuickLoginCheckMilliSeconds(v int64) {
	o.QuickLoginCheckMilliSeconds = &v
}

// GetMaxDeltaTimeSeconds returns the MaxDeltaTimeSeconds field value if set, zero value otherwise.
func (o *RealmRepresentation) GetMaxDeltaTimeSeconds() int32 {
	if o == nil || IsNil(o.MaxDeltaTimeSeconds) {
		var ret int32
		return ret
	}
	return *o.MaxDeltaTimeSeconds
}

// GetMaxDeltaTimeSecondsOk returns a tuple with the MaxDeltaTimeSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetMaxDeltaTimeSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxDeltaTimeSeconds) {
		return nil, false
	}
	return o.MaxDeltaTimeSeconds, true
}

// HasMaxDeltaTimeSeconds returns a boolean if a field has been set.
func (o *RealmRepresentation) HasMaxDeltaTimeSeconds() bool {
	if o != nil && !IsNil(o.MaxDeltaTimeSeconds) {
		return true
	}

	return false
}

// SetMaxDeltaTimeSeconds gets a reference to the given int32 and assigns it to the MaxDeltaTimeSeconds field.
func (o *RealmRepresentation) SetMaxDeltaTimeSeconds(v int32) {
	o.MaxDeltaTimeSeconds = &v
}

// GetFailureFactor returns the FailureFactor field value if set, zero value otherwise.
func (o *RealmRepresentation) GetFailureFactor() int32 {
	if o == nil || IsNil(o.FailureFactor) {
		var ret int32
		return ret
	}
	return *o.FailureFactor
}

// GetFailureFactorOk returns a tuple with the FailureFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetFailureFactorOk() (*int32, bool) {
	if o == nil || IsNil(o.FailureFactor) {
		return nil, false
	}
	return o.FailureFactor, true
}

// HasFailureFactor returns a boolean if a field has been set.
func (o *RealmRepresentation) HasFailureFactor() bool {
	if o != nil && !IsNil(o.FailureFactor) {
		return true
	}

	return false
}

// SetFailureFactor gets a reference to the given int32 and assigns it to the FailureFactor field.
func (o *RealmRepresentation) SetFailureFactor(v int32) {
	o.FailureFactor = &v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *RealmRepresentation) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey) {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetPrivateKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKey) {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *RealmRepresentation) HasPrivateKey() bool {
	if o != nil && !IsNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *RealmRepresentation) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *RealmRepresentation) GetPublicKey() string {
	if o == nil || IsNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *RealmRepresentation) HasPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *RealmRepresentation) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *RealmRepresentation) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *RealmRepresentation) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *RealmRepresentation) SetCertificate(v string) {
	o.Certificate = &v
}

// GetCodeSecret returns the CodeSecret field value if set, zero value otherwise.
func (o *RealmRepresentation) GetCodeSecret() string {
	if o == nil || IsNil(o.CodeSecret) {
		var ret string
		return ret
	}
	return *o.CodeSecret
}

// GetCodeSecretOk returns a tuple with the CodeSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetCodeSecretOk() (*string, bool) {
	if o == nil || IsNil(o.CodeSecret) {
		return nil, false
	}
	return o.CodeSecret, true
}

// HasCodeSecret returns a boolean if a field has been set.
func (o *RealmRepresentation) HasCodeSecret() bool {
	if o != nil && !IsNil(o.CodeSecret) {
		return true
	}

	return false
}

// SetCodeSecret gets a reference to the given string and assigns it to the CodeSecret field.
func (o *RealmRepresentation) SetCodeSecret(v string) {
	o.CodeSecret = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *RealmRepresentation) GetRoles() RolesRepresentation {
	if o == nil || IsNil(o.Roles) {
		var ret RolesRepresentation
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetRolesOk() (*RolesRepresentation, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *RealmRepresentation) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given RolesRepresentation and assigns it to the Roles field.
func (o *RealmRepresentation) SetRoles(v RolesRepresentation) {
	o.Roles = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *RealmRepresentation) GetGroups() []GroupRepresentation {
	if o == nil || IsNil(o.Groups) {
		var ret []GroupRepresentation
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetGroupsOk() ([]GroupRepresentation, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *RealmRepresentation) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []GroupRepresentation and assigns it to the Groups field.
func (o *RealmRepresentation) SetGroups(v []GroupRepresentation) {
	o.Groups = v
}

// GetDefaultRoles returns the DefaultRoles field value if set, zero value otherwise.
func (o *RealmRepresentation) GetDefaultRoles() []string {
	if o == nil || IsNil(o.DefaultRoles) {
		var ret []string
		return ret
	}
	return o.DefaultRoles
}

// GetDefaultRolesOk returns a tuple with the DefaultRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetDefaultRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.DefaultRoles) {
		return nil, false
	}
	return o.DefaultRoles, true
}

// HasDefaultRoles returns a boolean if a field has been set.
func (o *RealmRepresentation) HasDefaultRoles() bool {
	if o != nil && !IsNil(o.DefaultRoles) {
		return true
	}

	return false
}

// SetDefaultRoles gets a reference to the given []string and assigns it to the DefaultRoles field.
func (o *RealmRepresentation) SetDefaultRoles(v []string) {
	o.DefaultRoles = v
}

// GetDefaultRole returns the DefaultRole field value if set, zero value otherwise.
func (o *RealmRepresentation) GetDefaultRole() RoleRepresentation {
	if o == nil || IsNil(o.DefaultRole) {
		var ret RoleRepresentation
		return ret
	}
	return *o.DefaultRole
}

// GetDefaultRoleOk returns a tuple with the DefaultRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetDefaultRoleOk() (*RoleRepresentation, bool) {
	if o == nil || IsNil(o.DefaultRole) {
		return nil, false
	}
	return o.DefaultRole, true
}

// HasDefaultRole returns a boolean if a field has been set.
func (o *RealmRepresentation) HasDefaultRole() bool {
	if o != nil && !IsNil(o.DefaultRole) {
		return true
	}

	return false
}

// SetDefaultRole gets a reference to the given RoleRepresentation and assigns it to the DefaultRole field.
func (o *RealmRepresentation) SetDefaultRole(v RoleRepresentation) {
	o.DefaultRole = &v
}

// GetDefaultGroups returns the DefaultGroups field value if set, zero value otherwise.
func (o *RealmRepresentation) GetDefaultGroups() []string {
	if o == nil || IsNil(o.DefaultGroups) {
		var ret []string
		return ret
	}
	return o.DefaultGroups
}

// GetDefaultGroupsOk returns a tuple with the DefaultGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetDefaultGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.DefaultGroups) {
		return nil, false
	}
	return o.DefaultGroups, true
}

// HasDefaultGroups returns a boolean if a field has been set.
func (o *RealmRepresentation) HasDefaultGroups() bool {
	if o != nil && !IsNil(o.DefaultGroups) {
		return true
	}

	return false
}

// SetDefaultGroups gets a reference to the given []string and assigns it to the DefaultGroups field.
func (o *RealmRepresentation) SetDefaultGroups(v []string) {
	o.DefaultGroups = v
}

// GetRequiredCredentials returns the RequiredCredentials field value if set, zero value otherwise.
func (o *RealmRepresentation) GetRequiredCredentials() []string {
	if o == nil || IsNil(o.RequiredCredentials) {
		var ret []string
		return ret
	}
	return o.RequiredCredentials
}

// GetRequiredCredentialsOk returns a tuple with the RequiredCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetRequiredCredentialsOk() ([]string, bool) {
	if o == nil || IsNil(o.RequiredCredentials) {
		return nil, false
	}
	return o.RequiredCredentials, true
}

// HasRequiredCredentials returns a boolean if a field has been set.
func (o *RealmRepresentation) HasRequiredCredentials() bool {
	if o != nil && !IsNil(o.RequiredCredentials) {
		return true
	}

	return false
}

// SetRequiredCredentials gets a reference to the given []string and assigns it to the RequiredCredentials field.
func (o *RealmRepresentation) SetRequiredCredentials(v []string) {
	o.RequiredCredentials = v
}

// GetPasswordPolicy returns the PasswordPolicy field value if set, zero value otherwise.
func (o *RealmRepresentation) GetPasswordPolicy() string {
	if o == nil || IsNil(o.PasswordPolicy) {
		var ret string
		return ret
	}
	return *o.PasswordPolicy
}

// GetPasswordPolicyOk returns a tuple with the PasswordPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetPasswordPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordPolicy) {
		return nil, false
	}
	return o.PasswordPolicy, true
}

// HasPasswordPolicy returns a boolean if a field has been set.
func (o *RealmRepresentation) HasPasswordPolicy() bool {
	if o != nil && !IsNil(o.PasswordPolicy) {
		return true
	}

	return false
}

// SetPasswordPolicy gets a reference to the given string and assigns it to the PasswordPolicy field.
func (o *RealmRepresentation) SetPasswordPolicy(v string) {
	o.PasswordPolicy = &v
}

// GetOtpPolicyType returns the OtpPolicyType field value if set, zero value otherwise.
func (o *RealmRepresentation) GetOtpPolicyType() string {
	if o == nil || IsNil(o.OtpPolicyType) {
		var ret string
		return ret
	}
	return *o.OtpPolicyType
}

// GetOtpPolicyTypeOk returns a tuple with the OtpPolicyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetOtpPolicyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OtpPolicyType) {
		return nil, false
	}
	return o.OtpPolicyType, true
}

// HasOtpPolicyType returns a boolean if a field has been set.
func (o *RealmRepresentation) HasOtpPolicyType() bool {
	if o != nil && !IsNil(o.OtpPolicyType) {
		return true
	}

	return false
}

// SetOtpPolicyType gets a reference to the given string and assigns it to the OtpPolicyType field.
func (o *RealmRepresentation) SetOtpPolicyType(v string) {
	o.OtpPolicyType = &v
}

// GetOtpPolicyAlgorithm returns the OtpPolicyAlgorithm field value if set, zero value otherwise.
func (o *RealmRepresentation) GetOtpPolicyAlgorithm() string {
	if o == nil || IsNil(o.OtpPolicyAlgorithm) {
		var ret string
		return ret
	}
	return *o.OtpPolicyAlgorithm
}

// GetOtpPolicyAlgorithmOk returns a tuple with the OtpPolicyAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetOtpPolicyAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.OtpPolicyAlgorithm) {
		return nil, false
	}
	return o.OtpPolicyAlgorithm, true
}

// HasOtpPolicyAlgorithm returns a boolean if a field has been set.
func (o *RealmRepresentation) HasOtpPolicyAlgorithm() bool {
	if o != nil && !IsNil(o.OtpPolicyAlgorithm) {
		return true
	}

	return false
}

// SetOtpPolicyAlgorithm gets a reference to the given string and assigns it to the OtpPolicyAlgorithm field.
func (o *RealmRepresentation) SetOtpPolicyAlgorithm(v string) {
	o.OtpPolicyAlgorithm = &v
}

// GetOtpPolicyInitialCounter returns the OtpPolicyInitialCounter field value if set, zero value otherwise.
func (o *RealmRepresentation) GetOtpPolicyInitialCounter() int32 {
	if o == nil || IsNil(o.OtpPolicyInitialCounter) {
		var ret int32
		return ret
	}
	return *o.OtpPolicyInitialCounter
}

// GetOtpPolicyInitialCounterOk returns a tuple with the OtpPolicyInitialCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetOtpPolicyInitialCounterOk() (*int32, bool) {
	if o == nil || IsNil(o.OtpPolicyInitialCounter) {
		return nil, false
	}
	return o.OtpPolicyInitialCounter, true
}

// HasOtpPolicyInitialCounter returns a boolean if a field has been set.
func (o *RealmRepresentation) HasOtpPolicyInitialCounter() bool {
	if o != nil && !IsNil(o.OtpPolicyInitialCounter) {
		return true
	}

	return false
}

// SetOtpPolicyInitialCounter gets a reference to the given int32 and assigns it to the OtpPolicyInitialCounter field.
func (o *RealmRepresentation) SetOtpPolicyInitialCounter(v int32) {
	o.OtpPolicyInitialCounter = &v
}

// GetOtpPolicyDigits returns the OtpPolicyDigits field value if set, zero value otherwise.
func (o *RealmRepresentation) GetOtpPolicyDigits() int32 {
	if o == nil || IsNil(o.OtpPolicyDigits) {
		var ret int32
		return ret
	}
	return *o.OtpPolicyDigits
}

// GetOtpPolicyDigitsOk returns a tuple with the OtpPolicyDigits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetOtpPolicyDigitsOk() (*int32, bool) {
	if o == nil || IsNil(o.OtpPolicyDigits) {
		return nil, false
	}
	return o.OtpPolicyDigits, true
}

// HasOtpPolicyDigits returns a boolean if a field has been set.
func (o *RealmRepresentation) HasOtpPolicyDigits() bool {
	if o != nil && !IsNil(o.OtpPolicyDigits) {
		return true
	}

	return false
}

// SetOtpPolicyDigits gets a reference to the given int32 and assigns it to the OtpPolicyDigits field.
func (o *RealmRepresentation) SetOtpPolicyDigits(v int32) {
	o.OtpPolicyDigits = &v
}

// GetOtpPolicyLookAheadWindow returns the OtpPolicyLookAheadWindow field value if set, zero value otherwise.
func (o *RealmRepresentation) GetOtpPolicyLookAheadWindow() int32 {
	if o == nil || IsNil(o.OtpPolicyLookAheadWindow) {
		var ret int32
		return ret
	}
	return *o.OtpPolicyLookAheadWindow
}

// GetOtpPolicyLookAheadWindowOk returns a tuple with the OtpPolicyLookAheadWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetOtpPolicyLookAheadWindowOk() (*int32, bool) {
	if o == nil || IsNil(o.OtpPolicyLookAheadWindow) {
		return nil, false
	}
	return o.OtpPolicyLookAheadWindow, true
}

// HasOtpPolicyLookAheadWindow returns a boolean if a field has been set.
func (o *RealmRepresentation) HasOtpPolicyLookAheadWindow() bool {
	if o != nil && !IsNil(o.OtpPolicyLookAheadWindow) {
		return true
	}

	return false
}

// SetOtpPolicyLookAheadWindow gets a reference to the given int32 and assigns it to the OtpPolicyLookAheadWindow field.
func (o *RealmRepresentation) SetOtpPolicyLookAheadWindow(v int32) {
	o.OtpPolicyLookAheadWindow = &v
}

// GetOtpPolicyPeriod returns the OtpPolicyPeriod field value if set, zero value otherwise.
func (o *RealmRepresentation) GetOtpPolicyPeriod() int32 {
	if o == nil || IsNil(o.OtpPolicyPeriod) {
		var ret int32
		return ret
	}
	return *o.OtpPolicyPeriod
}

// GetOtpPolicyPeriodOk returns a tuple with the OtpPolicyPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetOtpPolicyPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.OtpPolicyPeriod) {
		return nil, false
	}
	return o.OtpPolicyPeriod, true
}

// HasOtpPolicyPeriod returns a boolean if a field has been set.
func (o *RealmRepresentation) HasOtpPolicyPeriod() bool {
	if o != nil && !IsNil(o.OtpPolicyPeriod) {
		return true
	}

	return false
}

// SetOtpPolicyPeriod gets a reference to the given int32 and assigns it to the OtpPolicyPeriod field.
func (o *RealmRepresentation) SetOtpPolicyPeriod(v int32) {
	o.OtpPolicyPeriod = &v
}

// GetOtpPolicyCodeReusable returns the OtpPolicyCodeReusable field value if set, zero value otherwise.
func (o *RealmRepresentation) GetOtpPolicyCodeReusable() bool {
	if o == nil || IsNil(o.OtpPolicyCodeReusable) {
		var ret bool
		return ret
	}
	return *o.OtpPolicyCodeReusable
}

// GetOtpPolicyCodeReusableOk returns a tuple with the OtpPolicyCodeReusable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetOtpPolicyCodeReusableOk() (*bool, bool) {
	if o == nil || IsNil(o.OtpPolicyCodeReusable) {
		return nil, false
	}
	return o.OtpPolicyCodeReusable, true
}

// HasOtpPolicyCodeReusable returns a boolean if a field has been set.
func (o *RealmRepresentation) HasOtpPolicyCodeReusable() bool {
	if o != nil && !IsNil(o.OtpPolicyCodeReusable) {
		return true
	}

	return false
}

// SetOtpPolicyCodeReusable gets a reference to the given bool and assigns it to the OtpPolicyCodeReusable field.
func (o *RealmRepresentation) SetOtpPolicyCodeReusable(v bool) {
	o.OtpPolicyCodeReusable = &v
}

// GetOtpSupportedApplications returns the OtpSupportedApplications field value if set, zero value otherwise.
func (o *RealmRepresentation) GetOtpSupportedApplications() []string {
	if o == nil || IsNil(o.OtpSupportedApplications) {
		var ret []string
		return ret
	}
	return o.OtpSupportedApplications
}

// GetOtpSupportedApplicationsOk returns a tuple with the OtpSupportedApplications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetOtpSupportedApplicationsOk() ([]string, bool) {
	if o == nil || IsNil(o.OtpSupportedApplications) {
		return nil, false
	}
	return o.OtpSupportedApplications, true
}

// HasOtpSupportedApplications returns a boolean if a field has been set.
func (o *RealmRepresentation) HasOtpSupportedApplications() bool {
	if o != nil && !IsNil(o.OtpSupportedApplications) {
		return true
	}

	return false
}

// SetOtpSupportedApplications gets a reference to the given []string and assigns it to the OtpSupportedApplications field.
func (o *RealmRepresentation) SetOtpSupportedApplications(v []string) {
	o.OtpSupportedApplications = v
}

// GetLocalizationTexts returns the LocalizationTexts field value if set, zero value otherwise.
func (o *RealmRepresentation) GetLocalizationTexts() map[string]map[string]interface{} {
	if o == nil || IsNil(o.LocalizationTexts) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.LocalizationTexts
}

// GetLocalizationTextsOk returns a tuple with the LocalizationTexts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetLocalizationTextsOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.LocalizationTexts) {
		return nil, false
	}
	return o.LocalizationTexts, true
}

// HasLocalizationTexts returns a boolean if a field has been set.
func (o *RealmRepresentation) HasLocalizationTexts() bool {
	if o != nil && !IsNil(o.LocalizationTexts) {
		return true
	}

	return false
}

// SetLocalizationTexts gets a reference to the given map[string]map[string]interface{} and assigns it to the LocalizationTexts field.
func (o *RealmRepresentation) SetLocalizationTexts(v map[string]map[string]interface{}) {
	o.LocalizationTexts = &v
}

// GetWebAuthnPolicyRpEntityName returns the WebAuthnPolicyRpEntityName field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyRpEntityName() string {
	if o == nil || IsNil(o.WebAuthnPolicyRpEntityName) {
		var ret string
		return ret
	}
	return *o.WebAuthnPolicyRpEntityName
}

// GetWebAuthnPolicyRpEntityNameOk returns a tuple with the WebAuthnPolicyRpEntityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyRpEntityNameOk() (*string, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyRpEntityName) {
		return nil, false
	}
	return o.WebAuthnPolicyRpEntityName, true
}

// HasWebAuthnPolicyRpEntityName returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyRpEntityName() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyRpEntityName) {
		return true
	}

	return false
}

// SetWebAuthnPolicyRpEntityName gets a reference to the given string and assigns it to the WebAuthnPolicyRpEntityName field.
func (o *RealmRepresentation) SetWebAuthnPolicyRpEntityName(v string) {
	o.WebAuthnPolicyRpEntityName = &v
}

// GetWebAuthnPolicySignatureAlgorithms returns the WebAuthnPolicySignatureAlgorithms field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicySignatureAlgorithms() []string {
	if o == nil || IsNil(o.WebAuthnPolicySignatureAlgorithms) {
		var ret []string
		return ret
	}
	return o.WebAuthnPolicySignatureAlgorithms
}

// GetWebAuthnPolicySignatureAlgorithmsOk returns a tuple with the WebAuthnPolicySignatureAlgorithms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicySignatureAlgorithmsOk() ([]string, bool) {
	if o == nil || IsNil(o.WebAuthnPolicySignatureAlgorithms) {
		return nil, false
	}
	return o.WebAuthnPolicySignatureAlgorithms, true
}

// HasWebAuthnPolicySignatureAlgorithms returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicySignatureAlgorithms() bool {
	if o != nil && !IsNil(o.WebAuthnPolicySignatureAlgorithms) {
		return true
	}

	return false
}

// SetWebAuthnPolicySignatureAlgorithms gets a reference to the given []string and assigns it to the WebAuthnPolicySignatureAlgorithms field.
func (o *RealmRepresentation) SetWebAuthnPolicySignatureAlgorithms(v []string) {
	o.WebAuthnPolicySignatureAlgorithms = v
}

// GetWebAuthnPolicyRpId returns the WebAuthnPolicyRpId field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyRpId() string {
	if o == nil || IsNil(o.WebAuthnPolicyRpId) {
		var ret string
		return ret
	}
	return *o.WebAuthnPolicyRpId
}

// GetWebAuthnPolicyRpIdOk returns a tuple with the WebAuthnPolicyRpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyRpIdOk() (*string, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyRpId) {
		return nil, false
	}
	return o.WebAuthnPolicyRpId, true
}

// HasWebAuthnPolicyRpId returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyRpId() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyRpId) {
		return true
	}

	return false
}

// SetWebAuthnPolicyRpId gets a reference to the given string and assigns it to the WebAuthnPolicyRpId field.
func (o *RealmRepresentation) SetWebAuthnPolicyRpId(v string) {
	o.WebAuthnPolicyRpId = &v
}

// GetWebAuthnPolicyAttestationConveyancePreference returns the WebAuthnPolicyAttestationConveyancePreference field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyAttestationConveyancePreference() string {
	if o == nil || IsNil(o.WebAuthnPolicyAttestationConveyancePreference) {
		var ret string
		return ret
	}
	return *o.WebAuthnPolicyAttestationConveyancePreference
}

// GetWebAuthnPolicyAttestationConveyancePreferenceOk returns a tuple with the WebAuthnPolicyAttestationConveyancePreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyAttestationConveyancePreferenceOk() (*string, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyAttestationConveyancePreference) {
		return nil, false
	}
	return o.WebAuthnPolicyAttestationConveyancePreference, true
}

// HasWebAuthnPolicyAttestationConveyancePreference returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyAttestationConveyancePreference() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyAttestationConveyancePreference) {
		return true
	}

	return false
}

// SetWebAuthnPolicyAttestationConveyancePreference gets a reference to the given string and assigns it to the WebAuthnPolicyAttestationConveyancePreference field.
func (o *RealmRepresentation) SetWebAuthnPolicyAttestationConveyancePreference(v string) {
	o.WebAuthnPolicyAttestationConveyancePreference = &v
}

// GetWebAuthnPolicyAuthenticatorAttachment returns the WebAuthnPolicyAuthenticatorAttachment field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyAuthenticatorAttachment() string {
	if o == nil || IsNil(o.WebAuthnPolicyAuthenticatorAttachment) {
		var ret string
		return ret
	}
	return *o.WebAuthnPolicyAuthenticatorAttachment
}

// GetWebAuthnPolicyAuthenticatorAttachmentOk returns a tuple with the WebAuthnPolicyAuthenticatorAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyAuthenticatorAttachmentOk() (*string, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyAuthenticatorAttachment) {
		return nil, false
	}
	return o.WebAuthnPolicyAuthenticatorAttachment, true
}

// HasWebAuthnPolicyAuthenticatorAttachment returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyAuthenticatorAttachment() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyAuthenticatorAttachment) {
		return true
	}

	return false
}

// SetWebAuthnPolicyAuthenticatorAttachment gets a reference to the given string and assigns it to the WebAuthnPolicyAuthenticatorAttachment field.
func (o *RealmRepresentation) SetWebAuthnPolicyAuthenticatorAttachment(v string) {
	o.WebAuthnPolicyAuthenticatorAttachment = &v
}

// GetWebAuthnPolicyRequireResidentKey returns the WebAuthnPolicyRequireResidentKey field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyRequireResidentKey() string {
	if o == nil || IsNil(o.WebAuthnPolicyRequireResidentKey) {
		var ret string
		return ret
	}
	return *o.WebAuthnPolicyRequireResidentKey
}

// GetWebAuthnPolicyRequireResidentKeyOk returns a tuple with the WebAuthnPolicyRequireResidentKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyRequireResidentKeyOk() (*string, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyRequireResidentKey) {
		return nil, false
	}
	return o.WebAuthnPolicyRequireResidentKey, true
}

// HasWebAuthnPolicyRequireResidentKey returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyRequireResidentKey() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyRequireResidentKey) {
		return true
	}

	return false
}

// SetWebAuthnPolicyRequireResidentKey gets a reference to the given string and assigns it to the WebAuthnPolicyRequireResidentKey field.
func (o *RealmRepresentation) SetWebAuthnPolicyRequireResidentKey(v string) {
	o.WebAuthnPolicyRequireResidentKey = &v
}

// GetWebAuthnPolicyUserVerificationRequirement returns the WebAuthnPolicyUserVerificationRequirement field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyUserVerificationRequirement() string {
	if o == nil || IsNil(o.WebAuthnPolicyUserVerificationRequirement) {
		var ret string
		return ret
	}
	return *o.WebAuthnPolicyUserVerificationRequirement
}

// GetWebAuthnPolicyUserVerificationRequirementOk returns a tuple with the WebAuthnPolicyUserVerificationRequirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyUserVerificationRequirementOk() (*string, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyUserVerificationRequirement) {
		return nil, false
	}
	return o.WebAuthnPolicyUserVerificationRequirement, true
}

// HasWebAuthnPolicyUserVerificationRequirement returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyUserVerificationRequirement() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyUserVerificationRequirement) {
		return true
	}

	return false
}

// SetWebAuthnPolicyUserVerificationRequirement gets a reference to the given string and assigns it to the WebAuthnPolicyUserVerificationRequirement field.
func (o *RealmRepresentation) SetWebAuthnPolicyUserVerificationRequirement(v string) {
	o.WebAuthnPolicyUserVerificationRequirement = &v
}

// GetWebAuthnPolicyCreateTimeout returns the WebAuthnPolicyCreateTimeout field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyCreateTimeout() int32 {
	if o == nil || IsNil(o.WebAuthnPolicyCreateTimeout) {
		var ret int32
		return ret
	}
	return *o.WebAuthnPolicyCreateTimeout
}

// GetWebAuthnPolicyCreateTimeoutOk returns a tuple with the WebAuthnPolicyCreateTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyCreateTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyCreateTimeout) {
		return nil, false
	}
	return o.WebAuthnPolicyCreateTimeout, true
}

// HasWebAuthnPolicyCreateTimeout returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyCreateTimeout() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyCreateTimeout) {
		return true
	}

	return false
}

// SetWebAuthnPolicyCreateTimeout gets a reference to the given int32 and assigns it to the WebAuthnPolicyCreateTimeout field.
func (o *RealmRepresentation) SetWebAuthnPolicyCreateTimeout(v int32) {
	o.WebAuthnPolicyCreateTimeout = &v
}

// GetWebAuthnPolicyAvoidSameAuthenticatorRegister returns the WebAuthnPolicyAvoidSameAuthenticatorRegister field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyAvoidSameAuthenticatorRegister() bool {
	if o == nil || IsNil(o.WebAuthnPolicyAvoidSameAuthenticatorRegister) {
		var ret bool
		return ret
	}
	return *o.WebAuthnPolicyAvoidSameAuthenticatorRegister
}

// GetWebAuthnPolicyAvoidSameAuthenticatorRegisterOk returns a tuple with the WebAuthnPolicyAvoidSameAuthenticatorRegister field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyAvoidSameAuthenticatorRegisterOk() (*bool, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyAvoidSameAuthenticatorRegister) {
		return nil, false
	}
	return o.WebAuthnPolicyAvoidSameAuthenticatorRegister, true
}

// HasWebAuthnPolicyAvoidSameAuthenticatorRegister returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyAvoidSameAuthenticatorRegister() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyAvoidSameAuthenticatorRegister) {
		return true
	}

	return false
}

// SetWebAuthnPolicyAvoidSameAuthenticatorRegister gets a reference to the given bool and assigns it to the WebAuthnPolicyAvoidSameAuthenticatorRegister field.
func (o *RealmRepresentation) SetWebAuthnPolicyAvoidSameAuthenticatorRegister(v bool) {
	o.WebAuthnPolicyAvoidSameAuthenticatorRegister = &v
}

// GetWebAuthnPolicyAcceptableAaguids returns the WebAuthnPolicyAcceptableAaguids field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyAcceptableAaguids() []string {
	if o == nil || IsNil(o.WebAuthnPolicyAcceptableAaguids) {
		var ret []string
		return ret
	}
	return o.WebAuthnPolicyAcceptableAaguids
}

// GetWebAuthnPolicyAcceptableAaguidsOk returns a tuple with the WebAuthnPolicyAcceptableAaguids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyAcceptableAaguidsOk() ([]string, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyAcceptableAaguids) {
		return nil, false
	}
	return o.WebAuthnPolicyAcceptableAaguids, true
}

// HasWebAuthnPolicyAcceptableAaguids returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyAcceptableAaguids() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyAcceptableAaguids) {
		return true
	}

	return false
}

// SetWebAuthnPolicyAcceptableAaguids gets a reference to the given []string and assigns it to the WebAuthnPolicyAcceptableAaguids field.
func (o *RealmRepresentation) SetWebAuthnPolicyAcceptableAaguids(v []string) {
	o.WebAuthnPolicyAcceptableAaguids = v
}

// GetWebAuthnPolicyExtraOrigins returns the WebAuthnPolicyExtraOrigins field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyExtraOrigins() []string {
	if o == nil || IsNil(o.WebAuthnPolicyExtraOrigins) {
		var ret []string
		return ret
	}
	return o.WebAuthnPolicyExtraOrigins
}

// GetWebAuthnPolicyExtraOriginsOk returns a tuple with the WebAuthnPolicyExtraOrigins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyExtraOriginsOk() ([]string, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyExtraOrigins) {
		return nil, false
	}
	return o.WebAuthnPolicyExtraOrigins, true
}

// HasWebAuthnPolicyExtraOrigins returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyExtraOrigins() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyExtraOrigins) {
		return true
	}

	return false
}

// SetWebAuthnPolicyExtraOrigins gets a reference to the given []string and assigns it to the WebAuthnPolicyExtraOrigins field.
func (o *RealmRepresentation) SetWebAuthnPolicyExtraOrigins(v []string) {
	o.WebAuthnPolicyExtraOrigins = v
}

// GetWebAuthnPolicyPasswordlessRpEntityName returns the WebAuthnPolicyPasswordlessRpEntityName field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessRpEntityName() string {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessRpEntityName) {
		var ret string
		return ret
	}
	return *o.WebAuthnPolicyPasswordlessRpEntityName
}

// GetWebAuthnPolicyPasswordlessRpEntityNameOk returns a tuple with the WebAuthnPolicyPasswordlessRpEntityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessRpEntityNameOk() (*string, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessRpEntityName) {
		return nil, false
	}
	return o.WebAuthnPolicyPasswordlessRpEntityName, true
}

// HasWebAuthnPolicyPasswordlessRpEntityName returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyPasswordlessRpEntityName() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyPasswordlessRpEntityName) {
		return true
	}

	return false
}

// SetWebAuthnPolicyPasswordlessRpEntityName gets a reference to the given string and assigns it to the WebAuthnPolicyPasswordlessRpEntityName field.
func (o *RealmRepresentation) SetWebAuthnPolicyPasswordlessRpEntityName(v string) {
	o.WebAuthnPolicyPasswordlessRpEntityName = &v
}

// GetWebAuthnPolicyPasswordlessSignatureAlgorithms returns the WebAuthnPolicyPasswordlessSignatureAlgorithms field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessSignatureAlgorithms() []string {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessSignatureAlgorithms) {
		var ret []string
		return ret
	}
	return o.WebAuthnPolicyPasswordlessSignatureAlgorithms
}

// GetWebAuthnPolicyPasswordlessSignatureAlgorithmsOk returns a tuple with the WebAuthnPolicyPasswordlessSignatureAlgorithms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessSignatureAlgorithmsOk() ([]string, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessSignatureAlgorithms) {
		return nil, false
	}
	return o.WebAuthnPolicyPasswordlessSignatureAlgorithms, true
}

// HasWebAuthnPolicyPasswordlessSignatureAlgorithms returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyPasswordlessSignatureAlgorithms() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyPasswordlessSignatureAlgorithms) {
		return true
	}

	return false
}

// SetWebAuthnPolicyPasswordlessSignatureAlgorithms gets a reference to the given []string and assigns it to the WebAuthnPolicyPasswordlessSignatureAlgorithms field.
func (o *RealmRepresentation) SetWebAuthnPolicyPasswordlessSignatureAlgorithms(v []string) {
	o.WebAuthnPolicyPasswordlessSignatureAlgorithms = v
}

// GetWebAuthnPolicyPasswordlessRpId returns the WebAuthnPolicyPasswordlessRpId field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessRpId() string {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessRpId) {
		var ret string
		return ret
	}
	return *o.WebAuthnPolicyPasswordlessRpId
}

// GetWebAuthnPolicyPasswordlessRpIdOk returns a tuple with the WebAuthnPolicyPasswordlessRpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessRpIdOk() (*string, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessRpId) {
		return nil, false
	}
	return o.WebAuthnPolicyPasswordlessRpId, true
}

// HasWebAuthnPolicyPasswordlessRpId returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyPasswordlessRpId() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyPasswordlessRpId) {
		return true
	}

	return false
}

// SetWebAuthnPolicyPasswordlessRpId gets a reference to the given string and assigns it to the WebAuthnPolicyPasswordlessRpId field.
func (o *RealmRepresentation) SetWebAuthnPolicyPasswordlessRpId(v string) {
	o.WebAuthnPolicyPasswordlessRpId = &v
}

// GetWebAuthnPolicyPasswordlessAttestationConveyancePreference returns the WebAuthnPolicyPasswordlessAttestationConveyancePreference field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessAttestationConveyancePreference() string {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessAttestationConveyancePreference) {
		var ret string
		return ret
	}
	return *o.WebAuthnPolicyPasswordlessAttestationConveyancePreference
}

// GetWebAuthnPolicyPasswordlessAttestationConveyancePreferenceOk returns a tuple with the WebAuthnPolicyPasswordlessAttestationConveyancePreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessAttestationConveyancePreferenceOk() (*string, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessAttestationConveyancePreference) {
		return nil, false
	}
	return o.WebAuthnPolicyPasswordlessAttestationConveyancePreference, true
}

// HasWebAuthnPolicyPasswordlessAttestationConveyancePreference returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyPasswordlessAttestationConveyancePreference() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyPasswordlessAttestationConveyancePreference) {
		return true
	}

	return false
}

// SetWebAuthnPolicyPasswordlessAttestationConveyancePreference gets a reference to the given string and assigns it to the WebAuthnPolicyPasswordlessAttestationConveyancePreference field.
func (o *RealmRepresentation) SetWebAuthnPolicyPasswordlessAttestationConveyancePreference(v string) {
	o.WebAuthnPolicyPasswordlessAttestationConveyancePreference = &v
}

// GetWebAuthnPolicyPasswordlessAuthenticatorAttachment returns the WebAuthnPolicyPasswordlessAuthenticatorAttachment field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessAuthenticatorAttachment() string {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessAuthenticatorAttachment) {
		var ret string
		return ret
	}
	return *o.WebAuthnPolicyPasswordlessAuthenticatorAttachment
}

// GetWebAuthnPolicyPasswordlessAuthenticatorAttachmentOk returns a tuple with the WebAuthnPolicyPasswordlessAuthenticatorAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessAuthenticatorAttachmentOk() (*string, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessAuthenticatorAttachment) {
		return nil, false
	}
	return o.WebAuthnPolicyPasswordlessAuthenticatorAttachment, true
}

// HasWebAuthnPolicyPasswordlessAuthenticatorAttachment returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyPasswordlessAuthenticatorAttachment() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyPasswordlessAuthenticatorAttachment) {
		return true
	}

	return false
}

// SetWebAuthnPolicyPasswordlessAuthenticatorAttachment gets a reference to the given string and assigns it to the WebAuthnPolicyPasswordlessAuthenticatorAttachment field.
func (o *RealmRepresentation) SetWebAuthnPolicyPasswordlessAuthenticatorAttachment(v string) {
	o.WebAuthnPolicyPasswordlessAuthenticatorAttachment = &v
}

// GetWebAuthnPolicyPasswordlessRequireResidentKey returns the WebAuthnPolicyPasswordlessRequireResidentKey field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessRequireResidentKey() string {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessRequireResidentKey) {
		var ret string
		return ret
	}
	return *o.WebAuthnPolicyPasswordlessRequireResidentKey
}

// GetWebAuthnPolicyPasswordlessRequireResidentKeyOk returns a tuple with the WebAuthnPolicyPasswordlessRequireResidentKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessRequireResidentKeyOk() (*string, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessRequireResidentKey) {
		return nil, false
	}
	return o.WebAuthnPolicyPasswordlessRequireResidentKey, true
}

// HasWebAuthnPolicyPasswordlessRequireResidentKey returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyPasswordlessRequireResidentKey() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyPasswordlessRequireResidentKey) {
		return true
	}

	return false
}

// SetWebAuthnPolicyPasswordlessRequireResidentKey gets a reference to the given string and assigns it to the WebAuthnPolicyPasswordlessRequireResidentKey field.
func (o *RealmRepresentation) SetWebAuthnPolicyPasswordlessRequireResidentKey(v string) {
	o.WebAuthnPolicyPasswordlessRequireResidentKey = &v
}

// GetWebAuthnPolicyPasswordlessUserVerificationRequirement returns the WebAuthnPolicyPasswordlessUserVerificationRequirement field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessUserVerificationRequirement() string {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessUserVerificationRequirement) {
		var ret string
		return ret
	}
	return *o.WebAuthnPolicyPasswordlessUserVerificationRequirement
}

// GetWebAuthnPolicyPasswordlessUserVerificationRequirementOk returns a tuple with the WebAuthnPolicyPasswordlessUserVerificationRequirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessUserVerificationRequirementOk() (*string, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessUserVerificationRequirement) {
		return nil, false
	}
	return o.WebAuthnPolicyPasswordlessUserVerificationRequirement, true
}

// HasWebAuthnPolicyPasswordlessUserVerificationRequirement returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyPasswordlessUserVerificationRequirement() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyPasswordlessUserVerificationRequirement) {
		return true
	}

	return false
}

// SetWebAuthnPolicyPasswordlessUserVerificationRequirement gets a reference to the given string and assigns it to the WebAuthnPolicyPasswordlessUserVerificationRequirement field.
func (o *RealmRepresentation) SetWebAuthnPolicyPasswordlessUserVerificationRequirement(v string) {
	o.WebAuthnPolicyPasswordlessUserVerificationRequirement = &v
}

// GetWebAuthnPolicyPasswordlessCreateTimeout returns the WebAuthnPolicyPasswordlessCreateTimeout field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessCreateTimeout() int32 {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessCreateTimeout) {
		var ret int32
		return ret
	}
	return *o.WebAuthnPolicyPasswordlessCreateTimeout
}

// GetWebAuthnPolicyPasswordlessCreateTimeoutOk returns a tuple with the WebAuthnPolicyPasswordlessCreateTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessCreateTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessCreateTimeout) {
		return nil, false
	}
	return o.WebAuthnPolicyPasswordlessCreateTimeout, true
}

// HasWebAuthnPolicyPasswordlessCreateTimeout returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyPasswordlessCreateTimeout() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyPasswordlessCreateTimeout) {
		return true
	}

	return false
}

// SetWebAuthnPolicyPasswordlessCreateTimeout gets a reference to the given int32 and assigns it to the WebAuthnPolicyPasswordlessCreateTimeout field.
func (o *RealmRepresentation) SetWebAuthnPolicyPasswordlessCreateTimeout(v int32) {
	o.WebAuthnPolicyPasswordlessCreateTimeout = &v
}

// GetWebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister returns the WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister() bool {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister) {
		var ret bool
		return ret
	}
	return *o.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister
}

// GetWebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegisterOk returns a tuple with the WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegisterOk() (*bool, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister) {
		return nil, false
	}
	return o.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister, true
}

// HasWebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister) {
		return true
	}

	return false
}

// SetWebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister gets a reference to the given bool and assigns it to the WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister field.
func (o *RealmRepresentation) SetWebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister(v bool) {
	o.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister = &v
}

// GetWebAuthnPolicyPasswordlessAcceptableAaguids returns the WebAuthnPolicyPasswordlessAcceptableAaguids field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessAcceptableAaguids() []string {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessAcceptableAaguids) {
		var ret []string
		return ret
	}
	return o.WebAuthnPolicyPasswordlessAcceptableAaguids
}

// GetWebAuthnPolicyPasswordlessAcceptableAaguidsOk returns a tuple with the WebAuthnPolicyPasswordlessAcceptableAaguids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessAcceptableAaguidsOk() ([]string, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessAcceptableAaguids) {
		return nil, false
	}
	return o.WebAuthnPolicyPasswordlessAcceptableAaguids, true
}

// HasWebAuthnPolicyPasswordlessAcceptableAaguids returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyPasswordlessAcceptableAaguids() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyPasswordlessAcceptableAaguids) {
		return true
	}

	return false
}

// SetWebAuthnPolicyPasswordlessAcceptableAaguids gets a reference to the given []string and assigns it to the WebAuthnPolicyPasswordlessAcceptableAaguids field.
func (o *RealmRepresentation) SetWebAuthnPolicyPasswordlessAcceptableAaguids(v []string) {
	o.WebAuthnPolicyPasswordlessAcceptableAaguids = v
}

// GetWebAuthnPolicyPasswordlessExtraOrigins returns the WebAuthnPolicyPasswordlessExtraOrigins field value if set, zero value otherwise.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessExtraOrigins() []string {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessExtraOrigins) {
		var ret []string
		return ret
	}
	return o.WebAuthnPolicyPasswordlessExtraOrigins
}

// GetWebAuthnPolicyPasswordlessExtraOriginsOk returns a tuple with the WebAuthnPolicyPasswordlessExtraOrigins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetWebAuthnPolicyPasswordlessExtraOriginsOk() ([]string, bool) {
	if o == nil || IsNil(o.WebAuthnPolicyPasswordlessExtraOrigins) {
		return nil, false
	}
	return o.WebAuthnPolicyPasswordlessExtraOrigins, true
}

// HasWebAuthnPolicyPasswordlessExtraOrigins returns a boolean if a field has been set.
func (o *RealmRepresentation) HasWebAuthnPolicyPasswordlessExtraOrigins() bool {
	if o != nil && !IsNil(o.WebAuthnPolicyPasswordlessExtraOrigins) {
		return true
	}

	return false
}

// SetWebAuthnPolicyPasswordlessExtraOrigins gets a reference to the given []string and assigns it to the WebAuthnPolicyPasswordlessExtraOrigins field.
func (o *RealmRepresentation) SetWebAuthnPolicyPasswordlessExtraOrigins(v []string) {
	o.WebAuthnPolicyPasswordlessExtraOrigins = v
}

// GetClientProfiles returns the ClientProfiles field value if set, zero value otherwise.
func (o *RealmRepresentation) GetClientProfiles() ClientProfilesRepresentation {
	if o == nil || IsNil(o.ClientProfiles) {
		var ret ClientProfilesRepresentation
		return ret
	}
	return *o.ClientProfiles
}

// GetClientProfilesOk returns a tuple with the ClientProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetClientProfilesOk() (*ClientProfilesRepresentation, bool) {
	if o == nil || IsNil(o.ClientProfiles) {
		return nil, false
	}
	return o.ClientProfiles, true
}

// HasClientProfiles returns a boolean if a field has been set.
func (o *RealmRepresentation) HasClientProfiles() bool {
	if o != nil && !IsNil(o.ClientProfiles) {
		return true
	}

	return false
}

// SetClientProfiles gets a reference to the given ClientProfilesRepresentation and assigns it to the ClientProfiles field.
func (o *RealmRepresentation) SetClientProfiles(v ClientProfilesRepresentation) {
	o.ClientProfiles = &v
}

// GetClientPolicies returns the ClientPolicies field value if set, zero value otherwise.
func (o *RealmRepresentation) GetClientPolicies() ClientPoliciesRepresentation {
	if o == nil || IsNil(o.ClientPolicies) {
		var ret ClientPoliciesRepresentation
		return ret
	}
	return *o.ClientPolicies
}

// GetClientPoliciesOk returns a tuple with the ClientPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetClientPoliciesOk() (*ClientPoliciesRepresentation, bool) {
	if o == nil || IsNil(o.ClientPolicies) {
		return nil, false
	}
	return o.ClientPolicies, true
}

// HasClientPolicies returns a boolean if a field has been set.
func (o *RealmRepresentation) HasClientPolicies() bool {
	if o != nil && !IsNil(o.ClientPolicies) {
		return true
	}

	return false
}

// SetClientPolicies gets a reference to the given ClientPoliciesRepresentation and assigns it to the ClientPolicies field.
func (o *RealmRepresentation) SetClientPolicies(v ClientPoliciesRepresentation) {
	o.ClientPolicies = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *RealmRepresentation) GetUsers() []UserRepresentation {
	if o == nil || IsNil(o.Users) {
		var ret []UserRepresentation
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetUsersOk() ([]UserRepresentation, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *RealmRepresentation) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []UserRepresentation and assigns it to the Users field.
func (o *RealmRepresentation) SetUsers(v []UserRepresentation) {
	o.Users = v
}

// GetFederatedUsers returns the FederatedUsers field value if set, zero value otherwise.
func (o *RealmRepresentation) GetFederatedUsers() []UserRepresentation {
	if o == nil || IsNil(o.FederatedUsers) {
		var ret []UserRepresentation
		return ret
	}
	return o.FederatedUsers
}

// GetFederatedUsersOk returns a tuple with the FederatedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetFederatedUsersOk() ([]UserRepresentation, bool) {
	if o == nil || IsNil(o.FederatedUsers) {
		return nil, false
	}
	return o.FederatedUsers, true
}

// HasFederatedUsers returns a boolean if a field has been set.
func (o *RealmRepresentation) HasFederatedUsers() bool {
	if o != nil && !IsNil(o.FederatedUsers) {
		return true
	}

	return false
}

// SetFederatedUsers gets a reference to the given []UserRepresentation and assigns it to the FederatedUsers field.
func (o *RealmRepresentation) SetFederatedUsers(v []UserRepresentation) {
	o.FederatedUsers = v
}

// GetScopeMappings returns the ScopeMappings field value if set, zero value otherwise.
func (o *RealmRepresentation) GetScopeMappings() []ScopeMappingRepresentation {
	if o == nil || IsNil(o.ScopeMappings) {
		var ret []ScopeMappingRepresentation
		return ret
	}
	return o.ScopeMappings
}

// GetScopeMappingsOk returns a tuple with the ScopeMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetScopeMappingsOk() ([]ScopeMappingRepresentation, bool) {
	if o == nil || IsNil(o.ScopeMappings) {
		return nil, false
	}
	return o.ScopeMappings, true
}

// HasScopeMappings returns a boolean if a field has been set.
func (o *RealmRepresentation) HasScopeMappings() bool {
	if o != nil && !IsNil(o.ScopeMappings) {
		return true
	}

	return false
}

// SetScopeMappings gets a reference to the given []ScopeMappingRepresentation and assigns it to the ScopeMappings field.
func (o *RealmRepresentation) SetScopeMappings(v []ScopeMappingRepresentation) {
	o.ScopeMappings = v
}

// GetClientScopeMappings returns the ClientScopeMappings field value if set, zero value otherwise.
func (o *RealmRepresentation) GetClientScopeMappings() map[string][]string {
	if o == nil || IsNil(o.ClientScopeMappings) {
		var ret map[string][]string
		return ret
	}
	return *o.ClientScopeMappings
}

// GetClientScopeMappingsOk returns a tuple with the ClientScopeMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetClientScopeMappingsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.ClientScopeMappings) {
		return nil, false
	}
	return o.ClientScopeMappings, true
}

// HasClientScopeMappings returns a boolean if a field has been set.
func (o *RealmRepresentation) HasClientScopeMappings() bool {
	if o != nil && !IsNil(o.ClientScopeMappings) {
		return true
	}

	return false
}

// SetClientScopeMappings gets a reference to the given map[string][]string and assigns it to the ClientScopeMappings field.
func (o *RealmRepresentation) SetClientScopeMappings(v map[string][]string) {
	o.ClientScopeMappings = &v
}

// GetClients returns the Clients field value if set, zero value otherwise.
func (o *RealmRepresentation) GetClients() []ClientRepresentation {
	if o == nil || IsNil(o.Clients) {
		var ret []ClientRepresentation
		return ret
	}
	return o.Clients
}

// GetClientsOk returns a tuple with the Clients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetClientsOk() ([]ClientRepresentation, bool) {
	if o == nil || IsNil(o.Clients) {
		return nil, false
	}
	return o.Clients, true
}

// HasClients returns a boolean if a field has been set.
func (o *RealmRepresentation) HasClients() bool {
	if o != nil && !IsNil(o.Clients) {
		return true
	}

	return false
}

// SetClients gets a reference to the given []ClientRepresentation and assigns it to the Clients field.
func (o *RealmRepresentation) SetClients(v []ClientRepresentation) {
	o.Clients = v
}

// GetClientScopes returns the ClientScopes field value if set, zero value otherwise.
func (o *RealmRepresentation) GetClientScopes() []ClientScopeRepresentation {
	if o == nil || IsNil(o.ClientScopes) {
		var ret []ClientScopeRepresentation
		return ret
	}
	return o.ClientScopes
}

// GetClientScopesOk returns a tuple with the ClientScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetClientScopesOk() ([]ClientScopeRepresentation, bool) {
	if o == nil || IsNil(o.ClientScopes) {
		return nil, false
	}
	return o.ClientScopes, true
}

// HasClientScopes returns a boolean if a field has been set.
func (o *RealmRepresentation) HasClientScopes() bool {
	if o != nil && !IsNil(o.ClientScopes) {
		return true
	}

	return false
}

// SetClientScopes gets a reference to the given []ClientScopeRepresentation and assigns it to the ClientScopes field.
func (o *RealmRepresentation) SetClientScopes(v []ClientScopeRepresentation) {
	o.ClientScopes = v
}

// GetDefaultDefaultClientScopes returns the DefaultDefaultClientScopes field value if set, zero value otherwise.
func (o *RealmRepresentation) GetDefaultDefaultClientScopes() []string {
	if o == nil || IsNil(o.DefaultDefaultClientScopes) {
		var ret []string
		return ret
	}
	return o.DefaultDefaultClientScopes
}

// GetDefaultDefaultClientScopesOk returns a tuple with the DefaultDefaultClientScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetDefaultDefaultClientScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.DefaultDefaultClientScopes) {
		return nil, false
	}
	return o.DefaultDefaultClientScopes, true
}

// HasDefaultDefaultClientScopes returns a boolean if a field has been set.
func (o *RealmRepresentation) HasDefaultDefaultClientScopes() bool {
	if o != nil && !IsNil(o.DefaultDefaultClientScopes) {
		return true
	}

	return false
}

// SetDefaultDefaultClientScopes gets a reference to the given []string and assigns it to the DefaultDefaultClientScopes field.
func (o *RealmRepresentation) SetDefaultDefaultClientScopes(v []string) {
	o.DefaultDefaultClientScopes = v
}

// GetDefaultOptionalClientScopes returns the DefaultOptionalClientScopes field value if set, zero value otherwise.
func (o *RealmRepresentation) GetDefaultOptionalClientScopes() []string {
	if o == nil || IsNil(o.DefaultOptionalClientScopes) {
		var ret []string
		return ret
	}
	return o.DefaultOptionalClientScopes
}

// GetDefaultOptionalClientScopesOk returns a tuple with the DefaultOptionalClientScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetDefaultOptionalClientScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.DefaultOptionalClientScopes) {
		return nil, false
	}
	return o.DefaultOptionalClientScopes, true
}

// HasDefaultOptionalClientScopes returns a boolean if a field has been set.
func (o *RealmRepresentation) HasDefaultOptionalClientScopes() bool {
	if o != nil && !IsNil(o.DefaultOptionalClientScopes) {
		return true
	}

	return false
}

// SetDefaultOptionalClientScopes gets a reference to the given []string and assigns it to the DefaultOptionalClientScopes field.
func (o *RealmRepresentation) SetDefaultOptionalClientScopes(v []string) {
	o.DefaultOptionalClientScopes = v
}

// GetBrowserSecurityHeaders returns the BrowserSecurityHeaders field value if set, zero value otherwise.
func (o *RealmRepresentation) GetBrowserSecurityHeaders() map[string]string {
	if o == nil || IsNil(o.BrowserSecurityHeaders) {
		var ret map[string]string
		return ret
	}
	return *o.BrowserSecurityHeaders
}

// GetBrowserSecurityHeadersOk returns a tuple with the BrowserSecurityHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetBrowserSecurityHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.BrowserSecurityHeaders) {
		return nil, false
	}
	return o.BrowserSecurityHeaders, true
}

// HasBrowserSecurityHeaders returns a boolean if a field has been set.
func (o *RealmRepresentation) HasBrowserSecurityHeaders() bool {
	if o != nil && !IsNil(o.BrowserSecurityHeaders) {
		return true
	}

	return false
}

// SetBrowserSecurityHeaders gets a reference to the given map[string]string and assigns it to the BrowserSecurityHeaders field.
func (o *RealmRepresentation) SetBrowserSecurityHeaders(v map[string]string) {
	o.BrowserSecurityHeaders = &v
}

// GetSmtpServer returns the SmtpServer field value if set, zero value otherwise.
func (o *RealmRepresentation) GetSmtpServer() map[string]string {
	if o == nil || IsNil(o.SmtpServer) {
		var ret map[string]string
		return ret
	}
	return *o.SmtpServer
}

// GetSmtpServerOk returns a tuple with the SmtpServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetSmtpServerOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.SmtpServer) {
		return nil, false
	}
	return o.SmtpServer, true
}

// HasSmtpServer returns a boolean if a field has been set.
func (o *RealmRepresentation) HasSmtpServer() bool {
	if o != nil && !IsNil(o.SmtpServer) {
		return true
	}

	return false
}

// SetSmtpServer gets a reference to the given map[string]string and assigns it to the SmtpServer field.
func (o *RealmRepresentation) SetSmtpServer(v map[string]string) {
	o.SmtpServer = &v
}

// GetUserFederationProviders returns the UserFederationProviders field value if set, zero value otherwise.
func (o *RealmRepresentation) GetUserFederationProviders() []UserFederationProviderRepresentation {
	if o == nil || IsNil(o.UserFederationProviders) {
		var ret []UserFederationProviderRepresentation
		return ret
	}
	return o.UserFederationProviders
}

// GetUserFederationProvidersOk returns a tuple with the UserFederationProviders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetUserFederationProvidersOk() ([]UserFederationProviderRepresentation, bool) {
	if o == nil || IsNil(o.UserFederationProviders) {
		return nil, false
	}
	return o.UserFederationProviders, true
}

// HasUserFederationProviders returns a boolean if a field has been set.
func (o *RealmRepresentation) HasUserFederationProviders() bool {
	if o != nil && !IsNil(o.UserFederationProviders) {
		return true
	}

	return false
}

// SetUserFederationProviders gets a reference to the given []UserFederationProviderRepresentation and assigns it to the UserFederationProviders field.
func (o *RealmRepresentation) SetUserFederationProviders(v []UserFederationProviderRepresentation) {
	o.UserFederationProviders = v
}

// GetUserFederationMappers returns the UserFederationMappers field value if set, zero value otherwise.
func (o *RealmRepresentation) GetUserFederationMappers() []UserFederationMapperRepresentation {
	if o == nil || IsNil(o.UserFederationMappers) {
		var ret []UserFederationMapperRepresentation
		return ret
	}
	return o.UserFederationMappers
}

// GetUserFederationMappersOk returns a tuple with the UserFederationMappers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetUserFederationMappersOk() ([]UserFederationMapperRepresentation, bool) {
	if o == nil || IsNil(o.UserFederationMappers) {
		return nil, false
	}
	return o.UserFederationMappers, true
}

// HasUserFederationMappers returns a boolean if a field has been set.
func (o *RealmRepresentation) HasUserFederationMappers() bool {
	if o != nil && !IsNil(o.UserFederationMappers) {
		return true
	}

	return false
}

// SetUserFederationMappers gets a reference to the given []UserFederationMapperRepresentation and assigns it to the UserFederationMappers field.
func (o *RealmRepresentation) SetUserFederationMappers(v []UserFederationMapperRepresentation) {
	o.UserFederationMappers = v
}

// GetLoginTheme returns the LoginTheme field value if set, zero value otherwise.
func (o *RealmRepresentation) GetLoginTheme() string {
	if o == nil || IsNil(o.LoginTheme) {
		var ret string
		return ret
	}
	return *o.LoginTheme
}

// GetLoginThemeOk returns a tuple with the LoginTheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetLoginThemeOk() (*string, bool) {
	if o == nil || IsNil(o.LoginTheme) {
		return nil, false
	}
	return o.LoginTheme, true
}

// HasLoginTheme returns a boolean if a field has been set.
func (o *RealmRepresentation) HasLoginTheme() bool {
	if o != nil && !IsNil(o.LoginTheme) {
		return true
	}

	return false
}

// SetLoginTheme gets a reference to the given string and assigns it to the LoginTheme field.
func (o *RealmRepresentation) SetLoginTheme(v string) {
	o.LoginTheme = &v
}

// GetAccountTheme returns the AccountTheme field value if set, zero value otherwise.
func (o *RealmRepresentation) GetAccountTheme() string {
	if o == nil || IsNil(o.AccountTheme) {
		var ret string
		return ret
	}
	return *o.AccountTheme
}

// GetAccountThemeOk returns a tuple with the AccountTheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetAccountThemeOk() (*string, bool) {
	if o == nil || IsNil(o.AccountTheme) {
		return nil, false
	}
	return o.AccountTheme, true
}

// HasAccountTheme returns a boolean if a field has been set.
func (o *RealmRepresentation) HasAccountTheme() bool {
	if o != nil && !IsNil(o.AccountTheme) {
		return true
	}

	return false
}

// SetAccountTheme gets a reference to the given string and assigns it to the AccountTheme field.
func (o *RealmRepresentation) SetAccountTheme(v string) {
	o.AccountTheme = &v
}

// GetAdminTheme returns the AdminTheme field value if set, zero value otherwise.
func (o *RealmRepresentation) GetAdminTheme() string {
	if o == nil || IsNil(o.AdminTheme) {
		var ret string
		return ret
	}
	return *o.AdminTheme
}

// GetAdminThemeOk returns a tuple with the AdminTheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetAdminThemeOk() (*string, bool) {
	if o == nil || IsNil(o.AdminTheme) {
		return nil, false
	}
	return o.AdminTheme, true
}

// HasAdminTheme returns a boolean if a field has been set.
func (o *RealmRepresentation) HasAdminTheme() bool {
	if o != nil && !IsNil(o.AdminTheme) {
		return true
	}

	return false
}

// SetAdminTheme gets a reference to the given string and assigns it to the AdminTheme field.
func (o *RealmRepresentation) SetAdminTheme(v string) {
	o.AdminTheme = &v
}

// GetEmailTheme returns the EmailTheme field value if set, zero value otherwise.
func (o *RealmRepresentation) GetEmailTheme() string {
	if o == nil || IsNil(o.EmailTheme) {
		var ret string
		return ret
	}
	return *o.EmailTheme
}

// GetEmailThemeOk returns a tuple with the EmailTheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetEmailThemeOk() (*string, bool) {
	if o == nil || IsNil(o.EmailTheme) {
		return nil, false
	}
	return o.EmailTheme, true
}

// HasEmailTheme returns a boolean if a field has been set.
func (o *RealmRepresentation) HasEmailTheme() bool {
	if o != nil && !IsNil(o.EmailTheme) {
		return true
	}

	return false
}

// SetEmailTheme gets a reference to the given string and assigns it to the EmailTheme field.
func (o *RealmRepresentation) SetEmailTheme(v string) {
	o.EmailTheme = &v
}

// GetEventsEnabled returns the EventsEnabled field value if set, zero value otherwise.
func (o *RealmRepresentation) GetEventsEnabled() bool {
	if o == nil || IsNil(o.EventsEnabled) {
		var ret bool
		return ret
	}
	return *o.EventsEnabled
}

// GetEventsEnabledOk returns a tuple with the EventsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetEventsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EventsEnabled) {
		return nil, false
	}
	return o.EventsEnabled, true
}

// HasEventsEnabled returns a boolean if a field has been set.
func (o *RealmRepresentation) HasEventsEnabled() bool {
	if o != nil && !IsNil(o.EventsEnabled) {
		return true
	}

	return false
}

// SetEventsEnabled gets a reference to the given bool and assigns it to the EventsEnabled field.
func (o *RealmRepresentation) SetEventsEnabled(v bool) {
	o.EventsEnabled = &v
}

// GetEventsExpiration returns the EventsExpiration field value if set, zero value otherwise.
func (o *RealmRepresentation) GetEventsExpiration() int64 {
	if o == nil || IsNil(o.EventsExpiration) {
		var ret int64
		return ret
	}
	return *o.EventsExpiration
}

// GetEventsExpirationOk returns a tuple with the EventsExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetEventsExpirationOk() (*int64, bool) {
	if o == nil || IsNil(o.EventsExpiration) {
		return nil, false
	}
	return o.EventsExpiration, true
}

// HasEventsExpiration returns a boolean if a field has been set.
func (o *RealmRepresentation) HasEventsExpiration() bool {
	if o != nil && !IsNil(o.EventsExpiration) {
		return true
	}

	return false
}

// SetEventsExpiration gets a reference to the given int64 and assigns it to the EventsExpiration field.
func (o *RealmRepresentation) SetEventsExpiration(v int64) {
	o.EventsExpiration = &v
}

// GetEventsListeners returns the EventsListeners field value if set, zero value otherwise.
func (o *RealmRepresentation) GetEventsListeners() []string {
	if o == nil || IsNil(o.EventsListeners) {
		var ret []string
		return ret
	}
	return o.EventsListeners
}

// GetEventsListenersOk returns a tuple with the EventsListeners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetEventsListenersOk() ([]string, bool) {
	if o == nil || IsNil(o.EventsListeners) {
		return nil, false
	}
	return o.EventsListeners, true
}

// HasEventsListeners returns a boolean if a field has been set.
func (o *RealmRepresentation) HasEventsListeners() bool {
	if o != nil && !IsNil(o.EventsListeners) {
		return true
	}

	return false
}

// SetEventsListeners gets a reference to the given []string and assigns it to the EventsListeners field.
func (o *RealmRepresentation) SetEventsListeners(v []string) {
	o.EventsListeners = v
}

// GetEnabledEventTypes returns the EnabledEventTypes field value if set, zero value otherwise.
func (o *RealmRepresentation) GetEnabledEventTypes() []string {
	if o == nil || IsNil(o.EnabledEventTypes) {
		var ret []string
		return ret
	}
	return o.EnabledEventTypes
}

// GetEnabledEventTypesOk returns a tuple with the EnabledEventTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetEnabledEventTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledEventTypes) {
		return nil, false
	}
	return o.EnabledEventTypes, true
}

// HasEnabledEventTypes returns a boolean if a field has been set.
func (o *RealmRepresentation) HasEnabledEventTypes() bool {
	if o != nil && !IsNil(o.EnabledEventTypes) {
		return true
	}

	return false
}

// SetEnabledEventTypes gets a reference to the given []string and assigns it to the EnabledEventTypes field.
func (o *RealmRepresentation) SetEnabledEventTypes(v []string) {
	o.EnabledEventTypes = v
}

// GetAdminEventsEnabled returns the AdminEventsEnabled field value if set, zero value otherwise.
func (o *RealmRepresentation) GetAdminEventsEnabled() bool {
	if o == nil || IsNil(o.AdminEventsEnabled) {
		var ret bool
		return ret
	}
	return *o.AdminEventsEnabled
}

// GetAdminEventsEnabledOk returns a tuple with the AdminEventsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetAdminEventsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AdminEventsEnabled) {
		return nil, false
	}
	return o.AdminEventsEnabled, true
}

// HasAdminEventsEnabled returns a boolean if a field has been set.
func (o *RealmRepresentation) HasAdminEventsEnabled() bool {
	if o != nil && !IsNil(o.AdminEventsEnabled) {
		return true
	}

	return false
}

// SetAdminEventsEnabled gets a reference to the given bool and assigns it to the AdminEventsEnabled field.
func (o *RealmRepresentation) SetAdminEventsEnabled(v bool) {
	o.AdminEventsEnabled = &v
}

// GetAdminEventsDetailsEnabled returns the AdminEventsDetailsEnabled field value if set, zero value otherwise.
func (o *RealmRepresentation) GetAdminEventsDetailsEnabled() bool {
	if o == nil || IsNil(o.AdminEventsDetailsEnabled) {
		var ret bool
		return ret
	}
	return *o.AdminEventsDetailsEnabled
}

// GetAdminEventsDetailsEnabledOk returns a tuple with the AdminEventsDetailsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetAdminEventsDetailsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AdminEventsDetailsEnabled) {
		return nil, false
	}
	return o.AdminEventsDetailsEnabled, true
}

// HasAdminEventsDetailsEnabled returns a boolean if a field has been set.
func (o *RealmRepresentation) HasAdminEventsDetailsEnabled() bool {
	if o != nil && !IsNil(o.AdminEventsDetailsEnabled) {
		return true
	}

	return false
}

// SetAdminEventsDetailsEnabled gets a reference to the given bool and assigns it to the AdminEventsDetailsEnabled field.
func (o *RealmRepresentation) SetAdminEventsDetailsEnabled(v bool) {
	o.AdminEventsDetailsEnabled = &v
}

// GetIdentityProviders returns the IdentityProviders field value if set, zero value otherwise.
func (o *RealmRepresentation) GetIdentityProviders() []IdentityProviderRepresentation {
	if o == nil || IsNil(o.IdentityProviders) {
		var ret []IdentityProviderRepresentation
		return ret
	}
	return o.IdentityProviders
}

// GetIdentityProvidersOk returns a tuple with the IdentityProviders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetIdentityProvidersOk() ([]IdentityProviderRepresentation, bool) {
	if o == nil || IsNil(o.IdentityProviders) {
		return nil, false
	}
	return o.IdentityProviders, true
}

// HasIdentityProviders returns a boolean if a field has been set.
func (o *RealmRepresentation) HasIdentityProviders() bool {
	if o != nil && !IsNil(o.IdentityProviders) {
		return true
	}

	return false
}

// SetIdentityProviders gets a reference to the given []IdentityProviderRepresentation and assigns it to the IdentityProviders field.
func (o *RealmRepresentation) SetIdentityProviders(v []IdentityProviderRepresentation) {
	o.IdentityProviders = v
}

// GetIdentityProviderMappers returns the IdentityProviderMappers field value if set, zero value otherwise.
func (o *RealmRepresentation) GetIdentityProviderMappers() []IdentityProviderMapperRepresentation {
	if o == nil || IsNil(o.IdentityProviderMappers) {
		var ret []IdentityProviderMapperRepresentation
		return ret
	}
	return o.IdentityProviderMappers
}

// GetIdentityProviderMappersOk returns a tuple with the IdentityProviderMappers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetIdentityProviderMappersOk() ([]IdentityProviderMapperRepresentation, bool) {
	if o == nil || IsNil(o.IdentityProviderMappers) {
		return nil, false
	}
	return o.IdentityProviderMappers, true
}

// HasIdentityProviderMappers returns a boolean if a field has been set.
func (o *RealmRepresentation) HasIdentityProviderMappers() bool {
	if o != nil && !IsNil(o.IdentityProviderMappers) {
		return true
	}

	return false
}

// SetIdentityProviderMappers gets a reference to the given []IdentityProviderMapperRepresentation and assigns it to the IdentityProviderMappers field.
func (o *RealmRepresentation) SetIdentityProviderMappers(v []IdentityProviderMapperRepresentation) {
	o.IdentityProviderMappers = v
}

// GetProtocolMappers returns the ProtocolMappers field value if set, zero value otherwise.
func (o *RealmRepresentation) GetProtocolMappers() []ProtocolMapperRepresentation {
	if o == nil || IsNil(o.ProtocolMappers) {
		var ret []ProtocolMapperRepresentation
		return ret
	}
	return o.ProtocolMappers
}

// GetProtocolMappersOk returns a tuple with the ProtocolMappers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetProtocolMappersOk() ([]ProtocolMapperRepresentation, bool) {
	if o == nil || IsNil(o.ProtocolMappers) {
		return nil, false
	}
	return o.ProtocolMappers, true
}

// HasProtocolMappers returns a boolean if a field has been set.
func (o *RealmRepresentation) HasProtocolMappers() bool {
	if o != nil && !IsNil(o.ProtocolMappers) {
		return true
	}

	return false
}

// SetProtocolMappers gets a reference to the given []ProtocolMapperRepresentation and assigns it to the ProtocolMappers field.
func (o *RealmRepresentation) SetProtocolMappers(v []ProtocolMapperRepresentation) {
	o.ProtocolMappers = v
}

// GetComponents returns the Components field value if set, zero value otherwise.
func (o *RealmRepresentation) GetComponents() map[string][]string {
	if o == nil || IsNil(o.Components) {
		var ret map[string][]string
		return ret
	}
	return *o.Components
}

// GetComponentsOk returns a tuple with the Components field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetComponentsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Components) {
		return nil, false
	}
	return o.Components, true
}

// HasComponents returns a boolean if a field has been set.
func (o *RealmRepresentation) HasComponents() bool {
	if o != nil && !IsNil(o.Components) {
		return true
	}

	return false
}

// SetComponents gets a reference to the given map[string][]string and assigns it to the Components field.
func (o *RealmRepresentation) SetComponents(v map[string][]string) {
	o.Components = &v
}

// GetInternationalizationEnabled returns the InternationalizationEnabled field value if set, zero value otherwise.
func (o *RealmRepresentation) GetInternationalizationEnabled() bool {
	if o == nil || IsNil(o.InternationalizationEnabled) {
		var ret bool
		return ret
	}
	return *o.InternationalizationEnabled
}

// GetInternationalizationEnabledOk returns a tuple with the InternationalizationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetInternationalizationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.InternationalizationEnabled) {
		return nil, false
	}
	return o.InternationalizationEnabled, true
}

// HasInternationalizationEnabled returns a boolean if a field has been set.
func (o *RealmRepresentation) HasInternationalizationEnabled() bool {
	if o != nil && !IsNil(o.InternationalizationEnabled) {
		return true
	}

	return false
}

// SetInternationalizationEnabled gets a reference to the given bool and assigns it to the InternationalizationEnabled field.
func (o *RealmRepresentation) SetInternationalizationEnabled(v bool) {
	o.InternationalizationEnabled = &v
}

// GetSupportedLocales returns the SupportedLocales field value if set, zero value otherwise.
func (o *RealmRepresentation) GetSupportedLocales() []string {
	if o == nil || IsNil(o.SupportedLocales) {
		var ret []string
		return ret
	}
	return o.SupportedLocales
}

// GetSupportedLocalesOk returns a tuple with the SupportedLocales field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetSupportedLocalesOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedLocales) {
		return nil, false
	}
	return o.SupportedLocales, true
}

// HasSupportedLocales returns a boolean if a field has been set.
func (o *RealmRepresentation) HasSupportedLocales() bool {
	if o != nil && !IsNil(o.SupportedLocales) {
		return true
	}

	return false
}

// SetSupportedLocales gets a reference to the given []string and assigns it to the SupportedLocales field.
func (o *RealmRepresentation) SetSupportedLocales(v []string) {
	o.SupportedLocales = v
}

// GetDefaultLocale returns the DefaultLocale field value if set, zero value otherwise.
func (o *RealmRepresentation) GetDefaultLocale() string {
	if o == nil || IsNil(o.DefaultLocale) {
		var ret string
		return ret
	}
	return *o.DefaultLocale
}

// GetDefaultLocaleOk returns a tuple with the DefaultLocale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetDefaultLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultLocale) {
		return nil, false
	}
	return o.DefaultLocale, true
}

// HasDefaultLocale returns a boolean if a field has been set.
func (o *RealmRepresentation) HasDefaultLocale() bool {
	if o != nil && !IsNil(o.DefaultLocale) {
		return true
	}

	return false
}

// SetDefaultLocale gets a reference to the given string and assigns it to the DefaultLocale field.
func (o *RealmRepresentation) SetDefaultLocale(v string) {
	o.DefaultLocale = &v
}

// GetAuthenticationFlows returns the AuthenticationFlows field value if set, zero value otherwise.
func (o *RealmRepresentation) GetAuthenticationFlows() []AuthenticationFlowRepresentation {
	if o == nil || IsNil(o.AuthenticationFlows) {
		var ret []AuthenticationFlowRepresentation
		return ret
	}
	return o.AuthenticationFlows
}

// GetAuthenticationFlowsOk returns a tuple with the AuthenticationFlows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetAuthenticationFlowsOk() ([]AuthenticationFlowRepresentation, bool) {
	if o == nil || IsNil(o.AuthenticationFlows) {
		return nil, false
	}
	return o.AuthenticationFlows, true
}

// HasAuthenticationFlows returns a boolean if a field has been set.
func (o *RealmRepresentation) HasAuthenticationFlows() bool {
	if o != nil && !IsNil(o.AuthenticationFlows) {
		return true
	}

	return false
}

// SetAuthenticationFlows gets a reference to the given []AuthenticationFlowRepresentation and assigns it to the AuthenticationFlows field.
func (o *RealmRepresentation) SetAuthenticationFlows(v []AuthenticationFlowRepresentation) {
	o.AuthenticationFlows = v
}

// GetAuthenticatorConfig returns the AuthenticatorConfig field value if set, zero value otherwise.
func (o *RealmRepresentation) GetAuthenticatorConfig() []AuthenticatorConfigRepresentation {
	if o == nil || IsNil(o.AuthenticatorConfig) {
		var ret []AuthenticatorConfigRepresentation
		return ret
	}
	return o.AuthenticatorConfig
}

// GetAuthenticatorConfigOk returns a tuple with the AuthenticatorConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetAuthenticatorConfigOk() ([]AuthenticatorConfigRepresentation, bool) {
	if o == nil || IsNil(o.AuthenticatorConfig) {
		return nil, false
	}
	return o.AuthenticatorConfig, true
}

// HasAuthenticatorConfig returns a boolean if a field has been set.
func (o *RealmRepresentation) HasAuthenticatorConfig() bool {
	if o != nil && !IsNil(o.AuthenticatorConfig) {
		return true
	}

	return false
}

// SetAuthenticatorConfig gets a reference to the given []AuthenticatorConfigRepresentation and assigns it to the AuthenticatorConfig field.
func (o *RealmRepresentation) SetAuthenticatorConfig(v []AuthenticatorConfigRepresentation) {
	o.AuthenticatorConfig = v
}

// GetRequiredActions returns the RequiredActions field value if set, zero value otherwise.
func (o *RealmRepresentation) GetRequiredActions() []RequiredActionProviderRepresentation {
	if o == nil || IsNil(o.RequiredActions) {
		var ret []RequiredActionProviderRepresentation
		return ret
	}
	return o.RequiredActions
}

// GetRequiredActionsOk returns a tuple with the RequiredActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetRequiredActionsOk() ([]RequiredActionProviderRepresentation, bool) {
	if o == nil || IsNil(o.RequiredActions) {
		return nil, false
	}
	return o.RequiredActions, true
}

// HasRequiredActions returns a boolean if a field has been set.
func (o *RealmRepresentation) HasRequiredActions() bool {
	if o != nil && !IsNil(o.RequiredActions) {
		return true
	}

	return false
}

// SetRequiredActions gets a reference to the given []RequiredActionProviderRepresentation and assigns it to the RequiredActions field.
func (o *RealmRepresentation) SetRequiredActions(v []RequiredActionProviderRepresentation) {
	o.RequiredActions = v
}

// GetBrowserFlow returns the BrowserFlow field value if set, zero value otherwise.
func (o *RealmRepresentation) GetBrowserFlow() string {
	if o == nil || IsNil(o.BrowserFlow) {
		var ret string
		return ret
	}
	return *o.BrowserFlow
}

// GetBrowserFlowOk returns a tuple with the BrowserFlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetBrowserFlowOk() (*string, bool) {
	if o == nil || IsNil(o.BrowserFlow) {
		return nil, false
	}
	return o.BrowserFlow, true
}

// HasBrowserFlow returns a boolean if a field has been set.
func (o *RealmRepresentation) HasBrowserFlow() bool {
	if o != nil && !IsNil(o.BrowserFlow) {
		return true
	}

	return false
}

// SetBrowserFlow gets a reference to the given string and assigns it to the BrowserFlow field.
func (o *RealmRepresentation) SetBrowserFlow(v string) {
	o.BrowserFlow = &v
}

// GetRegistrationFlow returns the RegistrationFlow field value if set, zero value otherwise.
func (o *RealmRepresentation) GetRegistrationFlow() string {
	if o == nil || IsNil(o.RegistrationFlow) {
		var ret string
		return ret
	}
	return *o.RegistrationFlow
}

// GetRegistrationFlowOk returns a tuple with the RegistrationFlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetRegistrationFlowOk() (*string, bool) {
	if o == nil || IsNil(o.RegistrationFlow) {
		return nil, false
	}
	return o.RegistrationFlow, true
}

// HasRegistrationFlow returns a boolean if a field has been set.
func (o *RealmRepresentation) HasRegistrationFlow() bool {
	if o != nil && !IsNil(o.RegistrationFlow) {
		return true
	}

	return false
}

// SetRegistrationFlow gets a reference to the given string and assigns it to the RegistrationFlow field.
func (o *RealmRepresentation) SetRegistrationFlow(v string) {
	o.RegistrationFlow = &v
}

// GetDirectGrantFlow returns the DirectGrantFlow field value if set, zero value otherwise.
func (o *RealmRepresentation) GetDirectGrantFlow() string {
	if o == nil || IsNil(o.DirectGrantFlow) {
		var ret string
		return ret
	}
	return *o.DirectGrantFlow
}

// GetDirectGrantFlowOk returns a tuple with the DirectGrantFlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetDirectGrantFlowOk() (*string, bool) {
	if o == nil || IsNil(o.DirectGrantFlow) {
		return nil, false
	}
	return o.DirectGrantFlow, true
}

// HasDirectGrantFlow returns a boolean if a field has been set.
func (o *RealmRepresentation) HasDirectGrantFlow() bool {
	if o != nil && !IsNil(o.DirectGrantFlow) {
		return true
	}

	return false
}

// SetDirectGrantFlow gets a reference to the given string and assigns it to the DirectGrantFlow field.
func (o *RealmRepresentation) SetDirectGrantFlow(v string) {
	o.DirectGrantFlow = &v
}

// GetResetCredentialsFlow returns the ResetCredentialsFlow field value if set, zero value otherwise.
func (o *RealmRepresentation) GetResetCredentialsFlow() string {
	if o == nil || IsNil(o.ResetCredentialsFlow) {
		var ret string
		return ret
	}
	return *o.ResetCredentialsFlow
}

// GetResetCredentialsFlowOk returns a tuple with the ResetCredentialsFlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetResetCredentialsFlowOk() (*string, bool) {
	if o == nil || IsNil(o.ResetCredentialsFlow) {
		return nil, false
	}
	return o.ResetCredentialsFlow, true
}

// HasResetCredentialsFlow returns a boolean if a field has been set.
func (o *RealmRepresentation) HasResetCredentialsFlow() bool {
	if o != nil && !IsNil(o.ResetCredentialsFlow) {
		return true
	}

	return false
}

// SetResetCredentialsFlow gets a reference to the given string and assigns it to the ResetCredentialsFlow field.
func (o *RealmRepresentation) SetResetCredentialsFlow(v string) {
	o.ResetCredentialsFlow = &v
}

// GetClientAuthenticationFlow returns the ClientAuthenticationFlow field value if set, zero value otherwise.
func (o *RealmRepresentation) GetClientAuthenticationFlow() string {
	if o == nil || IsNil(o.ClientAuthenticationFlow) {
		var ret string
		return ret
	}
	return *o.ClientAuthenticationFlow
}

// GetClientAuthenticationFlowOk returns a tuple with the ClientAuthenticationFlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetClientAuthenticationFlowOk() (*string, bool) {
	if o == nil || IsNil(o.ClientAuthenticationFlow) {
		return nil, false
	}
	return o.ClientAuthenticationFlow, true
}

// HasClientAuthenticationFlow returns a boolean if a field has been set.
func (o *RealmRepresentation) HasClientAuthenticationFlow() bool {
	if o != nil && !IsNil(o.ClientAuthenticationFlow) {
		return true
	}

	return false
}

// SetClientAuthenticationFlow gets a reference to the given string and assigns it to the ClientAuthenticationFlow field.
func (o *RealmRepresentation) SetClientAuthenticationFlow(v string) {
	o.ClientAuthenticationFlow = &v
}

// GetDockerAuthenticationFlow returns the DockerAuthenticationFlow field value if set, zero value otherwise.
func (o *RealmRepresentation) GetDockerAuthenticationFlow() string {
	if o == nil || IsNil(o.DockerAuthenticationFlow) {
		var ret string
		return ret
	}
	return *o.DockerAuthenticationFlow
}

// GetDockerAuthenticationFlowOk returns a tuple with the DockerAuthenticationFlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetDockerAuthenticationFlowOk() (*string, bool) {
	if o == nil || IsNil(o.DockerAuthenticationFlow) {
		return nil, false
	}
	return o.DockerAuthenticationFlow, true
}

// HasDockerAuthenticationFlow returns a boolean if a field has been set.
func (o *RealmRepresentation) HasDockerAuthenticationFlow() bool {
	if o != nil && !IsNil(o.DockerAuthenticationFlow) {
		return true
	}

	return false
}

// SetDockerAuthenticationFlow gets a reference to the given string and assigns it to the DockerAuthenticationFlow field.
func (o *RealmRepresentation) SetDockerAuthenticationFlow(v string) {
	o.DockerAuthenticationFlow = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *RealmRepresentation) GetAttributes() map[string]string {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]string
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetAttributesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *RealmRepresentation) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]string and assigns it to the Attributes field.
func (o *RealmRepresentation) SetAttributes(v map[string]string) {
	o.Attributes = &v
}

// GetKeycloakVersion returns the KeycloakVersion field value if set, zero value otherwise.
func (o *RealmRepresentation) GetKeycloakVersion() string {
	if o == nil || IsNil(o.KeycloakVersion) {
		var ret string
		return ret
	}
	return *o.KeycloakVersion
}

// GetKeycloakVersionOk returns a tuple with the KeycloakVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetKeycloakVersionOk() (*string, bool) {
	if o == nil || IsNil(o.KeycloakVersion) {
		return nil, false
	}
	return o.KeycloakVersion, true
}

// HasKeycloakVersion returns a boolean if a field has been set.
func (o *RealmRepresentation) HasKeycloakVersion() bool {
	if o != nil && !IsNil(o.KeycloakVersion) {
		return true
	}

	return false
}

// SetKeycloakVersion gets a reference to the given string and assigns it to the KeycloakVersion field.
func (o *RealmRepresentation) SetKeycloakVersion(v string) {
	o.KeycloakVersion = &v
}

// GetUserManagedAccessAllowed returns the UserManagedAccessAllowed field value if set, zero value otherwise.
func (o *RealmRepresentation) GetUserManagedAccessAllowed() bool {
	if o == nil || IsNil(o.UserManagedAccessAllowed) {
		var ret bool
		return ret
	}
	return *o.UserManagedAccessAllowed
}

// GetUserManagedAccessAllowedOk returns a tuple with the UserManagedAccessAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetUserManagedAccessAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.UserManagedAccessAllowed) {
		return nil, false
	}
	return o.UserManagedAccessAllowed, true
}

// HasUserManagedAccessAllowed returns a boolean if a field has been set.
func (o *RealmRepresentation) HasUserManagedAccessAllowed() bool {
	if o != nil && !IsNil(o.UserManagedAccessAllowed) {
		return true
	}

	return false
}

// SetUserManagedAccessAllowed gets a reference to the given bool and assigns it to the UserManagedAccessAllowed field.
func (o *RealmRepresentation) SetUserManagedAccessAllowed(v bool) {
	o.UserManagedAccessAllowed = &v
}

// GetSocial returns the Social field value if set, zero value otherwise.
func (o *RealmRepresentation) GetSocial() bool {
	if o == nil || IsNil(o.Social) {
		var ret bool
		return ret
	}
	return *o.Social
}

// GetSocialOk returns a tuple with the Social field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetSocialOk() (*bool, bool) {
	if o == nil || IsNil(o.Social) {
		return nil, false
	}
	return o.Social, true
}

// HasSocial returns a boolean if a field has been set.
func (o *RealmRepresentation) HasSocial() bool {
	if o != nil && !IsNil(o.Social) {
		return true
	}

	return false
}

// SetSocial gets a reference to the given bool and assigns it to the Social field.
func (o *RealmRepresentation) SetSocial(v bool) {
	o.Social = &v
}

// GetUpdateProfileOnInitialSocialLogin returns the UpdateProfileOnInitialSocialLogin field value if set, zero value otherwise.
func (o *RealmRepresentation) GetUpdateProfileOnInitialSocialLogin() bool {
	if o == nil || IsNil(o.UpdateProfileOnInitialSocialLogin) {
		var ret bool
		return ret
	}
	return *o.UpdateProfileOnInitialSocialLogin
}

// GetUpdateProfileOnInitialSocialLoginOk returns a tuple with the UpdateProfileOnInitialSocialLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetUpdateProfileOnInitialSocialLoginOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateProfileOnInitialSocialLogin) {
		return nil, false
	}
	return o.UpdateProfileOnInitialSocialLogin, true
}

// HasUpdateProfileOnInitialSocialLogin returns a boolean if a field has been set.
func (o *RealmRepresentation) HasUpdateProfileOnInitialSocialLogin() bool {
	if o != nil && !IsNil(o.UpdateProfileOnInitialSocialLogin) {
		return true
	}

	return false
}

// SetUpdateProfileOnInitialSocialLogin gets a reference to the given bool and assigns it to the UpdateProfileOnInitialSocialLogin field.
func (o *RealmRepresentation) SetUpdateProfileOnInitialSocialLogin(v bool) {
	o.UpdateProfileOnInitialSocialLogin = &v
}

// GetSocialProviders returns the SocialProviders field value if set, zero value otherwise.
func (o *RealmRepresentation) GetSocialProviders() map[string]string {
	if o == nil || IsNil(o.SocialProviders) {
		var ret map[string]string
		return ret
	}
	return *o.SocialProviders
}

// GetSocialProvidersOk returns a tuple with the SocialProviders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetSocialProvidersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.SocialProviders) {
		return nil, false
	}
	return o.SocialProviders, true
}

// HasSocialProviders returns a boolean if a field has been set.
func (o *RealmRepresentation) HasSocialProviders() bool {
	if o != nil && !IsNil(o.SocialProviders) {
		return true
	}

	return false
}

// SetSocialProviders gets a reference to the given map[string]string and assigns it to the SocialProviders field.
func (o *RealmRepresentation) SetSocialProviders(v map[string]string) {
	o.SocialProviders = &v
}

// GetApplicationScopeMappings returns the ApplicationScopeMappings field value if set, zero value otherwise.
func (o *RealmRepresentation) GetApplicationScopeMappings() map[string][]string {
	if o == nil || IsNil(o.ApplicationScopeMappings) {
		var ret map[string][]string
		return ret
	}
	return *o.ApplicationScopeMappings
}

// GetApplicationScopeMappingsOk returns a tuple with the ApplicationScopeMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetApplicationScopeMappingsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.ApplicationScopeMappings) {
		return nil, false
	}
	return o.ApplicationScopeMappings, true
}

// HasApplicationScopeMappings returns a boolean if a field has been set.
func (o *RealmRepresentation) HasApplicationScopeMappings() bool {
	if o != nil && !IsNil(o.ApplicationScopeMappings) {
		return true
	}

	return false
}

// SetApplicationScopeMappings gets a reference to the given map[string][]string and assigns it to the ApplicationScopeMappings field.
func (o *RealmRepresentation) SetApplicationScopeMappings(v map[string][]string) {
	o.ApplicationScopeMappings = &v
}

// GetApplications returns the Applications field value if set, zero value otherwise.
func (o *RealmRepresentation) GetApplications() []ApplicationRepresentation {
	if o == nil || IsNil(o.Applications) {
		var ret []ApplicationRepresentation
		return ret
	}
	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetApplicationsOk() ([]ApplicationRepresentation, bool) {
	if o == nil || IsNil(o.Applications) {
		return nil, false
	}
	return o.Applications, true
}

// HasApplications returns a boolean if a field has been set.
func (o *RealmRepresentation) HasApplications() bool {
	if o != nil && !IsNil(o.Applications) {
		return true
	}

	return false
}

// SetApplications gets a reference to the given []ApplicationRepresentation and assigns it to the Applications field.
func (o *RealmRepresentation) SetApplications(v []ApplicationRepresentation) {
	o.Applications = v
}

// GetOauthClients returns the OauthClients field value if set, zero value otherwise.
func (o *RealmRepresentation) GetOauthClients() []OAuthClientRepresentation {
	if o == nil || IsNil(o.OauthClients) {
		var ret []OAuthClientRepresentation
		return ret
	}
	return o.OauthClients
}

// GetOauthClientsOk returns a tuple with the OauthClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetOauthClientsOk() ([]OAuthClientRepresentation, bool) {
	if o == nil || IsNil(o.OauthClients) {
		return nil, false
	}
	return o.OauthClients, true
}

// HasOauthClients returns a boolean if a field has been set.
func (o *RealmRepresentation) HasOauthClients() bool {
	if o != nil && !IsNil(o.OauthClients) {
		return true
	}

	return false
}

// SetOauthClients gets a reference to the given []OAuthClientRepresentation and assigns it to the OauthClients field.
func (o *RealmRepresentation) SetOauthClients(v []OAuthClientRepresentation) {
	o.OauthClients = v
}

// GetClientTemplates returns the ClientTemplates field value if set, zero value otherwise.
func (o *RealmRepresentation) GetClientTemplates() []ClientTemplateRepresentation {
	if o == nil || IsNil(o.ClientTemplates) {
		var ret []ClientTemplateRepresentation
		return ret
	}
	return o.ClientTemplates
}

// GetClientTemplatesOk returns a tuple with the ClientTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetClientTemplatesOk() ([]ClientTemplateRepresentation, bool) {
	if o == nil || IsNil(o.ClientTemplates) {
		return nil, false
	}
	return o.ClientTemplates, true
}

// HasClientTemplates returns a boolean if a field has been set.
func (o *RealmRepresentation) HasClientTemplates() bool {
	if o != nil && !IsNil(o.ClientTemplates) {
		return true
	}

	return false
}

// SetClientTemplates gets a reference to the given []ClientTemplateRepresentation and assigns it to the ClientTemplates field.
func (o *RealmRepresentation) SetClientTemplates(v []ClientTemplateRepresentation) {
	o.ClientTemplates = v
}

// GetOAuth2DeviceCodeLifespan returns the OAuth2DeviceCodeLifespan field value if set, zero value otherwise.
func (o *RealmRepresentation) GetOAuth2DeviceCodeLifespan() int32 {
	if o == nil || IsNil(o.OAuth2DeviceCodeLifespan) {
		var ret int32
		return ret
	}
	return *o.OAuth2DeviceCodeLifespan
}

// GetOAuth2DeviceCodeLifespanOk returns a tuple with the OAuth2DeviceCodeLifespan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetOAuth2DeviceCodeLifespanOk() (*int32, bool) {
	if o == nil || IsNil(o.OAuth2DeviceCodeLifespan) {
		return nil, false
	}
	return o.OAuth2DeviceCodeLifespan, true
}

// HasOAuth2DeviceCodeLifespan returns a boolean if a field has been set.
func (o *RealmRepresentation) HasOAuth2DeviceCodeLifespan() bool {
	if o != nil && !IsNil(o.OAuth2DeviceCodeLifespan) {
		return true
	}

	return false
}

// SetOAuth2DeviceCodeLifespan gets a reference to the given int32 and assigns it to the OAuth2DeviceCodeLifespan field.
func (o *RealmRepresentation) SetOAuth2DeviceCodeLifespan(v int32) {
	o.OAuth2DeviceCodeLifespan = &v
}

// GetOAuth2DevicePollingInterval returns the OAuth2DevicePollingInterval field value if set, zero value otherwise.
func (o *RealmRepresentation) GetOAuth2DevicePollingInterval() int32 {
	if o == nil || IsNil(o.OAuth2DevicePollingInterval) {
		var ret int32
		return ret
	}
	return *o.OAuth2DevicePollingInterval
}

// GetOAuth2DevicePollingIntervalOk returns a tuple with the OAuth2DevicePollingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmRepresentation) GetOAuth2DevicePollingIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.OAuth2DevicePollingInterval) {
		return nil, false
	}
	return o.OAuth2DevicePollingInterval, true
}

// HasOAuth2DevicePollingInterval returns a boolean if a field has been set.
func (o *RealmRepresentation) HasOAuth2DevicePollingInterval() bool {
	if o != nil && !IsNil(o.OAuth2DevicePollingInterval) {
		return true
	}

	return false
}

// SetOAuth2DevicePollingInterval gets a reference to the given int32 and assigns it to the OAuth2DevicePollingInterval field.
func (o *RealmRepresentation) SetOAuth2DevicePollingInterval(v int32) {
	o.OAuth2DevicePollingInterval = &v
}

func (o RealmRepresentation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealmRepresentation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Realm) {
		toSerialize["realm"] = o.Realm
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DisplayNameHtml) {
		toSerialize["displayNameHtml"] = o.DisplayNameHtml
	}
	if !IsNil(o.NotBefore) {
		toSerialize["notBefore"] = o.NotBefore
	}
	if !IsNil(o.DefaultSignatureAlgorithm) {
		toSerialize["defaultSignatureAlgorithm"] = o.DefaultSignatureAlgorithm
	}
	if !IsNil(o.RevokeRefreshToken) {
		toSerialize["revokeRefreshToken"] = o.RevokeRefreshToken
	}
	if !IsNil(o.RefreshTokenMaxReuse) {
		toSerialize["refreshTokenMaxReuse"] = o.RefreshTokenMaxReuse
	}
	if !IsNil(o.AccessTokenLifespan) {
		toSerialize["accessTokenLifespan"] = o.AccessTokenLifespan
	}
	if !IsNil(o.AccessTokenLifespanForImplicitFlow) {
		toSerialize["accessTokenLifespanForImplicitFlow"] = o.AccessTokenLifespanForImplicitFlow
	}
	if !IsNil(o.SsoSessionIdleTimeout) {
		toSerialize["ssoSessionIdleTimeout"] = o.SsoSessionIdleTimeout
	}
	if !IsNil(o.SsoSessionMaxLifespan) {
		toSerialize["ssoSessionMaxLifespan"] = o.SsoSessionMaxLifespan
	}
	if !IsNil(o.SsoSessionIdleTimeoutRememberMe) {
		toSerialize["ssoSessionIdleTimeoutRememberMe"] = o.SsoSessionIdleTimeoutRememberMe
	}
	if !IsNil(o.SsoSessionMaxLifespanRememberMe) {
		toSerialize["ssoSessionMaxLifespanRememberMe"] = o.SsoSessionMaxLifespanRememberMe
	}
	if !IsNil(o.OfflineSessionIdleTimeout) {
		toSerialize["offlineSessionIdleTimeout"] = o.OfflineSessionIdleTimeout
	}
	if !IsNil(o.OfflineSessionMaxLifespanEnabled) {
		toSerialize["offlineSessionMaxLifespanEnabled"] = o.OfflineSessionMaxLifespanEnabled
	}
	if !IsNil(o.OfflineSessionMaxLifespan) {
		toSerialize["offlineSessionMaxLifespan"] = o.OfflineSessionMaxLifespan
	}
	if !IsNil(o.ClientSessionIdleTimeout) {
		toSerialize["clientSessionIdleTimeout"] = o.ClientSessionIdleTimeout
	}
	if !IsNil(o.ClientSessionMaxLifespan) {
		toSerialize["clientSessionMaxLifespan"] = o.ClientSessionMaxLifespan
	}
	if !IsNil(o.ClientOfflineSessionIdleTimeout) {
		toSerialize["clientOfflineSessionIdleTimeout"] = o.ClientOfflineSessionIdleTimeout
	}
	if !IsNil(o.ClientOfflineSessionMaxLifespan) {
		toSerialize["clientOfflineSessionMaxLifespan"] = o.ClientOfflineSessionMaxLifespan
	}
	if !IsNil(o.AccessCodeLifespan) {
		toSerialize["accessCodeLifespan"] = o.AccessCodeLifespan
	}
	if !IsNil(o.AccessCodeLifespanUserAction) {
		toSerialize["accessCodeLifespanUserAction"] = o.AccessCodeLifespanUserAction
	}
	if !IsNil(o.AccessCodeLifespanLogin) {
		toSerialize["accessCodeLifespanLogin"] = o.AccessCodeLifespanLogin
	}
	if !IsNil(o.ActionTokenGeneratedByAdminLifespan) {
		toSerialize["actionTokenGeneratedByAdminLifespan"] = o.ActionTokenGeneratedByAdminLifespan
	}
	if !IsNil(o.ActionTokenGeneratedByUserLifespan) {
		toSerialize["actionTokenGeneratedByUserLifespan"] = o.ActionTokenGeneratedByUserLifespan
	}
	if !IsNil(o.Oauth2DeviceCodeLifespan) {
		toSerialize["oauth2DeviceCodeLifespan"] = o.Oauth2DeviceCodeLifespan
	}
	if !IsNil(o.Oauth2DevicePollingInterval) {
		toSerialize["oauth2DevicePollingInterval"] = o.Oauth2DevicePollingInterval
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.SslRequired) {
		toSerialize["sslRequired"] = o.SslRequired
	}
	if !IsNil(o.PasswordCredentialGrantAllowed) {
		toSerialize["passwordCredentialGrantAllowed"] = o.PasswordCredentialGrantAllowed
	}
	if !IsNil(o.RegistrationAllowed) {
		toSerialize["registrationAllowed"] = o.RegistrationAllowed
	}
	if !IsNil(o.RegistrationEmailAsUsername) {
		toSerialize["registrationEmailAsUsername"] = o.RegistrationEmailAsUsername
	}
	if !IsNil(o.RememberMe) {
		toSerialize["rememberMe"] = o.RememberMe
	}
	if !IsNil(o.VerifyEmail) {
		toSerialize["verifyEmail"] = o.VerifyEmail
	}
	if !IsNil(o.LoginWithEmailAllowed) {
		toSerialize["loginWithEmailAllowed"] = o.LoginWithEmailAllowed
	}
	if !IsNil(o.DuplicateEmailsAllowed) {
		toSerialize["duplicateEmailsAllowed"] = o.DuplicateEmailsAllowed
	}
	if !IsNil(o.ResetPasswordAllowed) {
		toSerialize["resetPasswordAllowed"] = o.ResetPasswordAllowed
	}
	if !IsNil(o.EditUsernameAllowed) {
		toSerialize["editUsernameAllowed"] = o.EditUsernameAllowed
	}
	if !IsNil(o.UserCacheEnabled) {
		toSerialize["userCacheEnabled"] = o.UserCacheEnabled
	}
	if !IsNil(o.RealmCacheEnabled) {
		toSerialize["realmCacheEnabled"] = o.RealmCacheEnabled
	}
	if !IsNil(o.BruteForceProtected) {
		toSerialize["bruteForceProtected"] = o.BruteForceProtected
	}
	if !IsNil(o.PermanentLockout) {
		toSerialize["permanentLockout"] = o.PermanentLockout
	}
	if !IsNil(o.MaxFailureWaitSeconds) {
		toSerialize["maxFailureWaitSeconds"] = o.MaxFailureWaitSeconds
	}
	if !IsNil(o.MinimumQuickLoginWaitSeconds) {
		toSerialize["minimumQuickLoginWaitSeconds"] = o.MinimumQuickLoginWaitSeconds
	}
	if !IsNil(o.WaitIncrementSeconds) {
		toSerialize["waitIncrementSeconds"] = o.WaitIncrementSeconds
	}
	if !IsNil(o.QuickLoginCheckMilliSeconds) {
		toSerialize["quickLoginCheckMilliSeconds"] = o.QuickLoginCheckMilliSeconds
	}
	if !IsNil(o.MaxDeltaTimeSeconds) {
		toSerialize["maxDeltaTimeSeconds"] = o.MaxDeltaTimeSeconds
	}
	if !IsNil(o.FailureFactor) {
		toSerialize["failureFactor"] = o.FailureFactor
	}
	if !IsNil(o.PrivateKey) {
		toSerialize["privateKey"] = o.PrivateKey
	}
	if !IsNil(o.PublicKey) {
		toSerialize["publicKey"] = o.PublicKey
	}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.CodeSecret) {
		toSerialize["codeSecret"] = o.CodeSecret
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.DefaultRoles) {
		toSerialize["defaultRoles"] = o.DefaultRoles
	}
	if !IsNil(o.DefaultRole) {
		toSerialize["defaultRole"] = o.DefaultRole
	}
	if !IsNil(o.DefaultGroups) {
		toSerialize["defaultGroups"] = o.DefaultGroups
	}
	if !IsNil(o.RequiredCredentials) {
		toSerialize["requiredCredentials"] = o.RequiredCredentials
	}
	if !IsNil(o.PasswordPolicy) {
		toSerialize["passwordPolicy"] = o.PasswordPolicy
	}
	if !IsNil(o.OtpPolicyType) {
		toSerialize["otpPolicyType"] = o.OtpPolicyType
	}
	if !IsNil(o.OtpPolicyAlgorithm) {
		toSerialize["otpPolicyAlgorithm"] = o.OtpPolicyAlgorithm
	}
	if !IsNil(o.OtpPolicyInitialCounter) {
		toSerialize["otpPolicyInitialCounter"] = o.OtpPolicyInitialCounter
	}
	if !IsNil(o.OtpPolicyDigits) {
		toSerialize["otpPolicyDigits"] = o.OtpPolicyDigits
	}
	if !IsNil(o.OtpPolicyLookAheadWindow) {
		toSerialize["otpPolicyLookAheadWindow"] = o.OtpPolicyLookAheadWindow
	}
	if !IsNil(o.OtpPolicyPeriod) {
		toSerialize["otpPolicyPeriod"] = o.OtpPolicyPeriod
	}
	if !IsNil(o.OtpPolicyCodeReusable) {
		toSerialize["otpPolicyCodeReusable"] = o.OtpPolicyCodeReusable
	}
	if !IsNil(o.OtpSupportedApplications) {
		toSerialize["otpSupportedApplications"] = o.OtpSupportedApplications
	}
	if !IsNil(o.LocalizationTexts) {
		toSerialize["localizationTexts"] = o.LocalizationTexts
	}
	if !IsNil(o.WebAuthnPolicyRpEntityName) {
		toSerialize["webAuthnPolicyRpEntityName"] = o.WebAuthnPolicyRpEntityName
	}
	if !IsNil(o.WebAuthnPolicySignatureAlgorithms) {
		toSerialize["webAuthnPolicySignatureAlgorithms"] = o.WebAuthnPolicySignatureAlgorithms
	}
	if !IsNil(o.WebAuthnPolicyRpId) {
		toSerialize["webAuthnPolicyRpId"] = o.WebAuthnPolicyRpId
	}
	if !IsNil(o.WebAuthnPolicyAttestationConveyancePreference) {
		toSerialize["webAuthnPolicyAttestationConveyancePreference"] = o.WebAuthnPolicyAttestationConveyancePreference
	}
	if !IsNil(o.WebAuthnPolicyAuthenticatorAttachment) {
		toSerialize["webAuthnPolicyAuthenticatorAttachment"] = o.WebAuthnPolicyAuthenticatorAttachment
	}
	if !IsNil(o.WebAuthnPolicyRequireResidentKey) {
		toSerialize["webAuthnPolicyRequireResidentKey"] = o.WebAuthnPolicyRequireResidentKey
	}
	if !IsNil(o.WebAuthnPolicyUserVerificationRequirement) {
		toSerialize["webAuthnPolicyUserVerificationRequirement"] = o.WebAuthnPolicyUserVerificationRequirement
	}
	if !IsNil(o.WebAuthnPolicyCreateTimeout) {
		toSerialize["webAuthnPolicyCreateTimeout"] = o.WebAuthnPolicyCreateTimeout
	}
	if !IsNil(o.WebAuthnPolicyAvoidSameAuthenticatorRegister) {
		toSerialize["webAuthnPolicyAvoidSameAuthenticatorRegister"] = o.WebAuthnPolicyAvoidSameAuthenticatorRegister
	}
	if !IsNil(o.WebAuthnPolicyAcceptableAaguids) {
		toSerialize["webAuthnPolicyAcceptableAaguids"] = o.WebAuthnPolicyAcceptableAaguids
	}
	if !IsNil(o.WebAuthnPolicyExtraOrigins) {
		toSerialize["webAuthnPolicyExtraOrigins"] = o.WebAuthnPolicyExtraOrigins
	}
	if !IsNil(o.WebAuthnPolicyPasswordlessRpEntityName) {
		toSerialize["webAuthnPolicyPasswordlessRpEntityName"] = o.WebAuthnPolicyPasswordlessRpEntityName
	}
	if !IsNil(o.WebAuthnPolicyPasswordlessSignatureAlgorithms) {
		toSerialize["webAuthnPolicyPasswordlessSignatureAlgorithms"] = o.WebAuthnPolicyPasswordlessSignatureAlgorithms
	}
	if !IsNil(o.WebAuthnPolicyPasswordlessRpId) {
		toSerialize["webAuthnPolicyPasswordlessRpId"] = o.WebAuthnPolicyPasswordlessRpId
	}
	if !IsNil(o.WebAuthnPolicyPasswordlessAttestationConveyancePreference) {
		toSerialize["webAuthnPolicyPasswordlessAttestationConveyancePreference"] = o.WebAuthnPolicyPasswordlessAttestationConveyancePreference
	}
	if !IsNil(o.WebAuthnPolicyPasswordlessAuthenticatorAttachment) {
		toSerialize["webAuthnPolicyPasswordlessAuthenticatorAttachment"] = o.WebAuthnPolicyPasswordlessAuthenticatorAttachment
	}
	if !IsNil(o.WebAuthnPolicyPasswordlessRequireResidentKey) {
		toSerialize["webAuthnPolicyPasswordlessRequireResidentKey"] = o.WebAuthnPolicyPasswordlessRequireResidentKey
	}
	if !IsNil(o.WebAuthnPolicyPasswordlessUserVerificationRequirement) {
		toSerialize["webAuthnPolicyPasswordlessUserVerificationRequirement"] = o.WebAuthnPolicyPasswordlessUserVerificationRequirement
	}
	if !IsNil(o.WebAuthnPolicyPasswordlessCreateTimeout) {
		toSerialize["webAuthnPolicyPasswordlessCreateTimeout"] = o.WebAuthnPolicyPasswordlessCreateTimeout
	}
	if !IsNil(o.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister) {
		toSerialize["webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister"] = o.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister
	}
	if !IsNil(o.WebAuthnPolicyPasswordlessAcceptableAaguids) {
		toSerialize["webAuthnPolicyPasswordlessAcceptableAaguids"] = o.WebAuthnPolicyPasswordlessAcceptableAaguids
	}
	if !IsNil(o.WebAuthnPolicyPasswordlessExtraOrigins) {
		toSerialize["webAuthnPolicyPasswordlessExtraOrigins"] = o.WebAuthnPolicyPasswordlessExtraOrigins
	}
	if !IsNil(o.ClientProfiles) {
		toSerialize["clientProfiles"] = o.ClientProfiles
	}
	if !IsNil(o.ClientPolicies) {
		toSerialize["clientPolicies"] = o.ClientPolicies
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.FederatedUsers) {
		toSerialize["federatedUsers"] = o.FederatedUsers
	}
	if !IsNil(o.ScopeMappings) {
		toSerialize["scopeMappings"] = o.ScopeMappings
	}
	if !IsNil(o.ClientScopeMappings) {
		toSerialize["clientScopeMappings"] = o.ClientScopeMappings
	}
	if !IsNil(o.Clients) {
		toSerialize["clients"] = o.Clients
	}
	if !IsNil(o.ClientScopes) {
		toSerialize["clientScopes"] = o.ClientScopes
	}
	if !IsNil(o.DefaultDefaultClientScopes) {
		toSerialize["defaultDefaultClientScopes"] = o.DefaultDefaultClientScopes
	}
	if !IsNil(o.DefaultOptionalClientScopes) {
		toSerialize["defaultOptionalClientScopes"] = o.DefaultOptionalClientScopes
	}
	if !IsNil(o.BrowserSecurityHeaders) {
		toSerialize["browserSecurityHeaders"] = o.BrowserSecurityHeaders
	}
	if !IsNil(o.SmtpServer) {
		toSerialize["smtpServer"] = o.SmtpServer
	}
	if !IsNil(o.UserFederationProviders) {
		toSerialize["userFederationProviders"] = o.UserFederationProviders
	}
	if !IsNil(o.UserFederationMappers) {
		toSerialize["userFederationMappers"] = o.UserFederationMappers
	}
	if !IsNil(o.LoginTheme) {
		toSerialize["loginTheme"] = o.LoginTheme
	}
	if !IsNil(o.AccountTheme) {
		toSerialize["accountTheme"] = o.AccountTheme
	}
	if !IsNil(o.AdminTheme) {
		toSerialize["adminTheme"] = o.AdminTheme
	}
	if !IsNil(o.EmailTheme) {
		toSerialize["emailTheme"] = o.EmailTheme
	}
	if !IsNil(o.EventsEnabled) {
		toSerialize["eventsEnabled"] = o.EventsEnabled
	}
	if !IsNil(o.EventsExpiration) {
		toSerialize["eventsExpiration"] = o.EventsExpiration
	}
	if !IsNil(o.EventsListeners) {
		toSerialize["eventsListeners"] = o.EventsListeners
	}
	if !IsNil(o.EnabledEventTypes) {
		toSerialize["enabledEventTypes"] = o.EnabledEventTypes
	}
	if !IsNil(o.AdminEventsEnabled) {
		toSerialize["adminEventsEnabled"] = o.AdminEventsEnabled
	}
	if !IsNil(o.AdminEventsDetailsEnabled) {
		toSerialize["adminEventsDetailsEnabled"] = o.AdminEventsDetailsEnabled
	}
	if !IsNil(o.IdentityProviders) {
		toSerialize["identityProviders"] = o.IdentityProviders
	}
	if !IsNil(o.IdentityProviderMappers) {
		toSerialize["identityProviderMappers"] = o.IdentityProviderMappers
	}
	if !IsNil(o.ProtocolMappers) {
		toSerialize["protocolMappers"] = o.ProtocolMappers
	}
	if !IsNil(o.Components) {
		toSerialize["components"] = o.Components
	}
	if !IsNil(o.InternationalizationEnabled) {
		toSerialize["internationalizationEnabled"] = o.InternationalizationEnabled
	}
	if !IsNil(o.SupportedLocales) {
		toSerialize["supportedLocales"] = o.SupportedLocales
	}
	if !IsNil(o.DefaultLocale) {
		toSerialize["defaultLocale"] = o.DefaultLocale
	}
	if !IsNil(o.AuthenticationFlows) {
		toSerialize["authenticationFlows"] = o.AuthenticationFlows
	}
	if !IsNil(o.AuthenticatorConfig) {
		toSerialize["authenticatorConfig"] = o.AuthenticatorConfig
	}
	if !IsNil(o.RequiredActions) {
		toSerialize["requiredActions"] = o.RequiredActions
	}
	if !IsNil(o.BrowserFlow) {
		toSerialize["browserFlow"] = o.BrowserFlow
	}
	if !IsNil(o.RegistrationFlow) {
		toSerialize["registrationFlow"] = o.RegistrationFlow
	}
	if !IsNil(o.DirectGrantFlow) {
		toSerialize["directGrantFlow"] = o.DirectGrantFlow
	}
	if !IsNil(o.ResetCredentialsFlow) {
		toSerialize["resetCredentialsFlow"] = o.ResetCredentialsFlow
	}
	if !IsNil(o.ClientAuthenticationFlow) {
		toSerialize["clientAuthenticationFlow"] = o.ClientAuthenticationFlow
	}
	if !IsNil(o.DockerAuthenticationFlow) {
		toSerialize["dockerAuthenticationFlow"] = o.DockerAuthenticationFlow
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.KeycloakVersion) {
		toSerialize["keycloakVersion"] = o.KeycloakVersion
	}
	if !IsNil(o.UserManagedAccessAllowed) {
		toSerialize["userManagedAccessAllowed"] = o.UserManagedAccessAllowed
	}
	if !IsNil(o.Social) {
		toSerialize["social"] = o.Social
	}
	if !IsNil(o.UpdateProfileOnInitialSocialLogin) {
		toSerialize["updateProfileOnInitialSocialLogin"] = o.UpdateProfileOnInitialSocialLogin
	}
	if !IsNil(o.SocialProviders) {
		toSerialize["socialProviders"] = o.SocialProviders
	}
	if !IsNil(o.ApplicationScopeMappings) {
		toSerialize["applicationScopeMappings"] = o.ApplicationScopeMappings
	}
	if !IsNil(o.Applications) {
		toSerialize["applications"] = o.Applications
	}
	if !IsNil(o.OauthClients) {
		toSerialize["oauthClients"] = o.OauthClients
	}
	if !IsNil(o.ClientTemplates) {
		toSerialize["clientTemplates"] = o.ClientTemplates
	}
	if !IsNil(o.OAuth2DeviceCodeLifespan) {
		toSerialize["oAuth2DeviceCodeLifespan"] = o.OAuth2DeviceCodeLifespan
	}
	if !IsNil(o.OAuth2DevicePollingInterval) {
		toSerialize["oAuth2DevicePollingInterval"] = o.OAuth2DevicePollingInterval
	}
	return toSerialize, nil
}

type NullableRealmRepresentation struct {
	value *RealmRepresentation
	isSet bool
}

func (v NullableRealmRepresentation) Get() *RealmRepresentation {
	return v.value
}

func (v *NullableRealmRepresentation) Set(val *RealmRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableRealmRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableRealmRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealmRepresentation(val *RealmRepresentation) *NullableRealmRepresentation {
	return &NullableRealmRepresentation{value: val, isSet: true}
}

func (v NullableRealmRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealmRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
