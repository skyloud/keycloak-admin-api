/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GroupRepresentation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupRepresentation{}

// GroupRepresentation struct for GroupRepresentation
type GroupRepresentation struct {
	Id            *string               `json:"id,omitempty"`
	Name          *string               `json:"name,omitempty"`
	Path          *string               `json:"path,omitempty"`
	ParentId      *string               `json:"parentId,omitempty"`
	SubGroupCount *int64                `json:"subGroupCount,omitempty"`
	SubGroups     []GroupRepresentation `json:"subGroups,omitempty"`
	Attributes    *map[string][]string  `json:"attributes,omitempty"`
	RealmRoles    []string              `json:"realmRoles,omitempty"`
	ClientRoles   *map[string][]string  `json:"clientRoles,omitempty"`
	Access        *map[string]bool      `json:"access,omitempty"`
}

// NewGroupRepresentation instantiates a new GroupRepresentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupRepresentation() *GroupRepresentation {
	this := GroupRepresentation{}
	return &this
}

// NewGroupRepresentationWithDefaults instantiates a new GroupRepresentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupRepresentationWithDefaults() *GroupRepresentation {
	this := GroupRepresentation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GroupRepresentation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupRepresentation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GroupRepresentation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GroupRepresentation) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GroupRepresentation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupRepresentation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GroupRepresentation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GroupRepresentation) SetName(v string) {
	o.Name = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *GroupRepresentation) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupRepresentation) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *GroupRepresentation) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *GroupRepresentation) SetPath(v string) {
	o.Path = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *GroupRepresentation) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupRepresentation) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *GroupRepresentation) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *GroupRepresentation) SetParentId(v string) {
	o.ParentId = &v
}

// GetSubGroupCount returns the SubGroupCount field value if set, zero value otherwise.
func (o *GroupRepresentation) GetSubGroupCount() int64 {
	if o == nil || IsNil(o.SubGroupCount) {
		var ret int64
		return ret
	}
	return *o.SubGroupCount
}

// GetSubGroupCountOk returns a tuple with the SubGroupCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupRepresentation) GetSubGroupCountOk() (*int64, bool) {
	if o == nil || IsNil(o.SubGroupCount) {
		return nil, false
	}
	return o.SubGroupCount, true
}

// HasSubGroupCount returns a boolean if a field has been set.
func (o *GroupRepresentation) HasSubGroupCount() bool {
	if o != nil && !IsNil(o.SubGroupCount) {
		return true
	}

	return false
}

// SetSubGroupCount gets a reference to the given int64 and assigns it to the SubGroupCount field.
func (o *GroupRepresentation) SetSubGroupCount(v int64) {
	o.SubGroupCount = &v
}

// GetSubGroups returns the SubGroups field value if set, zero value otherwise.
func (o *GroupRepresentation) GetSubGroups() []GroupRepresentation {
	if o == nil || IsNil(o.SubGroups) {
		var ret []GroupRepresentation
		return ret
	}
	return o.SubGroups
}

// GetSubGroupsOk returns a tuple with the SubGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupRepresentation) GetSubGroupsOk() ([]GroupRepresentation, bool) {
	if o == nil || IsNil(o.SubGroups) {
		return nil, false
	}
	return o.SubGroups, true
}

// HasSubGroups returns a boolean if a field has been set.
func (o *GroupRepresentation) HasSubGroups() bool {
	if o != nil && !IsNil(o.SubGroups) {
		return true
	}

	return false
}

// SetSubGroups gets a reference to the given []GroupRepresentation and assigns it to the SubGroups field.
func (o *GroupRepresentation) SetSubGroups(v []GroupRepresentation) {
	o.SubGroups = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *GroupRepresentation) GetAttributes() map[string][]string {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string][]string
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupRepresentation) GetAttributesOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *GroupRepresentation) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string][]string and assigns it to the Attributes field.
func (o *GroupRepresentation) SetAttributes(v map[string][]string) {
	o.Attributes = &v
}

// GetRealmRoles returns the RealmRoles field value if set, zero value otherwise.
func (o *GroupRepresentation) GetRealmRoles() []string {
	if o == nil || IsNil(o.RealmRoles) {
		var ret []string
		return ret
	}
	return o.RealmRoles
}

// GetRealmRolesOk returns a tuple with the RealmRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupRepresentation) GetRealmRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.RealmRoles) {
		return nil, false
	}
	return o.RealmRoles, true
}

// HasRealmRoles returns a boolean if a field has been set.
func (o *GroupRepresentation) HasRealmRoles() bool {
	if o != nil && !IsNil(o.RealmRoles) {
		return true
	}

	return false
}

// SetRealmRoles gets a reference to the given []string and assigns it to the RealmRoles field.
func (o *GroupRepresentation) SetRealmRoles(v []string) {
	o.RealmRoles = v
}

// GetClientRoles returns the ClientRoles field value if set, zero value otherwise.
func (o *GroupRepresentation) GetClientRoles() map[string][]string {
	if o == nil || IsNil(o.ClientRoles) {
		var ret map[string][]string
		return ret
	}
	return *o.ClientRoles
}

// GetClientRolesOk returns a tuple with the ClientRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupRepresentation) GetClientRolesOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.ClientRoles) {
		return nil, false
	}
	return o.ClientRoles, true
}

// HasClientRoles returns a boolean if a field has been set.
func (o *GroupRepresentation) HasClientRoles() bool {
	if o != nil && !IsNil(o.ClientRoles) {
		return true
	}

	return false
}

// SetClientRoles gets a reference to the given map[string][]string and assigns it to the ClientRoles field.
func (o *GroupRepresentation) SetClientRoles(v map[string][]string) {
	o.ClientRoles = &v
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *GroupRepresentation) GetAccess() map[string]bool {
	if o == nil || IsNil(o.Access) {
		var ret map[string]bool
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupRepresentation) GetAccessOk() (*map[string]bool, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *GroupRepresentation) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given map[string]bool and assigns it to the Access field.
func (o *GroupRepresentation) SetAccess(v map[string]bool) {
	o.Access = &v
}

func (o GroupRepresentation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupRepresentation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.SubGroupCount) {
		toSerialize["subGroupCount"] = o.SubGroupCount
	}
	if !IsNil(o.SubGroups) {
		toSerialize["subGroups"] = o.SubGroups
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.RealmRoles) {
		toSerialize["realmRoles"] = o.RealmRoles
	}
	if !IsNil(o.ClientRoles) {
		toSerialize["clientRoles"] = o.ClientRoles
	}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	return toSerialize, nil
}

type NullableGroupRepresentation struct {
	value *GroupRepresentation
	isSet bool
}

func (v NullableGroupRepresentation) Get() *GroupRepresentation {
	return v.value
}

func (v *NullableGroupRepresentation) Set(val *GroupRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupRepresentation(val *GroupRepresentation) *NullableGroupRepresentation {
	return &NullableGroupRepresentation{value: val, isSet: true}
}

func (v NullableGroupRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
