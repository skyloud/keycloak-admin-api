/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResourceServerRepresentation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceServerRepresentation{}

// ResourceServerRepresentation struct for ResourceServerRepresentation
type ResourceServerRepresentation struct {
	Id                            *string                  `json:"id,omitempty"`
	ClientId                      *string                  `json:"clientId,omitempty"`
	Name                          *string                  `json:"name,omitempty"`
	AllowRemoteResourceManagement *bool                    `json:"allowRemoteResourceManagement,omitempty"`
	PolicyEnforcementMode         map[string]interface{}   `json:"policyEnforcementMode,omitempty"`
	Resources                     []ResourceRepresentation `json:"resources,omitempty"`
	Policies                      []PolicyRepresentation   `json:"policies,omitempty"`
	Scopes                        []ScopeRepresentation    `json:"scopes,omitempty"`
	DecisionStrategy              map[string]interface{}   `json:"decisionStrategy,omitempty"`
}

// NewResourceServerRepresentation instantiates a new ResourceServerRepresentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceServerRepresentation() *ResourceServerRepresentation {
	this := ResourceServerRepresentation{}
	return &this
}

// NewResourceServerRepresentationWithDefaults instantiates a new ResourceServerRepresentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceServerRepresentationWithDefaults() *ResourceServerRepresentation {
	this := ResourceServerRepresentation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResourceServerRepresentation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceServerRepresentation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResourceServerRepresentation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResourceServerRepresentation) SetId(v string) {
	o.Id = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *ResourceServerRepresentation) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceServerRepresentation) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *ResourceServerRepresentation) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *ResourceServerRepresentation) SetClientId(v string) {
	o.ClientId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResourceServerRepresentation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceServerRepresentation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResourceServerRepresentation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResourceServerRepresentation) SetName(v string) {
	o.Name = &v
}

// GetAllowRemoteResourceManagement returns the AllowRemoteResourceManagement field value if set, zero value otherwise.
func (o *ResourceServerRepresentation) GetAllowRemoteResourceManagement() bool {
	if o == nil || IsNil(o.AllowRemoteResourceManagement) {
		var ret bool
		return ret
	}
	return *o.AllowRemoteResourceManagement
}

// GetAllowRemoteResourceManagementOk returns a tuple with the AllowRemoteResourceManagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceServerRepresentation) GetAllowRemoteResourceManagementOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowRemoteResourceManagement) {
		return nil, false
	}
	return o.AllowRemoteResourceManagement, true
}

// HasAllowRemoteResourceManagement returns a boolean if a field has been set.
func (o *ResourceServerRepresentation) HasAllowRemoteResourceManagement() bool {
	if o != nil && !IsNil(o.AllowRemoteResourceManagement) {
		return true
	}

	return false
}

// SetAllowRemoteResourceManagement gets a reference to the given bool and assigns it to the AllowRemoteResourceManagement field.
func (o *ResourceServerRepresentation) SetAllowRemoteResourceManagement(v bool) {
	o.AllowRemoteResourceManagement = &v
}

// GetPolicyEnforcementMode returns the PolicyEnforcementMode field value if set, zero value otherwise.
func (o *ResourceServerRepresentation) GetPolicyEnforcementMode() map[string]interface{} {
	if o == nil || IsNil(o.PolicyEnforcementMode) {
		var ret map[string]interface{}
		return ret
	}
	return o.PolicyEnforcementMode
}

// GetPolicyEnforcementModeOk returns a tuple with the PolicyEnforcementMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceServerRepresentation) GetPolicyEnforcementModeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.PolicyEnforcementMode) {
		return map[string]interface{}{}, false
	}
	return o.PolicyEnforcementMode, true
}

// HasPolicyEnforcementMode returns a boolean if a field has been set.
func (o *ResourceServerRepresentation) HasPolicyEnforcementMode() bool {
	if o != nil && !IsNil(o.PolicyEnforcementMode) {
		return true
	}

	return false
}

// SetPolicyEnforcementMode gets a reference to the given map[string]interface{} and assigns it to the PolicyEnforcementMode field.
func (o *ResourceServerRepresentation) SetPolicyEnforcementMode(v map[string]interface{}) {
	o.PolicyEnforcementMode = v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *ResourceServerRepresentation) GetResources() []ResourceRepresentation {
	if o == nil || IsNil(o.Resources) {
		var ret []ResourceRepresentation
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceServerRepresentation) GetResourcesOk() ([]ResourceRepresentation, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *ResourceServerRepresentation) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []ResourceRepresentation and assigns it to the Resources field.
func (o *ResourceServerRepresentation) SetResources(v []ResourceRepresentation) {
	o.Resources = v
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
func (o *ResourceServerRepresentation) GetPolicies() []PolicyRepresentation {
	if o == nil || IsNil(o.Policies) {
		var ret []PolicyRepresentation
		return ret
	}
	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceServerRepresentation) GetPoliciesOk() ([]PolicyRepresentation, bool) {
	if o == nil || IsNil(o.Policies) {
		return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *ResourceServerRepresentation) HasPolicies() bool {
	if o != nil && !IsNil(o.Policies) {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []PolicyRepresentation and assigns it to the Policies field.
func (o *ResourceServerRepresentation) SetPolicies(v []PolicyRepresentation) {
	o.Policies = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *ResourceServerRepresentation) GetScopes() []ScopeRepresentation {
	if o == nil || IsNil(o.Scopes) {
		var ret []ScopeRepresentation
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceServerRepresentation) GetScopesOk() ([]ScopeRepresentation, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *ResourceServerRepresentation) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []ScopeRepresentation and assigns it to the Scopes field.
func (o *ResourceServerRepresentation) SetScopes(v []ScopeRepresentation) {
	o.Scopes = v
}

// GetDecisionStrategy returns the DecisionStrategy field value if set, zero value otherwise.
func (o *ResourceServerRepresentation) GetDecisionStrategy() map[string]interface{} {
	if o == nil || IsNil(o.DecisionStrategy) {
		var ret map[string]interface{}
		return ret
	}
	return o.DecisionStrategy
}

// GetDecisionStrategyOk returns a tuple with the DecisionStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceServerRepresentation) GetDecisionStrategyOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DecisionStrategy) {
		return map[string]interface{}{}, false
	}
	return o.DecisionStrategy, true
}

// HasDecisionStrategy returns a boolean if a field has been set.
func (o *ResourceServerRepresentation) HasDecisionStrategy() bool {
	if o != nil && !IsNil(o.DecisionStrategy) {
		return true
	}

	return false
}

// SetDecisionStrategy gets a reference to the given map[string]interface{} and assigns it to the DecisionStrategy field.
func (o *ResourceServerRepresentation) SetDecisionStrategy(v map[string]interface{}) {
	o.DecisionStrategy = v
}

func (o ResourceServerRepresentation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceServerRepresentation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.AllowRemoteResourceManagement) {
		toSerialize["allowRemoteResourceManagement"] = o.AllowRemoteResourceManagement
	}
	if !IsNil(o.PolicyEnforcementMode) {
		toSerialize["policyEnforcementMode"] = o.PolicyEnforcementMode
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !IsNil(o.Policies) {
		toSerialize["policies"] = o.Policies
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.DecisionStrategy) {
		toSerialize["decisionStrategy"] = o.DecisionStrategy
	}
	return toSerialize, nil
}

type NullableResourceServerRepresentation struct {
	value *ResourceServerRepresentation
	isSet bool
}

func (v NullableResourceServerRepresentation) Get() *ResourceServerRepresentation {
	return v.value
}

func (v *NullableResourceServerRepresentation) Set(val *ResourceServerRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceServerRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceServerRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceServerRepresentation(val *ResourceServerRepresentation) *NullableResourceServerRepresentation {
	return &NullableResourceServerRepresentation{value: val, isSet: true}
}

func (v NullableResourceServerRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceServerRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
